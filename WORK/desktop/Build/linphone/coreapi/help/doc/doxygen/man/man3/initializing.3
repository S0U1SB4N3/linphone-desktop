.TH "initializing" 3 "Fri Dec 15 2017" "Version 3.12.0" "Liblinphone" \" -*- nroff -*-
.ad l
.nh
.SH NAME
initializing \- Initializing liblinphone\&.  

.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fB_LinphoneCoreVTable\fP"
.br
.RI "This structure holds all callbacks that the application should implement\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBLINPHONE_CORE\fP(object)   BELLE_SIP_CAST(object, \fBLinphoneCore\fP)"
.br
.RI "Safely down-cast a belle_sip_object_t into LinphoneCore\&. "
.ti -1c
.RI "#define \fBLC_SIP_TRANSPORT_DISABLED\fP   0"
.br
.RI "Disable a sip transport Use with #LinphoneSipTransports\&. "
.ti -1c
.RI "#define \fBLC_SIP_TRANSPORT_RANDOM\fP   (\-1)"
.br
.RI "Randomly chose a sip port for this transport Use with #LinphoneSipTransports\&. "
.ti -1c
.RI "#define \fBLC_SIP_TRANSPORT_DONTBIND\fP   (\-2)"
.br
.RI "Don't create any server socket for this transport, ie don't bind on any port\&. "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void(* \fBLinphoneCoreCbsCallCreatedCb\fP) (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call)"
.br
.RI "Callback notifying that a new LinphoneCall (either incoming or outgoing) has been created\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreCbsGlobalStateChangedCb\fP) (\fBLinphoneCore\fP *lc, \fBLinphoneGlobalState\fP gstate, const char *message)"
.br
.RI "Global state notification callback\&. "
.ti -1c
.RI "typedef \fBLinphoneCoreCbsGlobalStateChangedCb\fP \fBLinphoneCoreGlobalStateChangedCb\fP"
.br
.RI "Old name of \fBLinphoneCoreCbsGlobalStateChangedCb\fP\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreCbsCallStateChangedCb\fP) (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call, \fBLinphoneCallState\fP cstate, const char *message)"
.br
.RI "Call state notification callback\&. "
.ti -1c
.RI "typedef \fBLinphoneCoreCbsCallStateChangedCb\fP \fBLinphoneCoreCallStateChangedCb\fP"
.br
.RI "Old name of \fBLinphoneCoreCbsCallStateChangedCb\fP\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreCbsCallEncryptionChangedCb\fP) (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call, bool_t on, const char *authentication_token)"
.br
.RI "Call encryption changed callback\&. "
.ti -1c
.RI "typedef \fBLinphoneCoreCbsCallEncryptionChangedCb\fP \fBLinphoneCoreCallEncryptionChangedCb\fP"
.br
.RI "Old name of \fBLinphoneCoreCbsCallEncryptionChangedCb\fP\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreCbsRegistrationStateChangedCb\fP) (\fBLinphoneCore\fP *lc, \fBLinphoneProxyConfig\fP *cfg, \fBLinphoneRegistrationState\fP cstate, const char *message)"
.br
.RI "Registration state notification callback prototype\&. "
.ti -1c
.RI "typedef \fBLinphoneCoreCbsRegistrationStateChangedCb\fP \fBLinphoneCoreRegistrationStateChangedCb\fP"
.br
.RI "Old name of \fBLinphoneCoreCbsRegistrationStateChangedCb\fP\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreCbsNotifyPresenceReceivedCb\fP) (\fBLinphoneCore\fP *lc, \fBLinphoneFriend\fP *lf)"
.br
.RI "Report status change for a friend previously \fBadded \fP to \fBLinphoneCore\fP\&. "
.ti -1c
.RI "typedef \fBLinphoneCoreCbsNotifyPresenceReceivedCb\fP \fBLinphoneCoreNotifyPresenceReceivedCb\fP"
.br
.RI "Old name of \fBLinphoneCoreCbsNotifyPresenceReceivedCb\fP\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreCbsNotifyPresenceReceivedForUriOrTelCb\fP) (\fBLinphoneCore\fP *lc, \fBLinphoneFriend\fP *lf, const char *uri_or_tel, const \fBLinphonePresenceModel\fP *presence_model)"
.br
.RI "Reports presence model change for a specific URI or phone number of a friend\&. "
.ti -1c
.RI "typedef \fBLinphoneCoreCbsNotifyPresenceReceivedForUriOrTelCb\fP \fBLinphoneCoreNotifyPresenceReceivedForUriOrTelCb\fP"
.br
.RI "Old name of \fBLinphoneCoreCbsNotifyPresenceReceivedForUriOrTelCb\fP\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreCbsNewSubscriptionRequestedCb\fP) (\fBLinphoneCore\fP *lc, \fBLinphoneFriend\fP *lf, const char *url)"
.br
.RI "Reports that a new subscription request has been received and wait for a decision\&. "
.ti -1c
.RI "typedef \fBLinphoneCoreCbsNewSubscriptionRequestedCb\fP \fBLinphoneCoreNewSubscriptionRequestedCb\fP"
.br
.RI "Old name of \fBLinphoneCoreCbsNewSubscriptionRequestedCb\fP\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreAuthInfoRequestedCb\fP) (\fBLinphoneCore\fP *lc, const char *realm, const char *username, const char *domain)"
.br
.RI "Callback for requesting authentication information to application or user\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreCbsAuthenticationRequestedCb\fP) (\fBLinphoneCore\fP *lc, \fBLinphoneAuthInfo\fP *auth_info, \fBLinphoneAuthMethod\fP method)"
.br
.RI "Callback for requesting authentication information to application or user\&. "
.ti -1c
.RI "typedef \fBLinphoneCoreCbsAuthenticationRequestedCb\fP \fBLinphoneCoreAuthenticationRequestedCb\fP"
.br
.RI "Old name of \fBLinphoneCoreCbsAuthenticationRequestedCb\fP\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreCbsCallLogUpdatedCb\fP) (\fBLinphoneCore\fP *lc, \fBLinphoneCallLog\fP *newcl)"
.br
.RI "Callback to notify a new call-log entry has been added\&. "
.ti -1c
.RI "typedef \fBLinphoneCoreCbsCallLogUpdatedCb\fP \fBLinphoneCoreCallLogUpdatedCb\fP"
.br
.RI "Old name of \fBLinphoneCoreCbsCallLogUpdatedCb\fP\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreTextMessageReceivedCb\fP) (\fBLinphoneCore\fP *lc, \fBLinphoneChatRoom\fP *room, const \fBLinphoneAddress\fP *from, const char *message)"
.br
.RI "Callback prototype\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreCbsMessageReceivedCb\fP) (\fBLinphoneCore\fP *lc, \fBLinphoneChatRoom\fP *room, \fBLinphoneChatMessage\fP *message)"
.br
.RI "Chat message callback prototype\&. "
.ti -1c
.RI "typedef \fBLinphoneCoreCbsMessageReceivedCb\fP \fBLinphoneCoreMessageReceivedCb\fP"
.br
.RI "Old name of \fBLinphoneCoreCbsMessageReceivedCb\fP\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreCbsMessageReceivedUnableDecryptCb\fP) (\fBLinphoneCore\fP *lc, \fBLinphoneChatRoom\fP *room, \fBLinphoneChatMessage\fP *message)"
.br
.RI "Chat message not decrypted callback prototype\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreFileTransferRecvCb\fP) (\fBLinphoneCore\fP *lc, \fBLinphoneChatMessage\fP *message, const \fBLinphoneContent\fP *content, const char *buff, size_t size)"
.br
.RI "File transfer receive callback prototype\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreFileTransferSendCb\fP) (\fBLinphoneCore\fP *lc, \fBLinphoneChatMessage\fP *message, const \fBLinphoneContent\fP *content, char *buff, size_t *size)"
.br
.RI "File transfer send callback prototype\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreFileTransferProgressIndicationCb\fP) (\fBLinphoneCore\fP *lc, \fBLinphoneChatMessage\fP *message, const \fBLinphoneContent\fP *content, size_t offset, size_t total)"
.br
.RI "File transfer progress indication callback prototype\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreCbsIsComposingReceivedCb\fP) (\fBLinphoneCore\fP *lc, \fBLinphoneChatRoom\fP *room)"
.br
.RI "Is composing notification callback prototype\&. "
.ti -1c
.RI "typedef \fBLinphoneCoreCbsIsComposingReceivedCb\fP \fBLinphoneCoreIsComposingReceivedCb\fP"
.br
.RI "Old name of \fBLinphoneCoreCbsIsComposingReceivedCb\fP\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreCbsDtmfReceivedCb\fP) (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call, int dtmf)"
.br
.RI "Callback for being notified of DTMFs received\&. "
.ti -1c
.RI "typedef \fBLinphoneCoreCbsDtmfReceivedCb\fP \fBLinphoneCoreDtmfReceivedCb\fP"
.br
.RI "Old name of \fBLinphoneCoreCbsDtmfReceivedCb\fP\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreCbsReferReceivedCb\fP) (\fBLinphoneCore\fP *lc, const char *refer_to)"
.br
.RI "Callback prototype\&. "
.ti -1c
.RI "typedef \fBLinphoneCoreCbsReferReceivedCb\fP \fBLinphoneCoreReferReceivedCb\fP"
.br
.RI "Old name of \fBLinphoneCoreCbsReferReceivedCb\fP\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreCbsBuddyInfoUpdatedCb\fP) (\fBLinphoneCore\fP *lc, \fBLinphoneFriend\fP *lf)"
.br
.RI "Callback prototype\&. "
.ti -1c
.RI "typedef \fBLinphoneCoreCbsBuddyInfoUpdatedCb\fP \fBLinphoneCoreBuddyInfoUpdatedCb\fP"
.br
.RI "Old name of \fBLinphoneCoreCbsBuddyInfoUpdatedCb\fP\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreCbsTransferStateChangedCb\fP) (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *transfered, \fBLinphoneCallState\fP new_call_state)"
.br
.RI "Callback for notifying progresses of transfers\&. "
.ti -1c
.RI "typedef \fBLinphoneCoreCbsTransferStateChangedCb\fP \fBLinphoneCoreTransferStateChangedCb\fP"
.br
.RI "Old name of LinphoneCoreCbsTransferStateChangedCb\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreCbsCallStatsUpdatedCb\fP) (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call, const \fBLinphoneCallStats\fP *stats)"
.br
.RI "Callback for receiving quality statistics for calls\&. "
.ti -1c
.RI "typedef \fBLinphoneCoreCbsCallStatsUpdatedCb\fP \fBLinphoneCoreCallStatsUpdatedCb\fP"
.br
.RI "Old name of \fBLinphoneCoreCbsCallStatsUpdatedCb\fP\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreCbsInfoReceivedCb\fP) (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call, const \fBLinphoneInfoMessage\fP *msg)"
.br
.RI "Callback prototype for receiving info messages\&. "
.ti -1c
.RI "typedef \fBLinphoneCoreCbsInfoReceivedCb\fP \fBLinphoneCoreInfoReceivedCb\fP"
.br
.RI "Old name of \fBLinphoneCoreCbsInfoReceivedCb\fP\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreCbsConfiguringStatusCb\fP) (\fBLinphoneCore\fP *lc, \fBLinphoneConfiguringState\fP status, const char *message)"
.br
.RI "Callback prototype for configuring status changes notification\&. "
.ti -1c
.RI "typedef \fBLinphoneCoreCbsConfiguringStatusCb\fP \fBLinphoneCoreConfiguringStatusCb\fP"
.br
.RI "Old name of \fBLinphoneCoreCbsConfiguringStatusCb\fP\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreCbsNetworkReachableCb\fP) (\fBLinphoneCore\fP *lc, bool_t reachable)"
.br
.RI "Callback prototype for reporting network change either automatically detected or notified by \fBlinphone_core_set_network_reachable\fP\&. "
.ti -1c
.RI "typedef \fBLinphoneCoreCbsNetworkReachableCb\fP \fBLinphoneCoreNetworkReachableCb\fP"
.br
.RI "Old name of \fBLinphoneCoreCbsNetworkReachableCb\fP\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreCbsLogCollectionUploadStateChangedCb\fP) (\fBLinphoneCore\fP *lc, \fBLinphoneCoreLogCollectionUploadState\fP state, const char *info)"
.br
.RI "Callback prototype for reporting log collection upload state change\&. "
.ti -1c
.RI "typedef \fBLinphoneCoreCbsLogCollectionUploadStateChangedCb\fP \fBLinphoneCoreLogCollectionUploadStateChangedCb\fP"
.br
.RI "Old name of \fBLinphoneCoreCbsLogCollectionUploadStateChangedCb\fP\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreCbsLogCollectionUploadProgressIndicationCb\fP) (\fBLinphoneCore\fP *lc, size_t offset, size_t total)"
.br
.RI "Callback prototype for reporting log collection upload progress indication\&. "
.ti -1c
.RI "typedef \fBLinphoneCoreCbsLogCollectionUploadProgressIndicationCb\fP \fBLinphoneCoreLogCollectionUploadProgressIndicationCb\fP"
.br
.RI "Old name of \fBLinphoneCoreCbsLogCollectionUploadProgressIndicationCb\fP\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreCbsFriendListCreatedCb\fP) (\fBLinphoneCore\fP *lc, \fBLinphoneFriendList\fP *list)"
.br
.RI "Callback prototype for reporting when a friend list has been added to the core friends list\&. "
.ti -1c
.RI "typedef \fBLinphoneCoreCbsFriendListCreatedCb\fP \fBLinphoneCoreFriendListCreatedCb\fP"
.br
.RI "Old name of \fBLinphoneCoreCbsFriendListCreatedCb\fP\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreCbsFriendListRemovedCb\fP) (\fBLinphoneCore\fP *lc, \fBLinphoneFriendList\fP *list)"
.br
.RI "Callback prototype for reporting when a friend list has been removed from the core friends list\&. "
.ti -1c
.RI "typedef \fBLinphoneCoreCbsFriendListRemovedCb\fP \fBLinphoneCoreFriendListRemovedCb\fP"
.br
.RI "Old name of \fBLinphoneCoreCbsFriendListRemovedCb\fP\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreCbsVersionUpdateCheckResultReceivedCb\fP) (\fBLinphoneCore\fP *lc, \fBLinphoneVersionUpdateCheckResult\fP result, const char *version, const char *url)"
.br
.RI "Callback prototype for reporting the result of a version update check\&. "
.ti -1c
.RI "typedef void(* \fBShowInterfaceCb\fP) (\fBLinphoneCore\fP *lc)"
.br
.RI "Callback prototype\&. "
.ti -1c
.RI "typedef void(* \fBDisplayStatusCb\fP) (\fBLinphoneCore\fP *lc, const char *message)"
.br
.RI "Callback prototype\&. "
.ti -1c
.RI "typedef void(* \fBDisplayMessageCb\fP) (\fBLinphoneCore\fP *lc, const char *message)"
.br
.RI "Callback prototype\&. "
.ti -1c
.RI "typedef void(* \fBDisplayUrlCb\fP) (\fBLinphoneCore\fP *lc, const char *message, const char *url)"
.br
.RI "Callback prototype\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCoreCbFunc\fP) (\fBLinphoneCore\fP *lc, void *user_data)"
.br
.RI "Callback prototype\&. "
.ti -1c
.RI "typedef struct \fB_LinphoneCoreVTable\fP \fBLinphoneCoreVTable\fP"
.br
.RI "This structure holds all callbacks that the application should implement\&. "
.ti -1c
.RI "typedef enum \fB_LinphoneAddressFamily\fP \fBLinphoneAddressFamily\fP"
.br
.RI "Enum describing Ip family\&. "
.ti -1c
.RI "typedef enum \fB_LinphoneConfiguringState\fP \fBLinphoneConfiguringState\fP"
.br
.RI "LinphoneGlobalState describes the global state of the LinphoneCore object\&. "
.ti -1c
.RI "typedef struct _LinphoneCore \fBLinphoneCore\fP"
.br
.RI "Linphone core main object created by function \fBlinphone_core_new()\fP \&. "
.ti -1c
.RI "typedef struct _LinphoneCoreCbs \fBLinphoneCoreCbs\fP"
.br
.RI "That class holds all the callbacks which are called by \fBLinphoneCore\fP\&. "
.ti -1c
.RI "typedef struct _LinphoneFactory \fBLinphoneFactory\fP"
.br
.RI "\fBLinphoneFactory\fP is a singleton object devoted to the creation of all the object of Liblinphone that cannot created by \fBLinphoneCore\fP or \fBLinphoneCore\fP itself\&. "
.ti -1c
.RI "typedef enum \fB_LinphoneGlobalState\fP \fBLinphoneGlobalState\fP"
.br
.RI "LinphoneGlobalState describes the global state of the LinphoneCore object\&. "
.ti -1c
.RI "typedef enum \fB_LinphoneIceState\fP \fBLinphoneIceState\fP"
.br
.RI "Enum describing ICE states\&. "
.ti -1c
.RI "typedef enum _LinphoneLogCollectionState \fBLinphoneLogCollectionState\fP"
.br
.ti -1c
.RI "typedef enum \fB_LinphoneCoreLogCollectionUploadState\fP \fBLinphoneCoreLogCollectionUploadState\fP"
.br
.RI "LinphoneCoreLogCollectionUploadState is used to notify if log collection upload have been succesfully delivered or not\&. "
.ti -1c
.RI "typedef struct _LinphoneTransports \fBLinphoneTransports\fP"
.br
.RI "Linphone core SIP transport ports\&. "
.ti -1c
.RI "typedef enum \fB_LinphoneStreamType\fP \fBLinphoneStreamType\fP"
.br
.RI "Enum describing the stream types\&. "
.ti -1c
.RI "typedef enum \fB_LinphoneUpnpState\fP \fBLinphoneUpnpState\fP"
.br
.RI "Enum describing uPnP states\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fB_LinphoneAddressFamily\fP { \fBLinphoneAddressFamilyInet\fP, \fBLinphoneAddressFamilyInet6\fP, \fBLinphoneAddressFamilyUnspec\fP }
.RI "Enum describing Ip family\&. ""
.br
.ti -1c
.RI "enum \fB_LinphoneConfiguringState\fP { \fBLinphoneConfiguringSuccessful\fP, \fBLinphoneConfiguringFailed\fP, \fBLinphoneConfiguringSkipped\fP }
.RI "LinphoneGlobalState describes the global state of the LinphoneCore object\&. ""
.br
.ti -1c
.RI "enum \fB_LinphoneGlobalState\fP { \fBLinphoneGlobalOff\fP, \fBLinphoneGlobalStartup\fP, \fBLinphoneGlobalOn\fP, \fBLinphoneGlobalShutdown\fP, \fBLinphoneGlobalConfiguring\fP }
.RI "LinphoneGlobalState describes the global state of the LinphoneCore object\&. ""
.br
.ti -1c
.RI "enum \fB_LinphoneIceState\fP { \fBLinphoneIceStateNotActivated\fP, \fBLinphoneIceStateFailed\fP, \fBLinphoneIceStateInProgress\fP, \fBLinphoneIceStateHostConnection\fP, \fBLinphoneIceStateReflexiveConnection\fP, \fBLinphoneIceStateRelayConnection\fP }
.RI "Enum describing ICE states\&. ""
.br
.ti -1c
.RI "enum \fB_LinphoneLogCollectionState\fP { \fBLinphoneLogCollectionDisabled\fP, \fBLinphoneLogCollectionEnabled\fP, \fBLinphoneLogCollectionEnabledWithoutPreviousLogHandler\fP }"
.br
.ti -1c
.RI "enum \fB_LinphoneCoreLogCollectionUploadState\fP { \fBLinphoneCoreLogCollectionUploadStateInProgress\fP, \fBLinphoneCoreLogCollectionUploadStateDelivered\fP, \fBLinphoneCoreLogCollectionUploadStateNotDelivered\fP }
.RI "LinphoneCoreLogCollectionUploadState is used to notify if log collection upload have been succesfully delivered or not\&. ""
.br
.ti -1c
.RI "enum \fB_LinphoneStreamType\fP { \fBLinphoneStreamTypeAudio\fP, \fBLinphoneStreamTypeVideo\fP, \fBLinphoneStreamTypeText\fP, \fBLinphoneStreamTypeUnknown\fP }
.RI "Enum describing the stream types\&. ""
.br
.ti -1c
.RI "enum \fB_LinphoneUpnpState\fP { \fBLinphoneUpnpStateIdle\fP, \fBLinphoneUpnpStatePending\fP, \fBLinphoneUpnpStateAdding\fP, \fBLinphoneUpnpStateRemoving\fP, \fBLinphoneUpnpStateNotAvailable\fP, \fBLinphoneUpnpStateOk\fP, \fBLinphoneUpnpStateKo\fP, \fBLinphoneUpnpStateBlacklisted\fP }
.RI "Enum describing uPnP states\&. ""
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBLinphoneCoreVTable\fP * \fBlinphone_core_v_table_new\fP (void)"
.br
.RI "Instantiate a vtable with all arguments set to NULL\&. "
.ti -1c
.RI "void \fBlinphone_core_v_table_set_user_data\fP (\fBLinphoneCoreVTable\fP *table, void *data)"
.br
.RI "Sets a user data pointer in the vtable\&. "
.ti -1c
.RI "void * \fBlinphone_core_v_table_get_user_data\fP (const \fBLinphoneCoreVTable\fP *table)"
.br
.RI "Gets a user data pointer in the vtable\&. "
.ti -1c
.RI "\fBLinphoneCoreVTable\fP * \fBlinphone_core_get_current_vtable\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Gets the current VTable\&. "
.ti -1c
.RI "void \fBlinphone_core_v_table_destroy\fP (\fBLinphoneCoreVTable\fP *table)"
.br
.RI "Destroy a vtable\&. "
.ti -1c
.RI "\fBLinphoneCoreCbs\fP * \fBlinphone_core_cbs_ref\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Increment the reference counter\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_unref\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Decrement the reference counter\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_user_data\fP (\fBLinphoneCoreCbs\fP *cbs, void *user_data)"
.br
.RI "Set private data to be get from each callbacks\&. "
.ti -1c
.RI "void * \fBlinphone_core_cbs_get_user_data\fP (const \fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the user pointer\&. "
.ti -1c
.RI "\fBLinphoneCoreCbs\fP * \fBlinphone_core_get_current_callbacks\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Gets the current \fBLinphoneCoreCbs\fP\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_global_state_changed\fP (\fBLinphoneCoreCbs\fP *cbs, \fBLinphoneCoreCbsGlobalStateChangedCb\fP cb)"
.br
.RI "Set the \fBLinphoneCoreGlobalStateChangedCb\fP callback\&. "
.ti -1c
.RI "\fBLinphoneCoreCbsGlobalStateChangedCb\fP \fBlinphone_core_cbs_get_global_state_changed\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the # callback\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_registration_state_changed\fP (\fBLinphoneCoreCbs\fP *cbs, \fBLinphoneCoreCbsRegistrationStateChangedCb\fP cb)"
.br
.RI "Set the \fBLinphoneCoreCbsRegistrationStateChangedCb\fP callback\&. "
.ti -1c
.RI "\fBLinphoneCoreCbsRegistrationStateChangedCb\fP \fBlinphone_core_cbs_get_registration_state_changed\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the \fBLinphoneCoreCbsRegistrationStateChangedCb\fP callback\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_call_state_changed\fP (\fBLinphoneCoreCbs\fP *cbs, \fBLinphoneCoreCbsCallStateChangedCb\fP cb)"
.br
.RI "Set the \fBLinphoneCoreCbsCallStateChangedCb\fP callback\&. "
.ti -1c
.RI "\fBLinphoneCoreCbsCallStateChangedCb\fP \fBlinphone_core_cbs_get_call_state_changed\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the \fBLinphoneCoreCbsCallStateChangedCb\fP callback\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_notify_presence_received\fP (\fBLinphoneCoreCbs\fP *cbs, \fBLinphoneCoreCbsNotifyPresenceReceivedCb\fP cb)"
.br
.RI "Set the \fBLinphoneCoreCbsNotifyPresenceReceivedCb\fP callback\&. "
.ti -1c
.RI "\fBLinphoneCoreCbsNotifyPresenceReceivedCb\fP \fBlinphone_core_cbs_get_notify_presence_received\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the \fBLinphoneCoreCbsNotifyPresenceReceivedCb\fP callback\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_notify_presence_received_for_uri_or_tel\fP (\fBLinphoneCoreCbs\fP *cbs, \fBLinphoneCoreCbsNotifyPresenceReceivedForUriOrTelCb\fP cb)"
.br
.RI "Set the \fBLinphoneCoreCbsNotifyPresenceReceivedForUriOrTelCb\fP callback\&. "
.ti -1c
.RI "\fBLinphoneCoreCbsNotifyPresenceReceivedForUriOrTelCb\fP \fBlinphone_core_cbs_get_notify_presence_received_for_uri_or_tel\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the \fBLinphoneCoreCbsNotifyPresenceReceivedForUriOrTelCb\fP callback\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_new_subscription_requested\fP (\fBLinphoneCoreCbs\fP *cbs, \fBLinphoneCoreCbsNewSubscriptionRequestedCb\fP cb)"
.br
.RI "Set the \fBLinphoneCoreCbsNewSubscriptionRequestedCb\fP callback\&. "
.ti -1c
.RI "\fBLinphoneCoreCbsNewSubscriptionRequestedCb\fP \fBlinphone_core_cbs_get_new_subscription_requested\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the \fBLinphoneCoreCbsNewSubscriptionRequestedCb\fP callback\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_authentication_requested\fP (\fBLinphoneCoreCbs\fP *cbs, \fBLinphoneCoreCbsAuthenticationRequestedCb\fP cb)"
.br
.RI "Set the \fBLinphoneCoreCbsAuthenticationRequestedCb\fP callback\&. "
.ti -1c
.RI "\fBLinphoneCoreCbsAuthenticationRequestedCb\fP \fBlinphone_core_cbs_get_authentication_requested\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the \fBLinphoneCoreCbsAuthenticationRequestedCb\fP callback\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_call_log_updated\fP (\fBLinphoneCoreCbs\fP *cbs, \fBLinphoneCoreCbsCallLogUpdatedCb\fP cb)"
.br
.RI "Set the \fBLinphoneCoreCbsCallLogUpdatedCb\fP callback\&. "
.ti -1c
.RI "\fBLinphoneCoreCbsCallLogUpdatedCb\fP \fBlinphone_core_cbs_get_call_log_updated\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the \fBLinphoneCoreCbsCallLogUpdatedCb\fP callback\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_message_received\fP (\fBLinphoneCoreCbs\fP *cbs, \fBLinphoneCoreCbsMessageReceivedCb\fP cb)"
.br
.RI "Set the \fBLinphoneCoreCbsMessageReceivedCb\fP callback\&. "
.ti -1c
.RI "\fBLinphoneCoreCbsMessageReceivedCb\fP \fBlinphone_core_cbs_get_message_received\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the \fBLinphoneCoreCbsMessageReceivedCb\fP callback\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_is_composing_received\fP (\fBLinphoneCoreCbs\fP *cbs, \fBLinphoneCoreCbsIsComposingReceivedCb\fP cb)"
.br
.RI "Set the \fBLinphoneCoreCbsIsComposingReceivedCb\fP callback\&. "
.ti -1c
.RI "\fBLinphoneCoreCbsIsComposingReceivedCb\fP \fBlinphone_core_cbs_get_is_composing_received\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the \fBLinphoneCoreCbsIsComposingReceivedCb\fP callback\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_dtmf_received\fP (\fBLinphoneCoreCbs\fP *cbs, \fBLinphoneCoreCbsDtmfReceivedCb\fP cb)"
.br
.RI "Set the \fBLinphoneCoreCbsDtmfReceivedCb\fP callback\&. "
.ti -1c
.RI "\fBLinphoneCoreCbsDtmfReceivedCb\fP \fBlinphone_core_cbs_get_dtmf_received\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the \fBLinphoneCoreCbsDtmfReceivedCb\fP callback\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_refer_received\fP (\fBLinphoneCoreCbs\fP *cbs, \fBLinphoneCoreCbsReferReceivedCb\fP cb)"
.br
.RI "Set the \fBLinphoneCoreCbsReferReceivedCb\fP callback\&. "
.ti -1c
.RI "\fBLinphoneCoreCbsReferReceivedCb\fP \fBlinphone_core_cbs_get_refer_received\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the \fBLinphoneCoreCbsReferReceivedCb\fP callback\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_call_encryption_changed\fP (\fBLinphoneCoreCbs\fP *cbs, \fBLinphoneCoreCbsCallEncryptionChangedCb\fP cb)"
.br
.RI "Set the \fBLinphoneCoreCbsCallEncryptionChangedCb\fP callback\&. "
.ti -1c
.RI "\fBLinphoneCoreCbsCallEncryptionChangedCb\fP \fBlinphone_core_cbs_get_call_encryption_changed\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the \fBLinphoneCoreCbsCallEncryptionChangedCb\fP callback\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_transfer_state_changed\fP (\fBLinphoneCoreCbs\fP *cbs, \fBLinphoneCoreCbsTransferStateChangedCb\fP cb)"
.br
.RI "Set the \fBLinphoneCoreCbsTransferStateChangedCb\fP callback\&. "
.ti -1c
.RI "\fBLinphoneCoreCbsTransferStateChangedCb\fP \fBlinphone_core_cbs_get_transfer_state_changed\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the \fBLinphoneCoreCbsTransferStateChangedCb\fP callback\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_buddy_info_updated\fP (\fBLinphoneCoreCbs\fP *cbs, \fBLinphoneCoreCbsBuddyInfoUpdatedCb\fP cb)"
.br
.RI "Set the \fBLinphoneCoreCbsBuddyInfoUpdatedCb\fP callback\&. "
.ti -1c
.RI "\fBLinphoneCoreCbsBuddyInfoUpdatedCb\fP \fBlinphone_core_cbs_get_buddy_info_updated\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the \fBLinphoneCoreCbsBuddyInfoUpdatedCb\fP callback\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_call_stats_updated\fP (\fBLinphoneCoreCbs\fP *cbs, \fBLinphoneCoreCbsCallStatsUpdatedCb\fP cb)"
.br
.RI "Set the \fBLinphoneCoreCbsCallStatsUpdatedCb\fP callback\&. "
.ti -1c
.RI "\fBLinphoneCoreCbsCallStatsUpdatedCb\fP \fBlinphone_core_cbs_get_call_stats_updated\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the \fBLinphoneCoreCbsCallStatsUpdatedCb\fP callback\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_info_received\fP (\fBLinphoneCoreCbs\fP *cbs, \fBLinphoneCoreCbsInfoReceivedCb\fP cb)"
.br
.RI "Set the \fBLinphoneCoreCbsInfoReceivedCb\fP callback\&. "
.ti -1c
.RI "\fBLinphoneCoreCbsInfoReceivedCb\fP \fBlinphone_core_cbs_get_info_received\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the \fBLinphoneCoreCbsInfoReceivedCb\fP callback\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_subscription_state_changed\fP (\fBLinphoneCoreCbs\fP *cbs, \fBLinphoneCoreCbsSubscriptionStateChangedCb\fP cb)"
.br
.RI "Set the \fBLinphoneCoreCbsSubscriptionStateChangedCb\fP callback\&. "
.ti -1c
.RI "\fBLinphoneCoreCbsSubscriptionStateChangedCb\fP \fBlinphone_core_cbs_get_subscription_state_changed\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the \fBLinphoneCoreCbsSubscriptionStateChangedCb\fP callback\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_notify_received\fP (\fBLinphoneCoreCbs\fP *cbs, \fBLinphoneCoreCbsNotifyReceivedCb\fP cb)"
.br
.RI "Set the \fBLinphoneCoreCbsNotifyReceivedCb\fP callback\&. "
.ti -1c
.RI "\fBLinphoneCoreCbsNotifyReceivedCb\fP \fBlinphone_core_cbs_get_notify_received\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the \fBLinphoneCoreCbsNotifyReceivedCb\fP callback\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_publish_state_changed\fP (\fBLinphoneCoreCbs\fP *cbs, \fBLinphoneCoreCbsPublishStateChangedCb\fP cb)"
.br
.RI "Set the \fBLinphoneCoreCbsPublishStateChangedCb\fP callback\&. "
.ti -1c
.RI "\fBLinphoneCoreCbsPublishStateChangedCb\fP \fBlinphone_core_cbs_get_publish_state_changed\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the \fBLinphoneCoreCbsPublishStateChangedCb\fP callback\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_configuring_status\fP (\fBLinphoneCoreCbs\fP *cbs, \fBLinphoneCoreCbsConfiguringStatusCb\fP cb)"
.br
.RI "Set the \fBLinphoneCoreCbsConfiguringStatusCb\fP callback\&. "
.ti -1c
.RI "\fBLinphoneCoreCbsConfiguringStatusCb\fP \fBlinphone_core_cbs_get_configuring_status\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the \fBLinphoneCoreCbsConfiguringStatusCb\fP callback\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_network_reachable\fP (\fBLinphoneCoreCbs\fP *cbs, \fBLinphoneCoreCbsNetworkReachableCb\fP cb)"
.br
.RI "Set the \fBLinphoneCoreCbsNetworkReachableCb\fP callback\&. "
.ti -1c
.RI "\fBLinphoneCoreCbsNetworkReachableCb\fP \fBlinphone_core_cbs_get_network_reachable\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the \fBLinphoneCoreCbsNetworkReachableCb\fP callback\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_log_collection_upload_state_changed\fP (\fBLinphoneCoreCbs\fP *cbs, \fBLinphoneCoreCbsLogCollectionUploadStateChangedCb\fP cb)"
.br
.RI "Set the \fBLinphoneCoreCbsLogCollectionUploadStateChangedCb\fP callback\&. "
.ti -1c
.RI "\fBLinphoneCoreCbsLogCollectionUploadStateChangedCb\fP \fBlinphone_core_cbs_get_log_collection_upload_state_changed\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the \fBLinphoneCoreCbsLogCollectionUploadStateChangedCb\fP callback\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_log_collection_upload_progress_indication\fP (\fBLinphoneCoreCbs\fP *cbs, \fBLinphoneCoreCbsLogCollectionUploadProgressIndicationCb\fP cb)"
.br
.RI "Set the \fBLinphoneCoreCbsLogCollectionUploadProgressIndicationCb\fP callback\&. "
.ti -1c
.RI "\fBLinphoneCoreCbsLogCollectionUploadProgressIndicationCb\fP \fBlinphone_core_cbs_get_log_collection_upload_progress_indication\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the \fBLinphoneCoreCbsLogCollectionUploadProgressIndicationCb\fP callback\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_friend_list_created\fP (\fBLinphoneCoreCbs\fP *cbs, \fBLinphoneCoreCbsFriendListCreatedCb\fP cb)"
.br
.RI "Set the \fBLinphoneCoreCbsFriendListCreatedCb\fP callback\&. "
.ti -1c
.RI "\fBLinphoneCoreCbsFriendListCreatedCb\fP \fBlinphone_core_cbs_get_friend_list_created\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the \fBLinphoneCoreCbsFriendListCreatedCb\fP callback\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_friend_list_removed\fP (\fBLinphoneCoreCbs\fP *cbs, \fBLinphoneCoreCbsFriendListRemovedCb\fP cb)"
.br
.RI "Set the \fBLinphoneCoreCbsFriendListRemovedCb\fP callback\&. "
.ti -1c
.RI "\fBLinphoneCoreCbsFriendListRemovedCb\fP \fBlinphone_core_cbs_get_friend_list_removed\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the \fBLinphoneCoreCbsFriendListRemovedCb\fP callback\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_call_created\fP (\fBLinphoneCoreCbs\fP *cbs, \fBLinphoneCoreCbsCallCreatedCb\fP cb)"
.br
.RI "Set the call created callback\&. "
.ti -1c
.RI "\fBLinphoneCoreCbsCallCreatedCb\fP \fBlinphone_core_cbs_get_call_created\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the call created callback\&. "
.ti -1c
.RI "void \fBlinphone_core_cbs_set_version_update_check_result_received\fP (\fBLinphoneCoreCbs\fP *cbs, \fBLinphoneCoreCbsVersionUpdateCheckResultReceivedCb\fP cb)"
.br
.RI "Set the version update check result callback\&. "
.ti -1c
.RI "\fBLinphoneCoreCbsVersionUpdateCheckResultReceivedCb\fP \fBlinphone_core_cbs_get_version_update_check_result_received\fP (\fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Get the version update check result callback\&. "
.ti -1c
.RI "LinphoneLogCollectionState \fBlinphone_core_log_collection_enabled\fP (void)"
.br
.RI "Tells whether the linphone core log collection is enabled\&. "
.ti -1c
.RI "void \fBlinphone_core_enable_log_collection\fP (LinphoneLogCollectionState state)"
.br
.RI "Enable the linphone core log collection to upload logs on a server\&. "
.ti -1c
.RI "const char * \fBlinphone_core_get_log_collection_path\fP (void)"
.br
.RI "Get the path where the log files will be written for log collection\&. "
.ti -1c
.RI "void \fBlinphone_core_set_log_collection_path\fP (const char *path)"
.br
.RI "Set the path where the log files will be written for log collection\&. "
.ti -1c
.RI "const char * \fBlinphone_core_get_log_collection_prefix\fP (void)"
.br
.RI "Get the prefix of the filenames that will be used for log collection\&. "
.ti -1c
.RI "void \fBlinphone_core_set_log_collection_prefix\fP (const char *prefix)"
.br
.RI "Set the prefix of the filenames that will be used for log collection\&. "
.ti -1c
.RI "size_t \fBlinphone_core_get_log_collection_max_file_size\fP (void)"
.br
.RI "Get the max file size in bytes of the files used for log collection\&. "
.ti -1c
.RI "void \fBlinphone_core_set_log_collection_max_file_size\fP (size_t size)"
.br
.RI "Set the max file size in bytes of the files used for log collection\&. "
.ti -1c
.RI "void \fBlinphone_core_set_log_collection_upload_server_url\fP (\fBLinphoneCore\fP *core, const char *server_url)"
.br
.RI "Set the url of the server where to upload the collected log files\&. "
.ti -1c
.RI "const char * \fBlinphone_core_get_log_collection_upload_server_url\fP (\fBLinphoneCore\fP *core)"
.br
.RI "Gets the url of the server where to upload the collected log files\&. "
.ti -1c
.RI "void \fBlinphone_core_upload_log_collection\fP (\fBLinphoneCore\fP *core)"
.br
.RI "Upload the log collection to the configured server url\&. "
.ti -1c
.RI "char * \fBlinphone_core_compress_log_collection\fP (void)"
.br
.RI "Compress the log collection in a single file\&. "
.ti -1c
.RI "void \fBlinphone_core_reset_log_collection\fP (void)"
.br
.RI "Reset the log collection by removing the log files\&. "
.ti -1c
.RI "void \fBlinphone_core_set_log_handler\fP (OrtpLogFunc logfunc)"
.br
.RI "Define a log handler\&. "
.ti -1c
.RI "void \fBlinphone_core_set_log_file\fP (FILE *file)"
.br
.RI "Define a log file\&. "
.ti -1c
.RI "void \fBlinphone_core_set_log_level\fP (OrtpLogLevel loglevel)"
.br
.RI "Define the minimum level for logging\&. "
.ti -1c
.RI "void \fBlinphone_core_set_log_level_mask\fP (unsigned int loglevel)"
.br
.RI "Define the log level using mask\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED void \fBlinphone_core_enable_logs\fP (FILE *file)"
.br
.RI "Enable logs in supplied FILE*\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED void \fBlinphone_core_enable_logs_with_cb\fP (OrtpLogFunc logfunc)"
.br
.RI "Enable logs through the user's supplied log callback\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED void \fBlinphone_core_disable_logs\fP (void)"
.br
.RI "Entirely disable logging\&. "
.ti -1c
.RI "void \fBlinphone_core_serialize_logs\fP (void)"
.br
.RI "Enable logs serialization (output logs from either the thread that creates the linphone core or the thread that calls \fBlinphone_core_iterate()\fP)\&. "
.ti -1c
.RI "const char * \fBlinphone_core_get_version\fP (void)"
.br
.RI "Returns liblinphone's version as a string\&. "
.ti -1c
.RI "const char * \fBlinphone_core_get_user_agent\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "LINPHONE_DEPRECATED const char * \fBlinphone_core_get_user_agent_name\fP (void)"
.br
.ti -1c
.RI "LINPHONE_DEPRECATED const char * \fBlinphone_core_get_user_agent_version\fP (void)"
.br
.ti -1c
.RI "LINPHONE_DEPRECATED \fBLinphoneCore\fP * \fBlinphone_core_new\fP (const \fBLinphoneCoreVTable\fP *vtable, const char *config_path, const char *factory_config_path, void *userdata)"
.br
.RI "Instanciates a LinphoneCore object\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED \fBLinphoneCore\fP * \fBlinphone_core_new_with_config\fP (const \fBLinphoneCoreVTable\fP *vtable, LpConfig *config, void *userdata)"
.br
.RI "Instantiates a LinphoneCore object with a given LpConfig\&. "
.ti -1c
.RI "\fBLinphoneCore\fP * \fBlinphone_core_ref\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Increment the reference counter of a \fBLinphoneCore\fP object\&. "
.ti -1c
.RI "void \fBlinphone_core_unref\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Decrement the ref counter of a \fBLinphoneCore\fP object and destroy it if the counter reach 0\&. "
.ti -1c
.RI "void \fBlinphone_core_iterate\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Main loop function\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED void \fBlinphone_core_add_listener\fP (\fBLinphoneCore\fP *lc, \fBLinphoneCoreVTable\fP *vtable)"
.br
.RI "add a listener to be notified of linphone core events\&. "
.ti -1c
.RI "void \fBlinphone_core_add_callbacks\fP (\fBLinphoneCore\fP *lc, \fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Add a listener in order to be notified of \fBLinphoneCore\fP events\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED void \fBlinphone_core_remove_listener\fP (\fBLinphoneCore\fP *lc, const \fBLinphoneCoreVTable\fP *vtable)"
.br
.RI "remove a listener registred by linphone_core_add_listener\&. "
.ti -1c
.RI "void \fBlinphone_core_remove_callbacks\fP (\fBLinphoneCore\fP *lc, const \fBLinphoneCoreCbs\fP *cbs)"
.br
.RI "Remove a listener from a \fBLinphoneCore\fP\&. "
.ti -1c
.RI "void \fBlinphone_core_verify_server_certificates\fP (\fBLinphoneCore\fP *lc, bool_t yesno)"
.br
.RI "Specify whether the tls server certificate must be verified when connecting to a SIP/TLS server\&. "
.ti -1c
.RI "void \fBlinphone_core_verify_server_cn\fP (\fBLinphoneCore\fP *lc, bool_t yesno)"
.br
.RI "Specify whether the tls server certificate common name must be verified when connecting to a SIP/TLS server\&. "
.ti -1c
.RI "const char * \fBlinphone_core_get_root_ca\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Gets the path to a file or folder containing the trusted root CAs (PEM format) "
.ti -1c
.RI "void \fBlinphone_core_set_root_ca\fP (\fBLinphoneCore\fP *lc, const char *path)"
.br
.RI "Sets the path to a file or folder containing trusted root CAs (PEM format) "
.ti -1c
.RI "void \fBlinphone_core_set_root_ca_data\fP (\fBLinphoneCore\fP *lc, const char *data)"
.br
.RI "Sets the trusted root CAs (PEM format) "
.ti -1c
.RI "void \fBlinphone_core_set_ssl_config\fP (\fBLinphoneCore\fP *lc, void *ssl_config)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_call_logs_database_path\fP (\fBLinphoneCore\fP *lc, const char *path)"
.br
.RI "Sets the database filename where call logs will be stored\&. "
.ti -1c
.RI "const char * \fBlinphone_core_get_call_logs_database_path\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Gets the database filename where call logs will be stored\&. "
.ti -1c
.RI "void \fBlinphone_core_migrate_logs_from_rc_to_db\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Migrates the call logs from the linphonerc to the database if not done yet\&. "
.ti -1c
.RI "void * \fBlinphone_core_get_user_data\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Retrieves the user pointer that was given to \fBlinphone_core_new()\fP "
.ti -1c
.RI "void \fBlinphone_core_set_user_data\fP (\fBLinphoneCore\fP *lc, void *userdata)"
.br
.RI "Associate a user pointer to the linphone core\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED void \fBlinphone_core_destroy\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Destroys a LinphoneCore\&. "
.ti -1c
.RI "void \fBlinphone_core_set_zrtp_secrets_file\fP (\fBLinphoneCore\fP *lc, const char *file)"
.br
.RI "Set the path to the file storing the zrtp secrets cache\&. "
.ti -1c
.RI "const char * \fBlinphone_core_get_zrtp_secrets_file\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Get the path to the file storing the zrtp secrets cache\&. "
.ti -1c
.RI "void * \fBlinphone_core_get_zrtp_cache_db\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Get a pointer to the sqlite db holding zrtp/lime cache\&. "
.ti -1c
.RI "void \fBlinphone_core_set_user_certificates_path\fP (\fBLinphoneCore\fP *lc, const char *path)"
.br
.RI "Set the path to the directory storing the user's x509 certificates (used by dtls) "
.ti -1c
.RI "const char * \fBlinphone_core_get_user_certificates_path\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Get the path to the directory storing the user's certificates\&. "
.ti -1c
.RI "void \fBlinphone_core_reload_ms_plugins\fP (\fBLinphoneCore\fP *lc, const char *path)"
.br
.RI "Reload mediastreamer2 plugins from specified directory\&. "
.ti -1c
.RI "int \fBlinphone_core_get_max_calls\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Get the maximum number of simultaneous calls Linphone core can manage at a time\&. "
.ti -1c
.RI "void \fBlinphone_core_set_max_calls\fP (\fBLinphoneCore\fP *lc, int max)"
.br
.RI "Set the maximum number of simultaneous calls Linphone core can manage at a time\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_media_encryption_supported\fP (const \fBLinphoneCore\fP *lc, \fBLinphoneMediaEncryption\fP menc)"
.br
.RI "Check if a media encryption type is supported\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_core_set_provisioning_uri\fP (\fBLinphoneCore\fP *lc, const char *uri)"
.br
.RI "Set URI where to download xml configuration file at startup\&. "
.ti -1c
.RI "const char * \fBlinphone_core_get_provisioning_uri\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Get provisioning URI\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_core_migrate_to_multi_transport\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Migrate configuration so that all SIP transports are enabled\&. "
.ti -1c
.RI "void \fBlinphone_core_add_supported_tag\fP (\fBLinphoneCore\fP *core, const char *tag)"
.br
.RI "This function controls signaling features supported by the core\&. "
.ti -1c
.RI "void \fBlinphone_core_remove_supported_tag\fP (\fBLinphoneCore\fP *core, const char *tag)"
.br
.RI "Remove a supported tag\&. "
.ti -1c
.RI "void \fBlinphone_core_set_friends_database_path\fP (\fBLinphoneCore\fP *lc, const char *path)"
.br
.RI "Sets the database filename where friends will be stored\&. "
.ti -1c
.RI "const char * \fBlinphone_core_get_friends_database_path\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Gets the database filename where friends will be stored\&. "
.ti -1c
.RI "void \fBlinphone_core_migrate_friends_from_rc_to_db\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Migrates the friends from the linphonerc to the database if not done yet\&. "
.ti -1c
.RI "\fBLinphoneFactory\fP * \fBlinphone_factory_get\fP (void)"
.br
.RI "Create the \fBLinphoneFactory\fP if that has not been done and return a pointer on it\&. "
.ti -1c
.RI "void \fBlinphone_factory_clean\fP (void)"
.br
.RI "Clean the factory\&. "
.ti -1c
.RI "\fBLinphoneCore\fP * \fBlinphone_factory_create_core\fP (const \fBLinphoneFactory\fP *factory, \fBLinphoneCoreCbs\fP *cbs, const char *config_path, const char *factory_config_path)"
.br
.RI "Instanciate a \fBLinphoneCore\fP object\&. "
.ti -1c
.RI "\fBLinphoneCore\fP * \fBlinphone_factory_create_core_with_config\fP (const \fBLinphoneFactory\fP *factory, \fBLinphoneCoreCbs\fP *cbs, \fBLinphoneConfig\fP *config)"
.br
.RI "Instantiates a LinphoneCore object with a given LpConfig\&. "
.ti -1c
.RI "\fBLinphoneCoreCbs\fP * \fBlinphone_factory_create_core_cbs\fP (const \fBLinphoneFactory\fP *factory)"
.br
.RI "Instanciate a \fBLinphoneCoreCbs\fP object\&. "
.ti -1c
.RI "\fBLinphoneAddress\fP * \fBlinphone_factory_create_address\fP (const \fBLinphoneFactory\fP *factory, const char *addr)"
.br
.RI "Parse a string holding a SIP URI and create the according \fBLinphoneAddress\fP object\&. "
.ti -1c
.RI "\fBLinphoneAuthInfo\fP * \fBlinphone_factory_create_auth_info\fP (const \fBLinphoneFactory\fP *factory, const char *username, const char *userid, const char *passwd, const char *ha1, const char *realm, const char *domain)"
.br
.RI "Creates a \fBLinphoneAuthInfo\fP object\&. "
.ti -1c
.RI "\fBLinphoneCallCbs\fP * \fBlinphone_factory_create_call_cbs\fP (const \fBLinphoneFactory\fP *factory)"
.br
.RI "Create a LinphoneCallCbs object that holds callbacks for events happening on a call\&. "
.ti -1c
.RI "\fBLinphoneVcard\fP * \fBlinphone_factory_create_vcard\fP (\fBLinphoneFactory\fP *factory)"
.br
.RI "Create an empty \fBLinphoneVcard\fP\&. "
.ti -1c
.RI "\fBLinphoneVideoDefinition\fP * \fBlinphone_factory_create_video_definition\fP (const \fBLinphoneFactory\fP *factory, unsigned int width, unsigned int height)"
.br
.RI "Create a LinphoneVideoDefinition from a given width and height\&. "
.ti -1c
.RI "\fBLinphoneVideoDefinition\fP * \fBlinphone_factory_create_video_definition_from_name\fP (const \fBLinphoneFactory\fP *factory, const char *name)"
.br
.RI "Create a LinphoneVideoDefinition from a given standard definition name\&. "
.ti -1c
.RI "const bctbx_list_t * \fBlinphone_factory_get_supported_video_definitions\fP (const \fBLinphoneFactory\fP *factory)"
.br
.RI "Get the list of standard video definitions supported by Linphone\&. "
.ti -1c
.RI "const char * \fBlinphone_factory_get_top_resources_dir\fP (const \fBLinphoneFactory\fP *factory)"
.br
.RI "Get the top directory where the resources are located\&. "
.ti -1c
.RI "void \fBlinphone_factory_set_top_resources_dir\fP (\fBLinphoneFactory\fP *factory, const char *path)"
.br
.RI "Set the top directory where the resources are located\&. "
.ti -1c
.RI "const char * \fBlinphone_factory_get_data_resources_dir\fP (\fBLinphoneFactory\fP *factory)"
.br
.RI "Get the directory where the data resources are located\&. "
.ti -1c
.RI "void \fBlinphone_factory_set_data_resources_dir\fP (\fBLinphoneFactory\fP *factory, const char *path)"
.br
.RI "Set the directory where the data resources are located\&. "
.ti -1c
.RI "const char * \fBlinphone_factory_get_sound_resources_dir\fP (\fBLinphoneFactory\fP *factory)"
.br
.RI "Get the directory where the sound resources are located\&. "
.ti -1c
.RI "void \fBlinphone_factory_set_sound_resources_dir\fP (\fBLinphoneFactory\fP *factory, const char *path)"
.br
.RI "Set the directory where the sound resources are located\&. "
.ti -1c
.RI "const char * \fBlinphone_factory_get_ring_resources_dir\fP (\fBLinphoneFactory\fP *factory)"
.br
.RI "Get the directory where the ring resources are located\&. "
.ti -1c
.RI "void \fBlinphone_factory_set_ring_resources_dir\fP (\fBLinphoneFactory\fP *factory, const char *path)"
.br
.RI "Set the directory where the ring resources are located\&. "
.ti -1c
.RI "const char * \fBlinphone_factory_get_image_resources_dir\fP (\fBLinphoneFactory\fP *factory)"
.br
.RI "Get the directory where the image resources are located\&. "
.ti -1c
.RI "void \fBlinphone_factory_set_image_resources_dir\fP (\fBLinphoneFactory\fP *factory, const char *path)"
.br
.RI "Set the directory where the image resources are located\&. "
.ti -1c
.RI "const char * \fBlinphone_factory_get_msplugins_dir\fP (\fBLinphoneFactory\fP *factory)"
.br
.RI "Get the directory where the mediastreamer2 plugins are located\&. "
.ti -1c
.RI "void \fBlinphone_factory_set_msplugins_dir\fP (\fBLinphoneFactory\fP *factory, const char *path)"
.br
.RI "Set the directory where the mediastreamer2 plugins are located\&. "
.ti -1c
.RI "\fBLinphoneErrorInfo\fP * \fBlinphone_factory_create_error_info\fP (\fBLinphoneFactory\fP *factory)"
.br
.RI "Creates an object LinphoneErrorInfo\&. "
.ti -1c
.RI "\fBLinphoneRange\fP * \fBlinphone_factory_create_range\fP (\fBLinphoneFactory\fP *factory)"
.br
.RI "Creates an object LinphoneRange\&. "
.ti -1c
.RI "\fBLinphoneTransports\fP * \fBlinphone_factory_create_transports\fP (\fBLinphoneFactory\fP *factory)"
.br
.RI "Creates an object LinphoneTransports\&. "
.ti -1c
.RI "\fBLinphoneVideoActivationPolicy\fP * \fBlinphone_factory_create_video_activation_policy\fP (\fBLinphoneFactory\fP *factory)"
.br
.RI "Creates an object LinphoneVideoActivationPolicy\&. "
.ti -1c
.RI "const char * \fBlinphone_stream_type_to_string\fP (const \fBLinphoneStreamType\fP)"
.br
.RI "Function returning a human readable value for LinphoneStreamType\&. "
.in -1c
.SH "Detailed Description"
.PP 
Initializing liblinphone\&. 


.SH "Macro Definition Documentation"
.PP 
.SS "#define LC_SIP_TRANSPORT_DONTBIND   (\-2)"

.PP
Don't create any server socket for this transport, ie don't bind on any port\&. Use with #LinphoneSipTransports 
.SH "Typedef Documentation"
.PP 
.SS "typedef void(* DisplayMessageCb) (\fBLinphoneCore\fP *lc, const char *message)"

.PP
Callback prototype\&. 
.PP
\fBDeprecated\fP
.RS 4
 
.RE
.PP

.SS "typedef void(* DisplayStatusCb) (\fBLinphoneCore\fP *lc, const char *message)"

.PP
Callback prototype\&. 
.PP
\fBDeprecated\fP
.RS 4
 
.RE
.PP

.SS "typedef void(* DisplayUrlCb) (\fBLinphoneCore\fP *lc, const char *message, const char *url)"

.PP
Callback prototype\&. 
.PP
\fBDeprecated\fP
.RS 4
 
.RE
.PP

.SS "typedef enum \fB_LinphoneConfiguringState\fP  \fBLinphoneConfiguringState\fP"

.PP
LinphoneGlobalState describes the global state of the LinphoneCore object\&. It is notified via the \fBLinphoneCoreVTable::global_state_changed\fP 
.SS "typedef void(* LinphoneCoreAuthInfoRequestedCb) (\fBLinphoneCore\fP *lc, const char *realm, const char *username, const char *domain)"

.PP
Callback for requesting authentication information to application or user\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the LinphoneCore 
.br
\fIrealm\fP the realm (domain) on which authentication is required\&. 
.br
\fIusername\fP the username that needs to be authenticated\&. 
.br
\fIdomain\fP the domain on which authentication is required\&. Application shall reply to this callback using \fBlinphone_core_add_auth_info()\fP\&. 
.RE
.PP

.SS "typedef struct _LinphoneCoreCbs \fBLinphoneCoreCbs\fP"

.PP
That class holds all the callbacks which are called by \fBLinphoneCore\fP\&. Use \fBlinphone_factory_create_core_cbs()\fP to create an instance\&. Then, call the callback setters on the events you need to monitor and pass the object to a \fBLinphoneCore\fP instance through \fBlinphone_core_add_callbacks()\fP\&.
.PP
That class is inherited from belle_sip_object_t\&. 
.SS "typedef void(* LinphoneCoreCbsAuthenticationRequestedCb) (\fBLinphoneCore\fP *lc, \fBLinphoneAuthInfo\fP *auth_info, \fBLinphoneAuthMethod\fP method)"

.PP
Callback for requesting authentication information to application or user\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the LinphoneCore 
.br
\fIauth_info\fP a LinphoneAuthInfo pre-filled with username, realm and domain values as much as possible 
.br
\fImethod\fP the type of authentication requested Application shall reply to this callback using \fBlinphone_core_add_auth_info()\fP\&. 
.RE
.PP

.SS "typedef void(* LinphoneCoreCbsCallCreatedCb) (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call)"

.PP
Callback notifying that a new LinphoneCall (either incoming or outgoing) has been created\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object that has created the call 
.br
\fIcall\fP The newly created LinphoneCall object 
.RE
.PP

.SS "typedef void(* LinphoneCoreCbsCallEncryptionChangedCb) (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call, bool_t on, const char *authentication_token)"

.PP
Call encryption changed callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the LinphoneCore 
.br
\fIcall\fP the call on which encryption is changed\&. 
.br
\fIon\fP whether encryption is activated\&. 
.br
\fIauthentication_token\fP an authentication_token, currently set for ZRTP kind of encryption only\&. 
.RE
.PP

.SS "typedef void(* LinphoneCoreCbsCallLogUpdatedCb) (\fBLinphoneCore\fP *lc, \fBLinphoneCallLog\fP *newcl)"

.PP
Callback to notify a new call-log entry has been added\&. This is done typically when a call terminates\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the LinphoneCore 
.br
\fInewcl\fP the new call log entry added\&. 
.RE
.PP

.SS "typedef void(* LinphoneCoreCbsCallStateChangedCb) (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call, \fBLinphoneCallState\fP cstate, const char *message)"

.PP
Call state notification callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the LinphoneCore 
.br
\fIcall\fP the call object whose state is changed\&. 
.br
\fIcstate\fP the new state of the call 
.br
\fImessage\fP a non NULL informational message about the state\&. 
.RE
.PP

.SS "typedef void(* LinphoneCoreCbsCallStatsUpdatedCb) (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call, const \fBLinphoneCallStats\fP *stats)"

.PP
Callback for receiving quality statistics for calls\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the LinphoneCore 
.br
\fIcall\fP the call 
.br
\fIstats\fP the call statistics\&. 
.RE
.PP

.SS "typedef void(* LinphoneCoreCbsConfiguringStatusCb) (\fBLinphoneCore\fP *lc, \fBLinphoneConfiguringState\fP status, const char *message)"

.PP
Callback prototype for configuring status changes notification\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the LinphoneCore 
.br
\fImessage\fP informational message\&. 
.RE
.PP

.SS "typedef void(* LinphoneCoreCbsDtmfReceivedCb) (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call, int dtmf)"

.PP
Callback for being notified of DTMFs received\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the linphone core 
.br
\fIcall\fP the call that received the dtmf 
.br
\fIdtmf\fP the ascii code of the dtmf 
.RE
.PP

.SS "typedef void(* LinphoneCoreCbsFriendListCreatedCb) (\fBLinphoneCore\fP *lc, \fBLinphoneFriendList\fP *list)"

.PP
Callback prototype for reporting when a friend list has been added to the core friends list\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIlist\fP LinphoneFriendList object 
.RE
.PP

.SS "typedef void(* LinphoneCoreCbsFriendListRemovedCb) (\fBLinphoneCore\fP *lc, \fBLinphoneFriendList\fP *list)"

.PP
Callback prototype for reporting when a friend list has been removed from the core friends list\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIlist\fP LinphoneFriendList object 
.RE
.PP

.SS "typedef void(* LinphoneCoreCbsGlobalStateChangedCb) (\fBLinphoneCore\fP *lc, \fBLinphoneGlobalState\fP gstate, const char *message)"

.PP
Global state notification callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the \fBLinphoneCore\fP\&. 
.br
\fIgstate\fP the global state 
.br
\fImessage\fP informational message\&. 
.RE
.PP

.SS "typedef void(* LinphoneCoreCbsInfoReceivedCb) (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call, const \fBLinphoneInfoMessage\fP *msg)"

.PP
Callback prototype for receiving info messages\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the LinphoneCore 
.br
\fIcall\fP the call whose info message belongs to\&. 
.br
\fImsg\fP the info message\&. 
.RE
.PP

.SS "typedef void(* LinphoneCoreCbsIsComposingReceivedCb) (\fBLinphoneCore\fP *lc, \fBLinphoneChatRoom\fP *room)"

.PP
Is composing notification callback prototype\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIroom\fP \fBLinphoneChatRoom\fP involved in the conversation\&. 
.RE
.PP

.SS "typedef void(* LinphoneCoreCbsLogCollectionUploadProgressIndicationCb) (\fBLinphoneCore\fP *lc, size_t offset, size_t total)"

.PP
Callback prototype for reporting log collection upload progress indication\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP

.SS "typedef void(* LinphoneCoreCbsLogCollectionUploadStateChangedCb) (\fBLinphoneCore\fP *lc, \fBLinphoneCoreLogCollectionUploadState\fP state, const char *info)"

.PP
Callback prototype for reporting log collection upload state change\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIstate\fP The state of the log collection upload 
.br
\fIinfo\fP Additional information: error message in case of error state, URL of uploaded file in case of success\&. 
.RE
.PP

.SS "typedef void(* LinphoneCoreCbsMessageReceivedCb) (\fBLinphoneCore\fP *lc, \fBLinphoneChatRoom\fP *room, \fBLinphoneChatMessage\fP *message)"

.PP
Chat message callback prototype\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIroom\fP \fBLinphoneChatRoom\fP involved in this conversation\&. Can be be created by the framework in case \fBthe from \fP is not present in any chat room\&. 
.br
\fILinphoneChatMessage\fP incoming message 
.RE
.PP

.SS "typedef void(* LinphoneCoreCbsMessageReceivedUnableDecryptCb) (\fBLinphoneCore\fP *lc, \fBLinphoneChatRoom\fP *room, \fBLinphoneChatMessage\fP *message)"

.PP
Chat message not decrypted callback prototype\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIroom\fP \fBLinphoneChatRoom\fP involved in this conversation\&. Can be be created by the framework in case \fBthe from \fP is not present in any chat room\&. 
.br
\fILinphoneChatMessage\fP incoming message 
.RE
.PP

.SS "typedef void(* LinphoneCoreCbsNetworkReachableCb) (\fBLinphoneCore\fP *lc, bool_t reachable)"

.PP
Callback prototype for reporting network change either automatically detected or notified by \fBlinphone_core_set_network_reachable\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the LinphoneCore 
.br
\fIreachable\fP true if network is reachable\&. 
.RE
.PP

.SS "typedef void(* LinphoneCoreCbsNewSubscriptionRequestedCb) (\fBLinphoneCore\fP *lc, \fBLinphoneFriend\fP *lf, const char *url)"

.PP
Reports that a new subscription request has been received and wait for a decision\&. Status on this subscription request is notified by \fBchanging policy \fP for this friend 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIlf\fP \fBLinphoneFriend\fP corresponding to the subscriber 
.br
\fIurl\fP of the subscriber 
.RE
.PP

.SS "typedef void(* LinphoneCoreCbsNotifyPresenceReceivedCb) (\fBLinphoneCore\fP *lc, \fBLinphoneFriend\fP *lf)"

.PP
Report status change for a friend previously \fBadded \fP to \fBLinphoneCore\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object \&. 
.br
\fIlf\fP Updated \fBLinphoneFriend\fP \&. 
.RE
.PP

.SS "typedef void(* LinphoneCoreCbsNotifyPresenceReceivedForUriOrTelCb) (\fBLinphoneCore\fP *lc, \fBLinphoneFriend\fP *lf, const char *uri_or_tel, const \fBLinphonePresenceModel\fP *presence_model)"

.PP
Reports presence model change for a specific URI or phone number of a friend\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIlf\fP \fBLinphoneFriend\fP object 
.br
\fIuri_or_tel\fP The URI or phone number for which teh presence model has changed 
.br
\fIpresence_model\fP The new presence model 
.RE
.PP

.SS "typedef void(* LinphoneCoreCbsTransferStateChangedCb) (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *transfered, \fBLinphoneCallState\fP new_call_state)"

.PP
Callback for notifying progresses of transfers\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the LinphoneCore 
.br
\fItransfered\fP the call that was transfered 
.br
\fInew_call_state\fP the state of the call to transfer target at the far end\&. 
.RE
.PP

.SS "typedef void(* LinphoneCoreCbsVersionUpdateCheckResultReceivedCb) (\fBLinphoneCore\fP *lc, \fBLinphoneVersionUpdateCheckResult\fP result, const char *version, const char *url)"

.PP
Callback prototype for reporting the result of a version update check\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIresult\fP The result of the version update check 
.br
\fIurl\fP The url where to download the new version if the result is LinphoneVersionUpdateCheckNewVersionAvailable 
.RE
.PP

.SS "typedef void(* LinphoneCoreFileTransferProgressIndicationCb) (\fBLinphoneCore\fP *lc, \fBLinphoneChatMessage\fP *message, const \fBLinphoneContent\fP *content, size_t offset, size_t total)"

.PP
File transfer progress indication callback prototype\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fImessage\fP \fBLinphoneChatMessage\fP message from which the body is received\&. 
.br
\fIcontent\fP \fBLinphoneContent\fP incoming content information 
.br
\fIoffset\fP The number of bytes sent/received since the beginning of the transfer\&. 
.br
\fItotal\fP The total number of bytes to be sent/received\&. 
.RE
.PP

.SS "typedef void(* LinphoneCoreFileTransferRecvCb) (\fBLinphoneCore\fP *lc, \fBLinphoneChatMessage\fP *message, const \fBLinphoneContent\fP *content, const char *buff, size_t size)"

.PP
File transfer receive callback prototype\&. This function is called by the core upon an incoming File transfer is started\&. This function may be call several time for the same file in case of large file\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fImessage\fP \fBLinphoneChatMessage\fP message from which the body is received\&. 
.br
\fIcontent\fP \fBLinphoneContent\fP incoming content information 
.br
\fIbuff\fP pointer to the received data 
.br
\fIsize\fP number of bytes to be read from buff\&. 0 means end of file\&. 
.RE
.PP

.SS "typedef void(* LinphoneCoreFileTransferSendCb) (\fBLinphoneCore\fP *lc, \fBLinphoneChatMessage\fP *message, const \fBLinphoneContent\fP *content, char *buff, size_t *size)"

.PP
File transfer send callback prototype\&. This function is called by the core upon an outgoing file transfer is started\&. This function is called until size is set to 0\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fImessage\fP \fBLinphoneChatMessage\fP message from which the body is received\&. 
.br
\fIcontent\fP \fBLinphoneContent\fP outgoing content 
.br
\fIbuff\fP pointer to the buffer where data chunk shall be written by the app 
.br
\fIsize\fP as input value, it represents the number of bytes expected by the framework\&. As output value, it means the number of bytes wrote by the application in the buffer\&. 0 means end of file\&. 
.RE
.PP

.SS "typedef void(* LinphoneCoreTextMessageReceivedCb) (\fBLinphoneCore\fP *lc, \fBLinphoneChatRoom\fP *room, const \fBLinphoneAddress\fP *from, const char *message)"

.PP
Callback prototype\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIroom\fP \fBLinphoneChatRoom\fP involved in this conversation\&. Can be be created by the framework in case \fBthe from \fP is not present in any chat room\&. 
.br
\fIfrom\fP \fBLinphoneAddress\fP from 
.br
\fImessage\fP incoming message 
.RE
.PP
\fBDeprecated\fP
.RS 4
use \fBLinphoneCoreMessageReceivedCb\fP instead\&.  
.RE
.PP

.SS "typedef struct \fB_LinphoneCoreVTable\fP  \fBLinphoneCoreVTable\fP"

.PP
This structure holds all callbacks that the application should implement\&. None is mandatory\&.  
.SS "typedef enum \fB_LinphoneGlobalState\fP  \fBLinphoneGlobalState\fP"

.PP
LinphoneGlobalState describes the global state of the LinphoneCore object\&. It is notified via the \fBLinphoneCoreVTable::global_state_changed\fP 
.SS "typedef struct _LinphoneTransports \fBLinphoneTransports\fP"

.PP
Linphone core SIP transport ports\&. Special values \fBLC_SIP_TRANSPORT_RANDOM\fP, \fBLC_SIP_TRANSPORT_RANDOM\fP, \fBLC_SIP_TRANSPORT_DONTBIND\fP can be used\&. Use with \fBlinphone_core_set_sip_transports\fP 
.SS "typedef void(* ShowInterfaceCb) (\fBLinphoneCore\fP *lc)"

.PP
Callback prototype\&. 
.PP
\fBDeprecated\fP
.RS 4
 
.RE
.PP

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fB_LinphoneAddressFamily\fP"

.PP
Enum describing Ip family\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILinphoneAddressFamilyInet \fP\fP
IpV4\&. 
.TP
\fB\fILinphoneAddressFamilyInet6 \fP\fP
IpV6\&. 
.TP
\fB\fILinphoneAddressFamilyUnspec \fP\fP
Unknown\&. 
.SS "enum \fB_LinphoneConfiguringState\fP"

.PP
LinphoneGlobalState describes the global state of the LinphoneCore object\&. It is notified via the \fBLinphoneCoreVTable::global_state_changed\fP 
.SS "enum \fB_LinphoneCoreLogCollectionUploadState\fP"

.PP
LinphoneCoreLogCollectionUploadState is used to notify if log collection upload have been succesfully delivered or not\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILinphoneCoreLogCollectionUploadStateInProgress \fP\fP
Delivery in progress\&. 
.TP
\fB\fILinphoneCoreLogCollectionUploadStateDelivered \fP\fP
Log collection upload successfully delivered and acknowledged by remote end point\&. 
.TP
\fB\fILinphoneCoreLogCollectionUploadStateNotDelivered \fP\fP
Log collection upload was not delivered\&. 
.SS "enum \fB_LinphoneGlobalState\fP"

.PP
LinphoneGlobalState describes the global state of the LinphoneCore object\&. It is notified via the \fBLinphoneCoreVTable::global_state_changed\fP 
.SS "enum \fB_LinphoneIceState\fP"

.PP
Enum describing ICE states\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILinphoneIceStateNotActivated \fP\fP
ICE has not been activated for this call or stream\&. 
.TP
\fB\fILinphoneIceStateFailed \fP\fP
ICE processing has failed\&. 
.TP
\fB\fILinphoneIceStateInProgress \fP\fP
ICE process is in progress\&. 
.TP
\fB\fILinphoneIceStateHostConnection \fP\fP
ICE has established a direct connection to the remote host\&. 
.TP
\fB\fILinphoneIceStateReflexiveConnection \fP\fP
ICE has established a connection to the remote host through one or several NATs\&. 
.TP
\fB\fILinphoneIceStateRelayConnection \fP\fP
ICE has established a connection through a relay\&. 
.SS "enum \fB_LinphoneUpnpState\fP"

.PP
Enum describing uPnP states\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILinphoneUpnpStateIdle \fP\fP
uPnP is not activate 
.TP
\fB\fILinphoneUpnpStatePending \fP\fP
uPnP process is in progress 
.TP
\fB\fILinphoneUpnpStateAdding \fP\fP
Internal use: Only used by port binding\&. 
.TP
\fB\fILinphoneUpnpStateRemoving \fP\fP
Internal use: Only used by port binding\&. 
.TP
\fB\fILinphoneUpnpStateNotAvailable \fP\fP
uPnP is not available 
.TP
\fB\fILinphoneUpnpStateOk \fP\fP
uPnP is enabled 
.TP
\fB\fILinphoneUpnpStateKo \fP\fP
uPnP processing has failed 
.TP
\fB\fILinphoneUpnpStateBlacklisted \fP\fP
IGD router is blacklisted\&. 
.SH "Function Documentation"
.PP 
.SS "void linphone_core_add_callbacks (\fBLinphoneCore\fP * lc, \fBLinphoneCoreCbs\fP * cbs)"

.PP
Add a listener in order to be notified of \fBLinphoneCore\fP events\&. Once an event is received, registred \fBLinphoneCoreCbs\fP are invoked sequencially\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The \fBLinphoneCore\fP object to monitor\&. 
.br
\fIcbs\fP A \fBLinphoneCoreCbs\fP object holding the callbacks you need\&. A reference is taken by \fBLinphoneCore\fP until you invoke \fBlinphone_core_remove_callbacks()\fP\&. 
.RE
.PP

.SS "LINPHONE_DEPRECATED void linphone_core_add_listener (\fBLinphoneCore\fP * lc, \fBLinphoneCoreVTable\fP * vtable)"

.PP
add a listener to be notified of linphone core events\&. Once events are received, registered vtable are invoked in order\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvtable\fP a LinphoneCoreVTable structure holding your application callbacks\&. Object is owned by linphone core until linphone_core_remove_listener\&. 
.br
\fIlc\fP object 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_core_add_callbacks()\fP instead\&.  
.RE
.PP

.SS "void linphone_core_add_supported_tag (\fBLinphoneCore\fP * core, const char * tag)"

.PP
This function controls signaling features supported by the core\&. They are typically included in a SIP Supported header\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcore\fP LinphoneCore object 
.br
\fItag\fP The feature tag name 
.RE
.PP

.SS "\fBLinphoneCoreCbsAuthenticationRequestedCb\fP linphone_core_cbs_get_authentication_requested (\fBLinphoneCoreCbs\fP * cbs)"

.PP
Get the \fBLinphoneCoreCbsAuthenticationRequestedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The callback\&. 
.RE
.PP

.SS "\fBLinphoneCoreCbsBuddyInfoUpdatedCb\fP linphone_core_cbs_get_buddy_info_updated (\fBLinphoneCoreCbs\fP * cbs)"

.PP
Get the \fBLinphoneCoreCbsBuddyInfoUpdatedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The callback\&. 
.RE
.PP

.SS "\fBLinphoneCoreCbsCallCreatedCb\fP linphone_core_cbs_get_call_created (\fBLinphoneCoreCbs\fP * cbs)"

.PP
Get the call created callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP LinphoneCoreCbs object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The current call created callback\&. 
.RE
.PP

.SS "\fBLinphoneCoreCbsCallEncryptionChangedCb\fP linphone_core_cbs_get_call_encryption_changed (\fBLinphoneCoreCbs\fP * cbs)"

.PP
Get the \fBLinphoneCoreCbsCallEncryptionChangedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The callback\&. 
.RE
.PP

.SS "\fBLinphoneCoreCbsCallLogUpdatedCb\fP linphone_core_cbs_get_call_log_updated (\fBLinphoneCoreCbs\fP * cbs)"

.PP
Get the \fBLinphoneCoreCbsCallLogUpdatedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The callback\&. 
.RE
.PP

.SS "\fBLinphoneCoreCbsCallStateChangedCb\fP linphone_core_cbs_get_call_state_changed (\fBLinphoneCoreCbs\fP * cbs)"

.PP
Get the \fBLinphoneCoreCbsCallStateChangedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The callback\&. 
.RE
.PP

.SS "\fBLinphoneCoreCbsCallStatsUpdatedCb\fP linphone_core_cbs_get_call_stats_updated (\fBLinphoneCoreCbs\fP * cbs)"

.PP
Get the \fBLinphoneCoreCbsCallStatsUpdatedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The callback\&. 
.RE
.PP

.SS "\fBLinphoneCoreCbsConfiguringStatusCb\fP linphone_core_cbs_get_configuring_status (\fBLinphoneCoreCbs\fP * cbs)"

.PP
Get the \fBLinphoneCoreCbsConfiguringStatusCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The callback\&. 
.RE
.PP

.SS "\fBLinphoneCoreCbsDtmfReceivedCb\fP linphone_core_cbs_get_dtmf_received (\fBLinphoneCoreCbs\fP * cbs)"

.PP
Get the \fBLinphoneCoreCbsDtmfReceivedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The callback\&. 
.RE
.PP

.SS "\fBLinphoneCoreCbsFriendListCreatedCb\fP linphone_core_cbs_get_friend_list_created (\fBLinphoneCoreCbs\fP * cbs)"

.PP
Get the \fBLinphoneCoreCbsFriendListCreatedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The callback\&. 
.RE
.PP

.SS "\fBLinphoneCoreCbsFriendListRemovedCb\fP linphone_core_cbs_get_friend_list_removed (\fBLinphoneCoreCbs\fP * cbs)"

.PP
Get the \fBLinphoneCoreCbsFriendListRemovedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The callback\&. 
.RE
.PP

.SS "\fBLinphoneCoreCbsGlobalStateChangedCb\fP linphone_core_cbs_get_global_state_changed (\fBLinphoneCoreCbs\fP * cbs)"

.PP
Get the # callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The callback\&. 
.RE
.PP

.SS "\fBLinphoneCoreCbsInfoReceivedCb\fP linphone_core_cbs_get_info_received (\fBLinphoneCoreCbs\fP * cbs)"

.PP
Get the \fBLinphoneCoreCbsInfoReceivedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The callback\&. 
.RE
.PP

.SS "\fBLinphoneCoreCbsIsComposingReceivedCb\fP linphone_core_cbs_get_is_composing_received (\fBLinphoneCoreCbs\fP * cbs)"

.PP
Get the \fBLinphoneCoreCbsIsComposingReceivedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The callback\&. 
.RE
.PP

.SS "\fBLinphoneCoreCbsLogCollectionUploadProgressIndicationCb\fP linphone_core_cbs_get_log_collection_upload_progress_indication (\fBLinphoneCoreCbs\fP * cbs)"

.PP
Get the \fBLinphoneCoreCbsLogCollectionUploadProgressIndicationCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The callback\&. 
.RE
.PP

.SS "\fBLinphoneCoreCbsLogCollectionUploadStateChangedCb\fP linphone_core_cbs_get_log_collection_upload_state_changed (\fBLinphoneCoreCbs\fP * cbs)"

.PP
Get the \fBLinphoneCoreCbsLogCollectionUploadStateChangedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The callback\&. 
.RE
.PP

.SS "\fBLinphoneCoreCbsMessageReceivedCb\fP linphone_core_cbs_get_message_received (\fBLinphoneCoreCbs\fP * cbs)"

.PP
Get the \fBLinphoneCoreCbsMessageReceivedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The callback\&. 
.RE
.PP

.SS "\fBLinphoneCoreCbsNetworkReachableCb\fP linphone_core_cbs_get_network_reachable (\fBLinphoneCoreCbs\fP * cbs)"

.PP
Get the \fBLinphoneCoreCbsNetworkReachableCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The callback\&. 
.RE
.PP

.SS "\fBLinphoneCoreCbsNewSubscriptionRequestedCb\fP linphone_core_cbs_get_new_subscription_requested (\fBLinphoneCoreCbs\fP * cbs)"

.PP
Get the \fBLinphoneCoreCbsNewSubscriptionRequestedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The callback\&. 
.RE
.PP

.SS "\fBLinphoneCoreCbsNotifyPresenceReceivedCb\fP linphone_core_cbs_get_notify_presence_received (\fBLinphoneCoreCbs\fP * cbs)"

.PP
Get the \fBLinphoneCoreCbsNotifyPresenceReceivedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The callback\&. 
.RE
.PP

.SS "\fBLinphoneCoreCbsNotifyPresenceReceivedForUriOrTelCb\fP linphone_core_cbs_get_notify_presence_received_for_uri_or_tel (\fBLinphoneCoreCbs\fP * cbs)"

.PP
Get the \fBLinphoneCoreCbsNotifyPresenceReceivedForUriOrTelCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The callback\&. 
.RE
.PP

.SS "\fBLinphoneCoreCbsNotifyReceivedCb\fP linphone_core_cbs_get_notify_received (\fBLinphoneCoreCbs\fP * cbs)"

.PP
Get the \fBLinphoneCoreCbsNotifyReceivedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The callback\&. 
.RE
.PP

.SS "\fBLinphoneCoreCbsPublishStateChangedCb\fP linphone_core_cbs_get_publish_state_changed (\fBLinphoneCoreCbs\fP * cbs)"

.PP
Get the \fBLinphoneCoreCbsPublishStateChangedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The callback\&. 
.RE
.PP

.SS "\fBLinphoneCoreCbsReferReceivedCb\fP linphone_core_cbs_get_refer_received (\fBLinphoneCoreCbs\fP * cbs)"

.PP
Get the \fBLinphoneCoreCbsReferReceivedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The callback\&. 
.RE
.PP

.SS "\fBLinphoneCoreCbsRegistrationStateChangedCb\fP linphone_core_cbs_get_registration_state_changed (\fBLinphoneCoreCbs\fP * cbs)"

.PP
Get the \fBLinphoneCoreCbsRegistrationStateChangedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The callback\&. 
.RE
.PP

.SS "\fBLinphoneCoreCbsSubscriptionStateChangedCb\fP linphone_core_cbs_get_subscription_state_changed (\fBLinphoneCoreCbs\fP * cbs)"

.PP
Get the \fBLinphoneCoreCbsSubscriptionStateChangedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The callback\&. 
.RE
.PP

.SS "\fBLinphoneCoreCbsTransferStateChangedCb\fP linphone_core_cbs_get_transfer_state_changed (\fBLinphoneCoreCbs\fP * cbs)"

.PP
Get the \fBLinphoneCoreCbsTransferStateChangedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The callback\&. 
.RE
.PP

.SS "\fBLinphoneCoreCbsVersionUpdateCheckResultReceivedCb\fP linphone_core_cbs_get_version_update_check_result_received (\fBLinphoneCoreCbs\fP * cbs)"

.PP
Get the version update check result callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP LinphoneCoreCbs object 
.RE
.PP
\fBReturns:\fP
.RS 4
The current callback 
.RE
.PP

.SS "void linphone_core_cbs_set_authentication_requested (\fBLinphoneCoreCbs\fP * cbs, \fBLinphoneCoreCbsAuthenticationRequestedCb\fP cb)"

.PP
Set the \fBLinphoneCoreCbsAuthenticationRequestedCb\fP callback\&. ' 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.br
\fIcb\fP The callback\&. 
.RE
.PP

.SS "void linphone_core_cbs_set_buddy_info_updated (\fBLinphoneCoreCbs\fP * cbs, \fBLinphoneCoreCbsBuddyInfoUpdatedCb\fP cb)"

.PP
Set the \fBLinphoneCoreCbsBuddyInfoUpdatedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.br
\fIcb\fP The callback\&. 
.RE
.PP

.SS "void linphone_core_cbs_set_call_created (\fBLinphoneCoreCbs\fP * cbs, \fBLinphoneCoreCbsCallCreatedCb\fP cb)"

.PP
Set the call created callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP LinphoneCallCbs object\&. 
.br
\fIcb\fP The call created callback to be used\&. 
.RE
.PP

.SS "void linphone_core_cbs_set_call_encryption_changed (\fBLinphoneCoreCbs\fP * cbs, \fBLinphoneCoreCbsCallEncryptionChangedCb\fP cb)"

.PP
Set the \fBLinphoneCoreCbsCallEncryptionChangedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.br
\fIcb\fP The callback\&. 
.RE
.PP

.SS "void linphone_core_cbs_set_call_log_updated (\fBLinphoneCoreCbs\fP * cbs, \fBLinphoneCoreCbsCallLogUpdatedCb\fP cb)"

.PP
Set the \fBLinphoneCoreCbsCallLogUpdatedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.br
\fIcb\fP The callback\&. 
.RE
.PP

.SS "void linphone_core_cbs_set_call_state_changed (\fBLinphoneCoreCbs\fP * cbs, \fBLinphoneCoreCbsCallStateChangedCb\fP cb)"

.PP
Set the \fBLinphoneCoreCbsCallStateChangedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.br
\fIcb\fP The callback\&. 
.RE
.PP

.SS "void linphone_core_cbs_set_call_stats_updated (\fBLinphoneCoreCbs\fP * cbs, \fBLinphoneCoreCbsCallStatsUpdatedCb\fP cb)"

.PP
Set the \fBLinphoneCoreCbsCallStatsUpdatedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.br
\fIcb\fP The callback\&. 
.RE
.PP

.SS "void linphone_core_cbs_set_configuring_status (\fBLinphoneCoreCbs\fP * cbs, \fBLinphoneCoreCbsConfiguringStatusCb\fP cb)"

.PP
Set the \fBLinphoneCoreCbsConfiguringStatusCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.br
\fIcb\fP The callback\&. 
.RE
.PP

.SS "void linphone_core_cbs_set_dtmf_received (\fBLinphoneCoreCbs\fP * cbs, \fBLinphoneCoreCbsDtmfReceivedCb\fP cb)"

.PP
Set the \fBLinphoneCoreCbsDtmfReceivedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.br
\fIcb\fP The callback\&. 
.RE
.PP

.SS "void linphone_core_cbs_set_friend_list_created (\fBLinphoneCoreCbs\fP * cbs, \fBLinphoneCoreCbsFriendListCreatedCb\fP cb)"

.PP
Set the \fBLinphoneCoreCbsFriendListCreatedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.br
\fIcb\fP The callback\&. 
.RE
.PP

.SS "void linphone_core_cbs_set_friend_list_removed (\fBLinphoneCoreCbs\fP * cbs, \fBLinphoneCoreCbsFriendListRemovedCb\fP cb)"

.PP
Set the \fBLinphoneCoreCbsFriendListRemovedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.br
\fIcb\fP The callback\&. 
.RE
.PP

.SS "void linphone_core_cbs_set_global_state_changed (\fBLinphoneCoreCbs\fP * cbs, \fBLinphoneCoreCbsGlobalStateChangedCb\fP cb)"

.PP
Set the \fBLinphoneCoreGlobalStateChangedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.br
\fIcb\fP The callback\&. 
.RE
.PP

.SS "void linphone_core_cbs_set_info_received (\fBLinphoneCoreCbs\fP * cbs, \fBLinphoneCoreCbsInfoReceivedCb\fP cb)"

.PP
Set the \fBLinphoneCoreCbsInfoReceivedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.br
\fIcb\fP The callback\&. 
.RE
.PP

.SS "void linphone_core_cbs_set_is_composing_received (\fBLinphoneCoreCbs\fP * cbs, \fBLinphoneCoreCbsIsComposingReceivedCb\fP cb)"

.PP
Set the \fBLinphoneCoreCbsIsComposingReceivedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.br
\fIcb\fP The callback\&. 
.RE
.PP

.SS "void linphone_core_cbs_set_log_collection_upload_progress_indication (\fBLinphoneCoreCbs\fP * cbs, \fBLinphoneCoreCbsLogCollectionUploadProgressIndicationCb\fP cb)"

.PP
Set the \fBLinphoneCoreCbsLogCollectionUploadProgressIndicationCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.br
\fIcb\fP The callback\&. 
.RE
.PP

.SS "void linphone_core_cbs_set_log_collection_upload_state_changed (\fBLinphoneCoreCbs\fP * cbs, \fBLinphoneCoreCbsLogCollectionUploadStateChangedCb\fP cb)"

.PP
Set the \fBLinphoneCoreCbsLogCollectionUploadStateChangedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.br
\fIcb\fP The callback\&. 
.RE
.PP

.SS "void linphone_core_cbs_set_message_received (\fBLinphoneCoreCbs\fP * cbs, \fBLinphoneCoreCbsMessageReceivedCb\fP cb)"

.PP
Set the \fBLinphoneCoreCbsMessageReceivedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.br
\fIcb\fP The callback\&. 
.RE
.PP

.SS "void linphone_core_cbs_set_network_reachable (\fBLinphoneCoreCbs\fP * cbs, \fBLinphoneCoreCbsNetworkReachableCb\fP cb)"

.PP
Set the \fBLinphoneCoreCbsNetworkReachableCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.br
\fIcb\fP The callback\&. 
.RE
.PP

.SS "void linphone_core_cbs_set_new_subscription_requested (\fBLinphoneCoreCbs\fP * cbs, \fBLinphoneCoreCbsNewSubscriptionRequestedCb\fP cb)"

.PP
Set the \fBLinphoneCoreCbsNewSubscriptionRequestedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.br
\fIcb\fP The callback\&. 
.RE
.PP

.SS "void linphone_core_cbs_set_notify_presence_received (\fBLinphoneCoreCbs\fP * cbs, \fBLinphoneCoreCbsNotifyPresenceReceivedCb\fP cb)"

.PP
Set the \fBLinphoneCoreCbsNotifyPresenceReceivedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.br
\fIcb\fP The callback\&. 
.RE
.PP

.SS "void linphone_core_cbs_set_notify_presence_received_for_uri_or_tel (\fBLinphoneCoreCbs\fP * cbs, \fBLinphoneCoreCbsNotifyPresenceReceivedForUriOrTelCb\fP cb)"

.PP
Set the \fBLinphoneCoreCbsNotifyPresenceReceivedForUriOrTelCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.br
\fIcb\fP The callback\&. 
.RE
.PP

.SS "void linphone_core_cbs_set_notify_received (\fBLinphoneCoreCbs\fP * cbs, \fBLinphoneCoreCbsNotifyReceivedCb\fP cb)"

.PP
Set the \fBLinphoneCoreCbsNotifyReceivedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.br
\fIcb\fP The callback\&. 
.RE
.PP

.SS "void linphone_core_cbs_set_publish_state_changed (\fBLinphoneCoreCbs\fP * cbs, \fBLinphoneCoreCbsPublishStateChangedCb\fP cb)"

.PP
Set the \fBLinphoneCoreCbsPublishStateChangedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.br
\fIcb\fP The callback\&. 
.RE
.PP

.SS "void linphone_core_cbs_set_refer_received (\fBLinphoneCoreCbs\fP * cbs, \fBLinphoneCoreCbsReferReceivedCb\fP cb)"

.PP
Set the \fBLinphoneCoreCbsReferReceivedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.br
\fIcb\fP The callback\&. 
.RE
.PP

.SS "void linphone_core_cbs_set_registration_state_changed (\fBLinphoneCoreCbs\fP * cbs, \fBLinphoneCoreCbsRegistrationStateChangedCb\fP cb)"

.PP
Set the \fBLinphoneCoreCbsRegistrationStateChangedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.br
\fIcb\fP The callback\&. 
.RE
.PP

.SS "void linphone_core_cbs_set_subscription_state_changed (\fBLinphoneCoreCbs\fP * cbs, \fBLinphoneCoreCbsSubscriptionStateChangedCb\fP cb)"

.PP
Set the \fBLinphoneCoreCbsSubscriptionStateChangedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.br
\fIcb\fP The callback\&. 
.RE
.PP

.SS "void linphone_core_cbs_set_transfer_state_changed (\fBLinphoneCoreCbs\fP * cbs, \fBLinphoneCoreCbsTransferStateChangedCb\fP cb)"

.PP
Set the \fBLinphoneCoreCbsTransferStateChangedCb\fP callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP A \fBLinphoneCoreCbs\fP\&. 
.br
\fIcb\fP The callback\&. 
.RE
.PP

.SS "void linphone_core_cbs_set_version_update_check_result_received (\fBLinphoneCoreCbs\fP * cbs, \fBLinphoneCoreCbsVersionUpdateCheckResultReceivedCb\fP cb)"

.PP
Set the version update check result callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP LinphoneCoreCbs object 
.br
\fIcb\fP The callback to use 
.RE
.PP

.SS "char* linphone_core_compress_log_collection (void)"

.PP
Compress the log collection in a single file\&. 
.PP
\fBReturns:\fP
.RS 4
The path of the compressed log collection file (to be freed calling ms_free())\&. 
.RE
.PP

.SS "LINPHONE_DEPRECATED void linphone_core_destroy (\fBLinphoneCore\fP * lc)"

.PP
Destroys a LinphoneCore\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_core_unref()\fP instead\&.  
.RE
.PP

.SS "LINPHONE_DEPRECATED void linphone_core_disable_logs (void)"

.PP
Entirely disable logging\&. 
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_core_set_log_level\fP instead\&.  
.RE
.PP

.SS "void linphone_core_enable_log_collection (LinphoneLogCollectionState state)"

.PP
Enable the linphone core log collection to upload logs on a server\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstate\fP LinphoneLogCollectionState value telling whether to enable log collection or not\&. 
.RE
.PP

.SS "LINPHONE_DEPRECATED void linphone_core_enable_logs (FILE * file)"

.PP
Enable logs in supplied FILE*\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfile\fP a C FILE* where to fprintf logs\&. If null stdout is used\&. 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_core_set_log_file\fP and \fBlinphone_core_set_log_level\fP instead\&.  
.RE
.PP

.SS "LINPHONE_DEPRECATED void linphone_core_enable_logs_with_cb (OrtpLogFunc logfunc)"

.PP
Enable logs through the user's supplied log callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlogfunc\fP The address of a OrtpLogFunc callback whose protoype is typedef void (*OrtpLogFunc)(OrtpLogLevel lev, const char *fmt, va_list args); 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_core_set_log_handler\fP and \fBlinphone_core_set_log_level\fP instead\&.  
.RE
.PP

.SS "const char* linphone_core_get_call_logs_database_path (\fBLinphoneCore\fP * lc)"

.PP
Gets the database filename where call logs will be stored\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the linphone core 
.RE
.PP
\fBReturns:\fP
.RS 4
filesystem path 
.RE
.PP

.SS "\fBLinphoneCoreCbs\fP* linphone_core_get_current_callbacks (const \fBLinphoneCore\fP * lc)"

.PP
Gets the current \fBLinphoneCoreCbs\fP\&. This is meant only to be called from a callback to be able to get the user_data associated with the \fBLinphoneCoreCbs\fP that is calling the callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the linphonecore 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBLinphoneCoreCbs\fP that has called the last callback 
.RE
.PP

.SS "\fBLinphoneCoreVTable\fP* linphone_core_get_current_vtable (\fBLinphoneCore\fP * lc)"

.PP
Gets the current VTable\&. This is meant only to be called from a callback to be able to get the user_data associated with the vtable that called the callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the linphonecore 
.RE
.PP
\fBReturns:\fP
.RS 4
the vtable that called the last callback  
.RE
.PP

.SS "const char* linphone_core_get_friends_database_path (\fBLinphoneCore\fP * lc)"

.PP
Gets the database filename where friends will be stored\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the linphone core 
.RE
.PP
\fBReturns:\fP
.RS 4
filesystem path 
.RE
.PP

.SS "size_t linphone_core_get_log_collection_max_file_size (void)"

.PP
Get the max file size in bytes of the files used for log collection\&. 
.PP
\fBReturns:\fP
.RS 4
The max file size in bytes of the files used for log collection\&. 
.RE
.PP

.SS "const char* linphone_core_get_log_collection_path (void)"

.PP
Get the path where the log files will be written for log collection\&. 
.PP
\fBReturns:\fP
.RS 4
The path where the log files will be written\&. 
.RE
.PP

.SS "const char* linphone_core_get_log_collection_prefix (void)"

.PP
Get the prefix of the filenames that will be used for log collection\&. 
.PP
\fBReturns:\fP
.RS 4
The prefix of the filenames used for log collection\&. 
.RE
.PP

.SS "const char* linphone_core_get_log_collection_upload_server_url (\fBLinphoneCore\fP * core)"

.PP
Gets the url of the server where to upload the collected log files\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcore\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The url of the server where to upload the collected log files\&. 
.RE
.PP

.SS "int linphone_core_get_max_calls (\fBLinphoneCore\fP * lc)"

.PP
Get the maximum number of simultaneous calls Linphone core can manage at a time\&. All new call above this limit are declined with a busy answer 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP core 
.RE
.PP
\fBReturns:\fP
.RS 4
max number of simultaneous calls 
.RE
.PP

.SS "const char* linphone_core_get_provisioning_uri (const \fBLinphoneCore\fP * lc)"

.PP
Get provisioning URI\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the linphone core 
.RE
.PP
\fBReturns:\fP
.RS 4
the provisioning URI\&. 
.RE
.PP

.SS "const char* linphone_core_get_root_ca (\fBLinphoneCore\fP * lc)"

.PP
Gets the path to a file or folder containing the trusted root CAs (PEM format) 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The path to a file or folder containing the trusted root CAs 
.RE
.PP

.SS "const char* linphone_core_get_user_agent (\fBLinphoneCore\fP * lc)"

.PP
\fBReturns:\fP
.RS 4
liblinphone's user agent as a string\&. 
.RE
.PP

.SS "LINPHONE_DEPRECATED const char* linphone_core_get_user_agent_name (void)"

.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_core_get_user_agent\fP instead\&.
.RE
.PP
 
.SS "LINPHONE_DEPRECATED const char* linphone_core_get_user_agent_version (void)"

.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_core_get_user_agent\fP instead\&.
.RE
.PP
 
.SS "const char* linphone_core_get_user_certificates_path (\fBLinphoneCore\fP * lc)"

.PP
Get the path to the directory storing the user's certificates\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The path to the directory storing the user's certificates\&. 
.RE
.PP

.SS "void* linphone_core_get_user_data (const \fBLinphoneCore\fP * lc)"

.PP
Retrieves the user pointer that was given to \fBlinphone_core_new()\fP 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The user data associated with the LinphoneCore object 
.RE
.PP

.SS "void* linphone_core_get_zrtp_cache_db (\fBLinphoneCore\fP * lc)"

.PP
Get a pointer to the sqlite db holding zrtp/lime cache\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An sqlite3 pointer cast to a void one or NULL if cache is not available(not enabled at compile or access failed) 
.RE
.PP

.SS "const char* linphone_core_get_zrtp_secrets_file (\fBLinphoneCore\fP * lc)"

.PP
Get the path to the file storing the zrtp secrets cache\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The path to the file storing the zrtp secrets cache\&. 
.RE
.PP

.SS "void linphone_core_iterate (\fBLinphoneCore\fP * lc)"

.PP
Main loop function\&. It is crucial that your application call it periodically\&.
.PP
\fBlinphone_core_iterate()\fP performs various backgrounds tasks:
.IP "\(bu" 2
receiving of SIP messages
.IP "\(bu" 2
handles timers and timeout
.IP "\(bu" 2
performs registration to proxies
.IP "\(bu" 2
authentication retries The application MUST call this function periodically, in its main loop\&. Be careful that this function must be called from the same thread as other liblinphone methods\&. If it is not the case make sure all liblinphone calls are serialized with a mutex\&. For ICE to work properly it should be called every 20ms\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP

.PP

.SS "LinphoneLogCollectionState linphone_core_log_collection_enabled (void)"

.PP
Tells whether the linphone core log collection is enabled\&. 
.PP
\fBReturns:\fP
.RS 4
The state of the linphone core log collection\&. 
.RE
.PP

.SS "bool_t linphone_core_media_encryption_supported (const \fBLinphoneCore\fP * lc, \fBLinphoneMediaEncryption\fP menc)"

.PP
Check if a media encryption type is supported\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP core 
.br
\fImenc\fP LinphoneMediaEncryption 
.RE
.PP
\fBReturns:\fP
.RS 4
whether a media encryption scheme is supported by the LinphoneCore engine 
.RE
.PP

.SS "void linphone_core_migrate_friends_from_rc_to_db (\fBLinphoneCore\fP * lc)"

.PP
Migrates the friends from the linphonerc to the database if not done yet\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the linphone core 
.RE
.PP

.SS "void linphone_core_migrate_logs_from_rc_to_db (\fBLinphoneCore\fP * lc)"

.PP
Migrates the call logs from the linphonerc to the database if not done yet\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the linphone core 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_core_migrate_to_multi_transport (\fBLinphoneCore\fP * lc)"

.PP
Migrate configuration so that all SIP transports are enabled\&. Versions of linphone < 3\&.7 did not support using multiple SIP transport simultaneously\&. This function helps application to migrate the configuration so that all transports are enabled\&. Existing proxy configuration are added a transport parameter so that they continue using the unique transport that was set previously\&. This function must be used just after creating the core, before any call to \fBlinphone_core_iterate()\fP 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the linphone core 
.RE
.PP
\fBReturns:\fP
.RS 4
1 if migration was done, 0 if not done because unnecessary or already done, -1 in case of error\&. 
.RE
.PP

.SS "LINPHONE_DEPRECATED \fBLinphoneCore\fP* linphone_core_new (const \fBLinphoneCoreVTable\fP * vtable, const char * config_path, const char * factory_config_path, void * userdata)"

.PP
Instanciates a LinphoneCore object\&. The LinphoneCore object is the primary handle for doing all phone actions\&. It should be unique within your application\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvtable\fP a LinphoneCoreVTable structure holding your application callbacks 
.br
\fIconfig_path\fP a path to a config file\&. If it does not exists it will be created\&. The config file is used to store all settings, call logs, friends, proxies\&.\&.\&. so that all these settings become persistent over the life of the LinphoneCore object\&. It is allowed to set a NULL config file\&. In that case LinphoneCore will not store any settings\&. 
.br
\fIfactory_config_path\fP a path to a read-only config file that can be used to to store hard-coded preference such as proxy settings or internal preferences\&. The settings in this factory file always override the one in the normal config file\&. It is OPTIONAL, use NULL if unneeded\&. 
.br
\fIuserdata\fP an opaque user pointer that can be retrieved at any time (for example in callbacks) using \fBlinphone_core_get_user_data()\fP\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlinphone_core_new_with_config\fP 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_factory_create_core()\fP instead\&.  
.RE
.PP

.SS "LINPHONE_DEPRECATED \fBLinphoneCore\fP* linphone_core_new_with_config (const \fBLinphoneCoreVTable\fP * vtable, LpConfig * config, void * userdata)"

.PP
Instantiates a LinphoneCore object with a given LpConfig\&. The LinphoneCore object is the primary handle for doing all phone actions\&. It should be unique within your application\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvtable\fP a LinphoneCoreVTable structure holding your application callbacks 
.br
\fIconfig\fP a pointer to an LpConfig object holding the configuration of the LinphoneCore to be instantiated\&. 
.br
\fIuserdata\fP an opaque user pointer that can be retrieved at any time (for example in callbacks) using \fBlinphone_core_get_user_data()\fP\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlinphone_core_new\fP 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_factory_create_core_with_config()\fP instead\&.  
.RE
.PP

.SS "\fBLinphoneCore\fP* linphone_core_ref (\fBLinphoneCore\fP * lc)"

.PP
Increment the reference counter of a \fBLinphoneCore\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The \fBLinphoneCore\fP which the ref counter is to be incremented\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer on the \fBLinphoneCore\fP passed as parameter\&. 
.RE
.PP

.SS "void linphone_core_reload_ms_plugins (\fBLinphoneCore\fP * lc, const char * path)"

.PP
Reload mediastreamer2 plugins from specified directory\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fIpath\fP the path from where plugins are to be loaded, pass NULL to use default (compile-time determined) plugin directory\&. 
.RE
.PP

.SS "void linphone_core_remove_callbacks (\fBLinphoneCore\fP * lc, const \fBLinphoneCoreCbs\fP * cbs)"

.PP
Remove a listener from a \fBLinphoneCore\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The \fBLinphoneCore\fP 
.br
\fIcbs\fP The pointer on the \fBLinphoneCoreCbs\fP to remove\&. 
.RE
.PP

.SS "LINPHONE_DEPRECATED void linphone_core_remove_listener (\fBLinphoneCore\fP * lc, const \fBLinphoneCoreVTable\fP * vtable)"

.PP
remove a listener registred by linphone_core_add_listener\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP object 
.br
\fIvtable\fP a LinphoneCoreVTable structure holding your application callbacks\&. 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_core_remove_callbacks()\fP instead\&.  
.RE
.PP

.SS "void linphone_core_remove_supported_tag (\fBLinphoneCore\fP * core, const char * tag)"

.PP
Remove a supported tag\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcore\fP LinphoneCore object 
.br
\fItag\fP The tag to remove
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlinphone_core_add_supported_tag()\fP 
.RE
.PP

.SS "void linphone_core_serialize_logs (void)"

.PP
Enable logs serialization (output logs from either the thread that creates the linphone core or the thread that calls \fBlinphone_core_iterate()\fP)\&. Must be called before creating the linphone core\&. 
.SS "void linphone_core_set_call_logs_database_path (\fBLinphoneCore\fP * lc, const char * path)"

.PP
Sets the database filename where call logs will be stored\&. If the file does not exist, it will be created\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the linphone core 
.br
\fIpath\fP filesystem path 
.RE
.PP

.SS "void linphone_core_set_friends_database_path (\fBLinphoneCore\fP * lc, const char * path)"

.PP
Sets the database filename where friends will be stored\&. If the file does not exist, it will be created\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the linphone core 
.br
\fIpath\fP filesystem path 
.RE
.PP

.SS "void linphone_core_set_log_collection_max_file_size (size_t size)"

.PP
Set the max file size in bytes of the files used for log collection\&. Warning: this function should only not be used to change size dynamically but instead only before calling 
.PP
\fBSee also:\fP
.RS 4
\fBlinphone_core_enable_log_collection\fP\&. If you increase max size on runtime, logs chronological order COULD be broken\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIsize\fP The max file size in bytes of the files used for log collection\&. 
.RE
.PP

.SS "void linphone_core_set_log_collection_path (const char * path)"

.PP
Set the path where the log files will be written for log collection\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP The path where the log files will be written\&. 
.RE
.PP

.SS "void linphone_core_set_log_collection_prefix (const char * prefix)"

.PP
Set the prefix of the filenames that will be used for log collection\&. 
.PP
\fBParameters:\fP
.RS 4
\fIprefix\fP The prefix to use for the filenames for log collection\&. 
.RE
.PP

.SS "void linphone_core_set_log_collection_upload_server_url (\fBLinphoneCore\fP * core, const char * server_url)"

.PP
Set the url of the server where to upload the collected log files\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcore\fP LinphoneCore object 
.br
\fIserver_url\fP The url of the server where to upload the collected log files\&. 
.RE
.PP

.SS "void linphone_core_set_log_file (FILE * file)"

.PP
Define a log file\&. If the file pointer passed as an argument is NULL, stdout is used instead\&.
.PP
\fBParameters:\fP
.RS 4
\fIfile\fP A pointer to the FILE structure of the file to write to\&. 
.RE
.PP

.SS "void linphone_core_set_log_handler (OrtpLogFunc logfunc)"

.PP
Define a log handler\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlogfunc\fP The function pointer of the log handler\&. 
.RE
.PP

.SS "void linphone_core_set_log_level (OrtpLogLevel loglevel)"

.PP
Define the minimum level for logging\&. 
.PP
\fBParameters:\fP
.RS 4
\fIloglevel\fP Minimum level for logging messages\&. 
.RE
.PP

.SS "void linphone_core_set_log_level_mask (unsigned int loglevel)"

.PP
Define the log level using mask\&. The loglevel parameter is a bitmask parameter\&. Therefore to enable only warning and error messages, use ORTP_WARNING | ORTP_ERROR\&. To disable logs, simply set loglevel to 0\&.
.PP
\fBParameters:\fP
.RS 4
\fIloglevel\fP A bitmask of the log levels to set\&. 
.RE
.PP

.SS "void linphone_core_set_max_calls (\fBLinphoneCore\fP * lc, int max)"

.PP
Set the maximum number of simultaneous calls Linphone core can manage at a time\&. All new call above this limit are declined with a busy answer 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP core 
.br
\fImax\fP number of simultaneous calls 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_core_set_provisioning_uri (\fBLinphoneCore\fP * lc, const char * uri)"

.PP
Set URI where to download xml configuration file at startup\&. This can also be set from configuration file or factory config file, from [misc] section, item 'config-uri'\&. Calling this function does not load the configuration\&. It will write the value into configuration so that configuration from remote URI will take place at next LinphoneCore start\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the linphone core 
.br
\fIuri\fP the http or https uri to use in order to download the configuration\&. Passing NULL will disable remote provisioning\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
-1 if uri could not be parsed, 0 otherwise\&. Note that this does not check validity of URI endpoint nor scheme and download may still fail\&. 
.RE
.PP

.SS "void linphone_core_set_root_ca (\fBLinphoneCore\fP * lc, const char * path)"

.PP
Sets the path to a file or folder containing trusted root CAs (PEM format) 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIpath\fP The path to a file or folder containing trusted root CAs 
.RE
.PP

.SS "void linphone_core_set_root_ca_data (\fBLinphoneCore\fP * lc, const char * data)"

.PP
Sets the trusted root CAs (PEM format) 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIdata\fP The trusted root CAs as a string 
.RE
.PP

.SS "void linphone_core_set_ssl_config (\fBLinphoneCore\fP * lc, void * ssl_config)"
Set the pointer to an externally provided ssl configuration for the crypto library 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIssl_config\fP A pointer to an opaque structure which will be provided directly to the crypto library used in bctoolbox\&. Use with extra care\&. This ssl_config structure is responsibility of the caller and will not be freed at the connection's end\&.
.RE
.PP

.SS "void linphone_core_set_user_certificates_path (\fBLinphoneCore\fP * lc, const char * path)"

.PP
Set the path to the directory storing the user's x509 certificates (used by dtls) 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIpath\fP The path to the directory to use to store the user's certificates\&. 
.RE
.PP

.SS "void linphone_core_set_user_data (\fBLinphoneCore\fP * lc, void * userdata)"

.PP
Associate a user pointer to the linphone core\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIuserdata\fP The user data to associate with the LinphoneCore object 
.RE
.PP

.SS "void linphone_core_set_zrtp_secrets_file (\fBLinphoneCore\fP * lc, const char * file)"

.PP
Set the path to the file storing the zrtp secrets cache\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIfile\fP The path to the file to use to store the zrtp secrets cache\&. 
.RE
.PP

.SS "void linphone_core_unref (\fBLinphoneCore\fP * lc)"

.PP
Decrement the ref counter of a \fBLinphoneCore\fP object and destroy it if the counter reach 0\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The \fBLinphoneCore\fP which the reference counter is to be decreased\&. 
.RE
.PP

.SS "void linphone_core_upload_log_collection (\fBLinphoneCore\fP * core)"

.PP
Upload the log collection to the configured server url\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcore\fP LinphoneCore object 
.RE
.PP

.SS "void linphone_core_v_table_destroy (\fBLinphoneCoreVTable\fP * table)"

.PP
Destroy a vtable\&. 
.PP
\fBParameters:\fP
.RS 4
\fItable\fP to be destroyed 
.RE
.PP

.SS "void* linphone_core_v_table_get_user_data (const \fBLinphoneCoreVTable\fP * table)"

.PP
Gets a user data pointer in the vtable\&. 
.PP
\fBParameters:\fP
.RS 4
\fItable\fP the vtable 
.RE
.PP
\fBReturns:\fP
.RS 4
the data attached to the vtable 
.RE
.PP

.SS "\fBLinphoneCoreVTable\fP* linphone_core_v_table_new (void)"

.PP
Instantiate a vtable with all arguments set to NULL\&. 
.PP
\fBReturns:\fP
.RS 4
newly allocated vtable 
.RE
.PP

.SS "void linphone_core_v_table_set_user_data (\fBLinphoneCoreVTable\fP * table, void * data)"

.PP
Sets a user data pointer in the vtable\&. 
.PP
\fBParameters:\fP
.RS 4
\fItable\fP the vtable 
.br
\fIdata\fP the user data to attach 
.RE
.PP

.SS "void linphone_core_verify_server_certificates (\fBLinphoneCore\fP * lc, bool_t yesno)"

.PP
Specify whether the tls server certificate must be verified when connecting to a SIP/TLS server\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIyesno\fP A boolean value telling whether the tls server certificate must be verified 
.RE
.PP

.SS "void linphone_core_verify_server_cn (\fBLinphoneCore\fP * lc, bool_t yesno)"

.PP
Specify whether the tls server certificate common name must be verified when connecting to a SIP/TLS server\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIyesno\fP A boolean value telling whether the tls server certificate common name must be verified 
.RE
.PP

.SS "void linphone_factory_clean (void)"

.PP
Clean the factory\&. This function is generally useless as the factory is unique per process, however calling this function at the end avoid getting reports from belle-sip leak detector about memory leaked in \fBlinphone_factory_get()\fP\&. 
.SS "\fBLinphoneAddress\fP* linphone_factory_create_address (const \fBLinphoneFactory\fP * factory, const char * addr)"

.PP
Parse a string holding a SIP URI and create the according \fBLinphoneAddress\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfactory\fP The \fBLinphoneFactory\fP singleton\&. 
.br
\fIaddr\fP A string holding the SIP URI to parse\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A new \fBLinphoneAddress\fP\&. 
.RE
.PP

.SS "\fBLinphoneAuthInfo\fP* linphone_factory_create_auth_info (const \fBLinphoneFactory\fP * factory, const char * username, const char * userid, const char * passwd, const char * ha1, const char * realm, const char * domain)"

.PP
Creates a \fBLinphoneAuthInfo\fP object\&. The object can be created empty, that is with all arguments set to NULL\&. Username, userid, password, realm and domain can be set later using specific methods\&. At the end, username and passwd (or ha1) are required\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfactory\fP The \fBLinphoneFactory\fP singleton\&. 
.br
\fIusername\fP The username that needs to be authenticated 
.br
\fIuserid\fP The userid used for authenticating (use NULL if you don't know what it is) 
.br
\fIpasswd\fP The password in clear text 
.br
\fIha1\fP The ha1-encrypted password if password is not given in clear text\&. 
.br
\fIrealm\fP The authentication domain (which can be larger than the sip domain\&. Unfortunately many SIP servers don't use this parameter\&. 
.br
\fIdomain\fP The SIP domain for which this authentication information is valid, if it has to be restricted for a single SIP domain\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A \fBLinphoneAuthInfo\fP object\&. linphone_auth_info_destroy() must be used to destroy it when no longer needed\&. The LinphoneCore makes a copy of LinphoneAuthInfo passed through \fBlinphone_core_add_auth_info()\fP\&. 
.RE
.PP

.SS "\fBLinphoneCallCbs\fP* linphone_factory_create_call_cbs (const \fBLinphoneFactory\fP * factory)"

.PP
Create a LinphoneCallCbs object that holds callbacks for events happening on a call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfactory\fP LinphoneFactory singletion object 
.RE
.PP
\fBReturns:\fP
.RS 4
A new LinphoneCallCbs object 
.RE
.PP

.SS "\fBLinphoneCore\fP* linphone_factory_create_core (const \fBLinphoneFactory\fP * factory, \fBLinphoneCoreCbs\fP * cbs, const char * config_path, const char * factory_config_path)"

.PP
Instanciate a \fBLinphoneCore\fP object\&. The LinphoneCore object is the primary handle for doing all phone actions\&. It should be unique within your application\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfactory\fP The \fBLinphoneFactory\fP singleton\&. 
.br
\fIcbs\fP a \fBLinphoneCoreCbs\fP object holding your application callbacks\&. A reference will be taken on it until the destruciton of the core or the unregistration with linphone_core_remove_cbs()\&. 
.br
\fIconfig_path\fP a path to a config file\&. If it does not exists it will be created\&. The config file is used to store all settings, call logs, friends, proxies\&.\&.\&. so that all these settings become persistent over the life of the LinphoneCore object\&. It is allowed to set a NULL config file\&. In that case LinphoneCore will not store any settings\&. 
.br
\fIfactory_config_path\fP a path to a read-only config file that can be used to to store hard-coded preference such as proxy settings or internal preferences\&. The settings in this factory file always override the one in the normal config file\&. It is OPTIONAL, use NULL if unneeded\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlinphone_core_new_with_config\fP 
.RE
.PP

.SS "\fBLinphoneCoreCbs\fP* linphone_factory_create_core_cbs (const \fBLinphoneFactory\fP * factory)"

.PP
Instanciate a \fBLinphoneCoreCbs\fP object\&. 
.PP
\fBReturns:\fP
.RS 4
a new \fBLinphoneCoreCbs\fP\&. 
.RE
.PP

.SS "\fBLinphoneCore\fP* linphone_factory_create_core_with_config (const \fBLinphoneFactory\fP * factory, \fBLinphoneCoreCbs\fP * cbs, \fBLinphoneConfig\fP * config)"

.PP
Instantiates a LinphoneCore object with a given LpConfig\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfactory\fP The \fBLinphoneFactory\fP singleton\&. The LinphoneCore object is the primary handle for doing all phone actions\&. It should be unique within your application\&. 
.br
\fIcbs\fP a \fBLinphoneCoreCbs\fP object holding your application callbacks\&. A reference will be taken on it until the destruciton of the core or the unregistration with linphone_core_remove_cbs()\&. 
.br
\fIconfig\fP a pointer to an LpConfig object holding the configuration of the LinphoneCore to be instantiated\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlinphone_core_new\fP 
.RE
.PP

.SS "\fBLinphoneErrorInfo\fP* linphone_factory_create_error_info (\fBLinphoneFactory\fP * factory)"

.PP
Creates an object LinphoneErrorInfo\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfactory\fP LinphoneFactory object 
.RE
.PP
\fBReturns:\fP
.RS 4
LinphoneErrorInfo object\&. 
.RE
.PP

.SS "\fBLinphoneRange\fP* linphone_factory_create_range (\fBLinphoneFactory\fP * factory)"

.PP
Creates an object LinphoneRange\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfactory\fP LinphoneFactory object 
.RE
.PP
\fBReturns:\fP
.RS 4
LinphoneRange object\&. 
.RE
.PP

.SS "\fBLinphoneTransports\fP* linphone_factory_create_transports (\fBLinphoneFactory\fP * factory)"

.PP
Creates an object LinphoneTransports\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfactory\fP LinphoneFactory object 
.RE
.PP
\fBReturns:\fP
.RS 4
LinphoneTransports object\&. 
.RE
.PP

.SS "\fBLinphoneVcard\fP* linphone_factory_create_vcard (\fBLinphoneFactory\fP * factory)"

.PP
Create an empty \fBLinphoneVcard\fP\&. 
.PP
\fBReturns:\fP
.RS 4
a new \fBLinphoneVcard\fP\&. 
.RE
.PP

.SS "\fBLinphoneVideoActivationPolicy\fP* linphone_factory_create_video_activation_policy (\fBLinphoneFactory\fP * factory)"

.PP
Creates an object LinphoneVideoActivationPolicy\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfactory\fP LinphoneFactory object 
.RE
.PP
\fBReturns:\fP
.RS 4
LinphoneVideoActivationPolicy object\&. 
.RE
.PP

.SS "\fBLinphoneVideoDefinition\fP* linphone_factory_create_video_definition (const \fBLinphoneFactory\fP * factory, unsigned int width, unsigned int height)"

.PP
Create a LinphoneVideoDefinition from a given width and height\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfactory\fP LinphoneFactory singleton object 
.br
\fIwidth\fP The width of the created video definition 
.br
\fIheight\fP The height of the created video definition 
.RE
.PP
\fBReturns:\fP
.RS 4
A new LinphoneVideoDefinition object 
.RE
.PP

.SS "\fBLinphoneVideoDefinition\fP* linphone_factory_create_video_definition_from_name (const \fBLinphoneFactory\fP * factory, const char * name)"

.PP
Create a LinphoneVideoDefinition from a given standard definition name\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfactory\fP LinphoneFactory singleton object 
.br
\fIname\fP The standard definition name of the video definition to create 
.RE
.PP
\fBReturns:\fP
.RS 4
A new LinphoneVideoDefinition object 
.RE
.PP

.SS "\fBLinphoneFactory\fP* linphone_factory_get (void)"

.PP
Create the \fBLinphoneFactory\fP if that has not been done and return a pointer on it\&. 
.PP
\fBReturns:\fP
.RS 4
A pointer on the \fBLinphoneFactory\fP 
.RE
.PP

.SS "const char* linphone_factory_get_data_resources_dir (\fBLinphoneFactory\fP * factory)"

.PP
Get the directory where the data resources are located\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfactory\fP LinphoneFactory object 
.RE
.PP
\fBReturns:\fP
.RS 4
The path to the directory where the data resources are located 
.RE
.PP

.SS "const char* linphone_factory_get_image_resources_dir (\fBLinphoneFactory\fP * factory)"

.PP
Get the directory where the image resources are located\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfactory\fP LinphoneFactory object 
.RE
.PP
\fBReturns:\fP
.RS 4
The path to the directory where the image resources are located 
.RE
.PP

.SS "const char* linphone_factory_get_msplugins_dir (\fBLinphoneFactory\fP * factory)"

.PP
Get the directory where the mediastreamer2 plugins are located\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfactory\fP LinphoneFactory object 
.RE
.PP
\fBReturns:\fP
.RS 4
The path to the directory where the mediastreamer2 plugins are located, or NULL if it has not been set 
.RE
.PP

.SS "const char* linphone_factory_get_ring_resources_dir (\fBLinphoneFactory\fP * factory)"

.PP
Get the directory where the ring resources are located\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfactory\fP LinphoneFactory object 
.RE
.PP
\fBReturns:\fP
.RS 4
The path to the directory where the ring resources are located 
.RE
.PP

.SS "const char* linphone_factory_get_sound_resources_dir (\fBLinphoneFactory\fP * factory)"

.PP
Get the directory where the sound resources are located\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfactory\fP LinphoneFactory object 
.RE
.PP
\fBReturns:\fP
.RS 4
The path to the directory where the sound resources are located 
.RE
.PP

.SS "const bctbx_list_t* linphone_factory_get_supported_video_definitions (const \fBLinphoneFactory\fP * factory)"

.PP
Get the list of standard video definitions supported by Linphone\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfactory\fP LinphoneFactory singleton object 
.RE
.PP
\fBReturns:\fP
.RS 4
A list of \fBLinphoneVideoDefinition\fP objects\&. 
.RE
.PP

.SS "const char* linphone_factory_get_top_resources_dir (const \fBLinphoneFactory\fP * factory)"

.PP
Get the top directory where the resources are located\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfactory\fP LinphoneFactory object 
.RE
.PP
\fBReturns:\fP
.RS 4
The path to the top directory where the resources are located 
.RE
.PP

.SS "void linphone_factory_set_data_resources_dir (\fBLinphoneFactory\fP * factory, const char * path)"

.PP
Set the directory where the data resources are located\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfactory\fP LinphoneFactory object 
.br
\fIpath\fP The path where the data resources are located 
.RE
.PP

.SS "void linphone_factory_set_image_resources_dir (\fBLinphoneFactory\fP * factory, const char * path)"

.PP
Set the directory where the image resources are located\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfactory\fP LinphoneFactory object 
.br
\fIpath\fP The path where the image resources are located 
.RE
.PP

.SS "void linphone_factory_set_msplugins_dir (\fBLinphoneFactory\fP * factory, const char * path)"

.PP
Set the directory where the mediastreamer2 plugins are located\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfactory\fP LinphoneFactory object 
.br
\fIpath\fP The path to the directory where the mediastreamer2 plugins are located 
.RE
.PP

.SS "void linphone_factory_set_ring_resources_dir (\fBLinphoneFactory\fP * factory, const char * path)"

.PP
Set the directory where the ring resources are located\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfactory\fP LinphoneFactory object 
.br
\fIpath\fP The path where the ring resources are located 
.RE
.PP

.SS "void linphone_factory_set_sound_resources_dir (\fBLinphoneFactory\fP * factory, const char * path)"

.PP
Set the directory where the sound resources are located\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfactory\fP LinphoneFactory object 
.br
\fIpath\fP The path where the sound resources are located 
.RE
.PP

.SS "void linphone_factory_set_top_resources_dir (\fBLinphoneFactory\fP * factory, const char * path)"

.PP
Set the top directory where the resources are located\&. If you only define this top directory, the other resources directory will automatically be derived form this one\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfactory\fP LinphoneFactory object 
.br
\fIpath\fP The path to the top directory where the resources are located 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Liblinphone from the source code\&.
