.TH "call_control" 3 "Thu Dec 14 2017" "Version 3.12.0" "Liblinphone" \" -*- nroff -*-
.ad l
.nh
.SH NAME
call_control \- Placing and receiving calls\&.  

.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBlinphone_call_get_user_pointer\fP(call)   \fBlinphone_call_get_user_data\fP(call)"
.br
.ti -1c
.RI "#define \fBlinphone_call_set_user_pointer\fP(call,  ud)   \fBlinphone_call_set_user_data\fP(call, ud)"
.br
.ti -1c
.RI "#define \fBlinphone_call_params_local_conference_mode\fP   \fBlinphone_call_params_get_local_conference_mode\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void(* \fBLinphoneCallCbFunc\fP) (\fBLinphoneCall\fP *call, void *user_data)"
.br
.RI "Callback prototype\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCallCbsDtmfReceivedCb\fP) (\fBLinphoneCall\fP *call, int dtmf)"
.br
.RI "Callback for being notified of received DTMFs\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCallCbsEncryptionChangedCb\fP) (\fBLinphoneCall\fP *call, bool_t on, const char *authentication_token)"
.br
.RI "Call encryption changed callback\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCallCbsInfoMessageReceivedCb\fP) (\fBLinphoneCall\fP *call, const \fBLinphoneInfoMessage\fP *msg)"
.br
.RI "Callback for receiving info messages\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCallCbsStateChangedCb\fP) (\fBLinphoneCall\fP *call, \fBLinphoneCallState\fP cstate, const char *message)"
.br
.RI "Call state notification callback\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCallCbsStatsUpdatedCb\fP) (\fBLinphoneCall\fP *call, const \fBLinphoneCallStats\fP *stats)"
.br
.RI "Callback for receiving quality statistics for calls\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCallCbsTransferStateChangedCb\fP) (\fBLinphoneCall\fP *call, \fBLinphoneCallState\fP cstate)"
.br
.RI "Callback for notifying progresses of transfers\&. "
.ti -1c
.RI "typedef void(* \fBLinphoneCallCbsAckProcessingCb\fP) (\fBLinphoneCall\fP *call, \fBLinphoneHeaders\fP *ack, bool_t is_received)"
.br
.RI "Callback for notifying the processing SIP ACK messages\&. "
.ti -1c
.RI "typedef void(* \fBLinphonePlayerCbsEofReachedCb\fP) (\fBLinphonePlayer\fP *obj)"
.br
.RI "Callback for notifying end of play (file)\&. "
.ti -1c
.RI "typedef enum \fB_LinphoneAudioRoute\fP \fBLinphoneAudioRoute\fP"
.br
.RI "Enum describing type of audio route\&. "
.ti -1c
.RI "typedef struct _LinphoneCall \fBLinphoneCall\fP"
.br
.RI "The LinphoneCall object represents a call issued or received by the LinphoneCore\&. "
.ti -1c
.RI "typedef struct _LinphoneCallCbs \fBLinphoneCallCbs\fP"
.br
.RI "That class holds all the callbacks which are called by LinphoneCall objects\&. "
.ti -1c
.RI "typedef struct _LinphoneCallParams \fBLinphoneCallParams\fP"
.br
.RI "The LinphoneCallParams is an object containing various call related parameters\&. "
.ti -1c
.RI "typedef enum \fB_LinphoneCallState\fP \fBLinphoneCallState\fP"
.br
.RI "LinphoneCallState enum represents the different state a call can reach into\&. "
.ti -1c
.RI "typedef struct _LinphoneConference \fBLinphoneConference\fP"
.br
.RI "LinphoneConference class The _LinphoneConference struct does not exists, it's the Conference C++ class that is used behind\&. "
.ti -1c
.RI "typedef struct _LinphoneConferenceParams \fBLinphoneConferenceParams\fP"
.br
.RI "Parameters for initialization of conferences The _LinphoneConferenceParams struct does not exists, it's the ConferenceParams C++ class that is used behind\&. "
.ti -1c
.RI "typedef enum \fB_LinphoneMediaDirection\fP \fBLinphoneMediaDirection\fP"
.br
.RI "Indicates for a given media the stream direction\&. "
.ti -1c
.RI "typedef struct _LinphonePlayer \fBLinphonePlayer\fP"
.br
.RI "Player interface\&. "
.ti -1c
.RI "typedef struct _LinphonePlayerCbs \fBLinphonePlayerCbs\fP"
.br
.RI "An object to handle the callbacks for the handling a LinphonePlayer objects\&. "
.ti -1c
.RI "typedef enum \fBLinphonePlayerState\fP \fBLinphonePlayerState\fP"
.br
.RI "The state of a LinphonePlayer\&. "
.ti -1c
.RI "typedef enum \fB_LinphonePrivacy\fP \fBLinphonePrivacy\fP"
.br
.RI "Defines privacy policy to apply as described by rfc3323\&. "
.ti -1c
.RI "typedef unsigned int \fBLinphonePrivacyMask\fP"
.br
.RI "A mask of \fBLinphonePrivacy\fP values\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fB_LinphoneAudioRoute\fP { \fBLinphoneAudioRouteEarpiece\fP, \fBLinphoneAudioRouteSpeaker\fP }
.RI "Enum describing type of audio route\&. ""
.br
.ti -1c
.RI "enum \fB_LinphoneCallState\fP { \fBLinphoneCallIdle\fP, \fBLinphoneCallIncomingReceived\fP, \fBLinphoneCallOutgoingInit\fP, \fBLinphoneCallOutgoingProgress\fP, \fBLinphoneCallOutgoingRinging\fP, \fBLinphoneCallOutgoingEarlyMedia\fP, \fBLinphoneCallConnected\fP, \fBLinphoneCallStreamsRunning\fP, \fBLinphoneCallPausing\fP, \fBLinphoneCallPaused\fP, \fBLinphoneCallResuming\fP, \fBLinphoneCallRefered\fP, \fBLinphoneCallError\fP, \fBLinphoneCallEnd\fP, \fBLinphoneCallPausedByRemote\fP, \fBLinphoneCallUpdatedByRemote\fP, \fBLinphoneCallIncomingEarlyMedia\fP, \fBLinphoneCallUpdating\fP, \fBLinphoneCallReleased\fP, \fBLinphoneCallEarlyUpdatedByRemote\fP, \fBLinphoneCallEarlyUpdating\fP }
.RI "LinphoneCallState enum represents the different state a call can reach into\&. ""
.br
.ti -1c
.RI "enum \fB_LinphoneMediaDirection\fP { \fBLinphoneMediaDirectionInvalid\fP = -1, \fBLinphoneMediaDirectionInactive\fP, \fBLinphoneMediaDirectionSendOnly\fP, \fBLinphoneMediaDirectionRecvOnly\fP, \fBLinphoneMediaDirectionSendRecv\fP }
.RI "Indicates for a given media the stream direction\&. ""
.br
.ti -1c
.RI "enum \fBLinphonePlayerState\fP { \fBLinphonePlayerClosed\fP, \fBLinphonePlayerPaused\fP, \fBLinphonePlayerPlaying\fP }
.RI "The state of a LinphonePlayer\&. ""
.br
.ti -1c
.RI "enum \fB_LinphonePrivacy\fP { \fBLinphonePrivacyNone\fP = 0x0, \fBLinphonePrivacyUser\fP = 0x1, \fBLinphonePrivacyHeader\fP = 0x2, \fBLinphonePrivacySession\fP = 0x4, \fBLinphonePrivacyId\fP = 0x8, \fBLinphonePrivacyCritical\fP = 0x10, \fBLinphonePrivacyDefault\fP = 0x8000 }
.RI "Defines privacy policy to apply as described by rfc3323\&. ""
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBLinphoneCall\fP * \fBlinphone_call_ref\fP (\fBLinphoneCall\fP *call)"
.br
.RI "Acquire a reference to the call\&. "
.ti -1c
.RI "void \fBlinphone_call_unref\fP (\fBLinphoneCall\fP *call)"
.br
.RI "Release reference to the call\&. "
.ti -1c
.RI "void * \fBlinphone_call_get_user_data\fP (const \fBLinphoneCall\fP *call)"
.br
.RI "Retrieve the user pointer associated with the call\&. "
.ti -1c
.RI "void \fBlinphone_call_set_user_data\fP (\fBLinphoneCall\fP *call, void *ud)"
.br
.RI "Assign a user pointer to the call\&. "
.ti -1c
.RI "\fBLinphoneCore\fP * \fBlinphone_call_get_core\fP (const \fBLinphoneCall\fP *call)"
.br
.RI "Get the core that has created the specified call\&. "
.ti -1c
.RI "\fBLinphoneCallState\fP \fBlinphone_call_get_state\fP (const \fBLinphoneCall\fP *call)"
.br
.RI "Retrieves the call's current state\&. "
.ti -1c
.RI "bool_t \fBlinphone_call_asked_to_autoanswer\fP (\fBLinphoneCall\fP *call)"
.br
.RI "Tell whether a call has been asked to autoanswer\&. "
.ti -1c
.RI "const \fBLinphoneAddress\fP * \fBlinphone_call_get_remote_address\fP (const \fBLinphoneCall\fP *call)"
.br
.RI "Returns the remote address associated to this call\&. "
.ti -1c
.RI "const \fBLinphoneAddress\fP * \fBlinphone_call_get_to_address\fP (const \fBLinphoneCall\fP *call)"
.br
.RI "Returns the to address with its headers associated to this call\&. "
.ti -1c
.RI "char * \fBlinphone_call_get_remote_address_as_string\fP (const \fBLinphoneCall\fP *call)"
.br
.RI "Returns the remote address associated to this call as a string\&. "
.ti -1c
.RI "const \fBLinphoneAddress\fP * \fBlinphone_call_get_diversion_address\fP (const \fBLinphoneCall\fP *call)"
.br
.RI "Returns the diversion address associated to this call\&. "
.ti -1c
.RI "\fBLinphoneCallDir\fP \fBlinphone_call_get_dir\fP (const \fBLinphoneCall\fP *call)"
.br
.RI "Returns direction of the call (incoming or outgoing)\&. "
.ti -1c
.RI "\fBLinphoneCallLog\fP * \fBlinphone_call_get_call_log\fP (const \fBLinphoneCall\fP *call)"
.br
.RI "Gets the call log associated to this call\&. "
.ti -1c
.RI "const char * \fBlinphone_call_get_refer_to\fP (const \fBLinphoneCall\fP *call)"
.br
.RI "Gets the refer-to uri (if the call was transfered)\&. "
.ti -1c
.RI "bool_t \fBlinphone_call_has_transfer_pending\fP (const \fBLinphoneCall\fP *call)"
.br
.RI "Returns true if this calls has received a transfer that has not been executed yet\&. "
.ti -1c
.RI "\fBLinphoneCall\fP * \fBlinphone_call_get_transferer_call\fP (const \fBLinphoneCall\fP *call)"
.br
.RI "Gets the transferer if this call was started automatically as a result of an incoming transfer request\&. "
.ti -1c
.RI "\fBLinphoneCall\fP * \fBlinphone_call_get_transfer_target_call\fP (const \fBLinphoneCall\fP *call)"
.br
.RI "When this call has received a transfer request, returns the new call that was automatically created as a result of the transfer\&. "
.ti -1c
.RI "\fBLinphoneCall\fP * \fBlinphone_call_get_replaced_call\fP (\fBLinphoneCall\fP *call)"
.br
.RI "Returns the call object this call is replacing, if any\&. "
.ti -1c
.RI "int \fBlinphone_call_get_duration\fP (const \fBLinphoneCall\fP *call)"
.br
.RI "Returns call's duration in seconds\&. "
.ti -1c
.RI "const \fBLinphoneCallParams\fP * \fBlinphone_call_get_current_params\fP (\fBLinphoneCall\fP *call)"
.br
.RI "Returns current parameters associated to the call\&. "
.ti -1c
.RI "const \fBLinphoneCallParams\fP * \fBlinphone_call_get_remote_params\fP (\fBLinphoneCall\fP *call)"
.br
.RI "Returns call parameters proposed by remote\&. "
.ti -1c
.RI "void \fBlinphone_call_enable_camera\fP (\fBLinphoneCall\fP *lc, bool_t enabled)"
.br
.RI "Indicate whether camera input should be sent to remote end\&. "
.ti -1c
.RI "bool_t \fBlinphone_call_camera_enabled\fP (const \fBLinphoneCall\fP *lc)"
.br
.RI "Returns TRUE if camera pictures are allowed to be sent to the remote party\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_call_take_video_snapshot\fP (\fBLinphoneCall\fP *call, const char *file)"
.br
.RI "Take a photo of currently received video and write it into a jpeg file\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_call_take_preview_snapshot\fP (\fBLinphoneCall\fP *call, const char *file)"
.br
.RI "Take a photo of currently captured video and write it into a jpeg file\&. "
.ti -1c
.RI "\fBLinphoneReason\fP \fBlinphone_call_get_reason\fP (const \fBLinphoneCall\fP *call)"
.br
.RI "Returns the reason for a call termination (either error or normal termination) "
.ti -1c
.RI "const \fBLinphoneErrorInfo\fP * \fBlinphone_call_get_error_info\fP (const \fBLinphoneCall\fP *call)"
.br
.RI "Returns full details about call errors or termination reasons\&. "
.ti -1c
.RI "const char * \fBlinphone_call_get_remote_user_agent\fP (\fBLinphoneCall\fP *call)"
.br
.RI "Returns the far end's user agent description string, if available\&. "
.ti -1c
.RI "const char * \fBlinphone_call_get_remote_contact\fP (\fBLinphoneCall\fP *call)"
.br
.RI "Returns the far end's sip contact as a string, if available\&. "
.ti -1c
.RI "const char * \fBlinphone_call_get_authentication_token\fP (\fBLinphoneCall\fP *call)"
.br
.RI "Returns the ZRTP authentication token to verify\&. "
.ti -1c
.RI "bool_t \fBlinphone_call_get_authentication_token_verified\fP (\fBLinphoneCall\fP *call)"
.br
.RI "Returns whether ZRTP authentication token is verified\&. "
.ti -1c
.RI "void \fBlinphone_call_set_authentication_token_verified\fP (\fBLinphoneCall\fP *call, bool_t verified)"
.br
.RI "Set the result of ZRTP short code verification by user\&. "
.ti -1c
.RI "void \fBlinphone_call_send_vfu_request\fP (\fBLinphoneCall\fP *call)"
.br
.RI "Request remote side to send us a Video Fast Update\&. "
.ti -1c
.RI "void \fBlinphone_call_set_next_video_frame_decoded_callback\fP (\fBLinphoneCall\fP *call, \fBLinphoneCallCbFunc\fP cb, void *user_data)"
.br
.ti -1c
.RI "\fBLinphoneCallState\fP \fBlinphone_call_get_transfer_state\fP (\fBLinphoneCall\fP *call)"
.br
.RI "Returns the current transfer state, if a transfer has been initiated from this call\&. "
.ti -1c
.RI "void \fBlinphone_call_zoom_video\fP (\fBLinphoneCall\fP *call, float zoom_factor, float *cx, float *cy)"
.br
.RI "Perform a zoom of the video displayed during a call\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_call_send_dtmf\fP (\fBLinphoneCall\fP *call, char dtmf)"
.br
.RI "Send the specified dtmf\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_call_send_dtmfs\fP (\fBLinphoneCall\fP *call, const char *dtmfs)"
.br
.RI "Send a list of dtmf\&. "
.ti -1c
.RI "void \fBlinphone_call_cancel_dtmfs\fP (\fBLinphoneCall\fP *call)"
.br
.RI "Stop current DTMF sequence sending\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED bool_t \fBlinphone_call_is_in_conference\fP (const \fBLinphoneCall\fP *call)"
.br
.RI "Return TRUE if this call is currently part of a conference\&. "
.ti -1c
.RI "\fBLinphoneConference\fP * \fBlinphone_call_get_conference\fP (const \fBLinphoneCall\fP *call)"
.br
.RI "Return the associated conference object\&. "
.ti -1c
.RI "void \fBlinphone_call_set_audio_route\fP (\fBLinphoneCall\fP *call, \fBLinphoneAudioRoute\fP route)"
.br
.RI "Change the playback output device (currently only used for blackberry) "
.ti -1c
.RI "int \fBlinphone_call_get_stream_count\fP (\fBLinphoneCall\fP *call)"
.br
.RI "Returns the number of stream for the given call\&. "
.ti -1c
.RI "MSFormatType \fBlinphone_call_get_stream_type\fP (\fBLinphoneCall\fP *call, int stream_index)"
.br
.RI "Returns the type of stream for the given stream index\&. "
.ti -1c
.RI "RtpTransport * \fBlinphone_call_get_meta_rtp_transport\fP (\fBLinphoneCall\fP *call, int stream_index)"
.br
.RI "Returns the meta rtp transport for the given stream index\&. "
.ti -1c
.RI "RtpTransport * \fBlinphone_call_get_meta_rtcp_transport\fP (\fBLinphoneCall\fP *call, int stream_index)"
.br
.RI "Returns the meta rtcp transport for the given stream index\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_call_pause\fP (\fBLinphoneCall\fP *call)"
.br
.RI "Pauses the call\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_call_resume\fP (\fBLinphoneCall\fP *call)"
.br
.RI "Resumes a call\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_call_terminate\fP (\fBLinphoneCall\fP *call)"
.br
.RI "Terminates a call\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_call_terminate_with_error_info\fP (\fBLinphoneCall\fP *call, const \fBLinphoneErrorInfo\fP *ei)"
.br
.RI "Terminates a call\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_call_redirect\fP (\fBLinphoneCall\fP *call, const char *redirect_uri)"
.br
.RI "Redirect the specified call to the given redirect URI\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_call_decline\fP (\fBLinphoneCall\fP *call, \fBLinphoneReason\fP reason)"
.br
.RI "Decline a pending incoming call, with a reason\&. "
.ti -1c
.RI "int \fBlinphone_call_decline_with_error_info\fP (\fBLinphoneCall\fP *call, const \fBLinphoneErrorInfo\fP *ei)"
.br
.RI "Decline a pending incoming call, with a LinphoneErrorInfo object\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_call_accept\fP (\fBLinphoneCall\fP *call)"
.br
.RI "Accept an incoming call\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_call_accept_with_params\fP (\fBLinphoneCall\fP *call, const \fBLinphoneCallParams\fP *params)"
.br
.RI "Accept an incoming call, with parameters\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_call_accept_early_media\fP (\fBLinphoneCall\fP *call)"
.br
.RI "Accept an early media session for an incoming call\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_call_accept_early_media_with_params\fP (\fBLinphoneCall\fP *call, const \fBLinphoneCallParams\fP *params)"
.br
.RI "When receiving an incoming, accept to start a media session as early-media\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_call_update\fP (\fBLinphoneCall\fP *call, const \fBLinphoneCallParams\fP *params)"
.br
.RI "Updates a running call according to supplied call parameters or parameters changed in the LinphoneCore\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_call_defer_update\fP (\fBLinphoneCall\fP *call)"
.br
.RI "When receiving a \fBLinphoneCallUpdatedByRemote\fP state notification, prevent LinphoneCore from performing an automatic answer\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_call_accept_update\fP (\fBLinphoneCall\fP *call, const \fBLinphoneCallParams\fP *params)"
.br
.RI "Accept call modifications initiated by other end\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_call_transfer\fP (\fBLinphoneCall\fP *call, const char *refer_to)"
.br
.RI "Performs a simple call transfer to the specified destination\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_call_transfer_to_another\fP (\fBLinphoneCall\fP *call, \fBLinphoneCall\fP *dest)"
.br
.RI "Transfers a call to destination of another running call\&. "
.ti -1c
.RI "\fBLinphoneCallCbs\fP * \fBlinphone_call_cbs_ref\fP (\fBLinphoneCallCbs\fP *cbs)"
.br
.RI "Acquire a reference to the LinphoneCallCbs object\&. "
.ti -1c
.RI "void \fBlinphone_call_cbs_unref\fP (\fBLinphoneCallCbs\fP *cbs)"
.br
.RI "Release reference to the LinphoneCallCbs object\&. "
.ti -1c
.RI "void * \fBlinphone_call_cbs_get_user_data\fP (const \fBLinphoneCallCbs\fP *cbs)"
.br
.RI "Retrieve the user pointer associated with the LinphoneCallCbs object\&. "
.ti -1c
.RI "void \fBlinphone_call_cbs_set_user_data\fP (\fBLinphoneCallCbs\fP *cbs, void *user_data)"
.br
.RI "Assign a user pointer to the LinphoneCallCbs object\&. "
.ti -1c
.RI "\fBLinphoneCallCbsDtmfReceivedCb\fP \fBlinphone_call_cbs_get_dtmf_received\fP (\fBLinphoneCallCbs\fP *cbs)"
.br
.RI "Get the dtmf received callback\&. "
.ti -1c
.RI "void \fBlinphone_call_cbs_set_dtmf_received\fP (\fBLinphoneCallCbs\fP *cbs, \fBLinphoneCallCbsDtmfReceivedCb\fP cb)"
.br
.RI "Set the dtmf received callback\&. "
.ti -1c
.RI "\fBLinphoneCallCbsEncryptionChangedCb\fP \fBlinphone_call_cbs_get_encryption_changed\fP (\fBLinphoneCallCbs\fP *cbs)"
.br
.RI "Get the encryption changed callback\&. "
.ti -1c
.RI "void \fBlinphone_call_cbs_set_encryption_changed\fP (\fBLinphoneCallCbs\fP *cbs, \fBLinphoneCallCbsEncryptionChangedCb\fP cb)"
.br
.RI "Set the encryption changed callback\&. "
.ti -1c
.RI "\fBLinphoneCallCbsInfoMessageReceivedCb\fP \fBlinphone_call_cbs_get_info_message_received\fP (\fBLinphoneCallCbs\fP *cbs)"
.br
.RI "Get the info message received callback\&. "
.ti -1c
.RI "void \fBlinphone_call_cbs_set_info_message_received\fP (\fBLinphoneCallCbs\fP *cbs, \fBLinphoneCallCbsInfoMessageReceivedCb\fP cb)"
.br
.RI "Set the info message received callback\&. "
.ti -1c
.RI "\fBLinphoneCallCbsStateChangedCb\fP \fBlinphone_call_cbs_get_state_changed\fP (\fBLinphoneCallCbs\fP *cbs)"
.br
.RI "Get the state changed callback\&. "
.ti -1c
.RI "void \fBlinphone_call_cbs_set_state_changed\fP (\fBLinphoneCallCbs\fP *cbs, \fBLinphoneCallCbsStateChangedCb\fP cb)"
.br
.RI "Set the state changed callback\&. "
.ti -1c
.RI "\fBLinphoneCallCbsStatsUpdatedCb\fP \fBlinphone_call_cbs_get_stats_updated\fP (\fBLinphoneCallCbs\fP *cbs)"
.br
.RI "Get the stats updated callback\&. "
.ti -1c
.RI "void \fBlinphone_call_cbs_set_stats_updated\fP (\fBLinphoneCallCbs\fP *cbs, \fBLinphoneCallCbsStatsUpdatedCb\fP cb)"
.br
.RI "Set the stats updated callback\&. "
.ti -1c
.RI "\fBLinphoneCallCbsTransferStateChangedCb\fP \fBlinphone_call_cbs_get_transfer_state_changed\fP (\fBLinphoneCallCbs\fP *cbs)"
.br
.RI "Get the transfer state changed callback\&. "
.ti -1c
.RI "void \fBlinphone_call_cbs_set_transfer_state_changed\fP (\fBLinphoneCallCbs\fP *cbs, \fBLinphoneCallCbsTransferStateChangedCb\fP cb)"
.br
.RI "Set the transfer state changed callback\&. "
.ti -1c
.RI "\fBLinphoneCallCbsAckProcessingCb\fP \fBlinphone_call_cbs_get_ack_processing\fP (\fBLinphoneCallCbs\fP *cbs)"
.br
.RI "Get the ACK processing callback\&. "
.ti -1c
.RI "void \fBlinphone_call_cbs_set_ack_processing\fP (\fBLinphoneCallCbs\fP *cbs, \fBLinphoneCallCbsAckProcessingCb\fP cb)"
.br
.RI "Set ACK processing callback\&. "
.ti -1c
.RI "void \fBlinphone_call_params_add_custom_header\fP (\fBLinphoneCallParams\fP *cp, const char *header_name, const char *header_value)"
.br
.RI "Add a custom SIP header in the INVITE for a call\&. "
.ti -1c
.RI "\fBLinphoneCallParams\fP * \fBlinphone_call_params_copy\fP (const \fBLinphoneCallParams\fP *cp)"
.br
.RI "Copy an existing LinphoneCallParams object to a new LinphoneCallParams object\&. "
.ti -1c
.RI "bool_t \fBlinphone_call_params_early_media_sending_enabled\fP (const \fBLinphoneCallParams\fP *cp)"
.br
.RI "Indicate whether sending of early media was enabled\&. "
.ti -1c
.RI "void \fBlinphone_call_params_enable_early_media_sending\fP (\fBLinphoneCallParams\fP *cp, bool_t enabled)"
.br
.RI "Enable sending of real early media (during outgoing calls)\&. "
.ti -1c
.RI "void \fBlinphone_call_params_enable_low_bandwidth\fP (\fBLinphoneCallParams\fP *cp, bool_t enabled)"
.br
.RI "Indicate low bandwith mode\&. "
.ti -1c
.RI "void \fBlinphone_call_params_enable_audio\fP (\fBLinphoneCallParams\fP *cp, bool_t enabled)"
.br
.RI "Enable audio stream\&. "
.ti -1c
.RI "void \fBlinphone_call_params_enable_video\fP (\fBLinphoneCallParams\fP *cp, bool_t enabled)"
.br
.RI "Enable video stream\&. "
.ti -1c
.RI "const char * \fBlinphone_call_params_get_custom_header\fP (const \fBLinphoneCallParams\fP *cp, const char *header_name)"
.br
.RI "Get a custom SIP header\&. "
.ti -1c
.RI "bool_t \fBlinphone_call_params_get_local_conference_mode\fP (const \fBLinphoneCallParams\fP *cp)"
.br
.RI "Tell whether the call is part of the locally managed conference\&. "
.ti -1c
.RI "\fBLinphoneMediaEncryption\fP \fBlinphone_call_params_get_media_encryption\fP (const \fBLinphoneCallParams\fP *cp)"
.br
.RI "Get the kind of media encryption selected for the call\&. "
.ti -1c
.RI "\fBLinphonePrivacyMask\fP \fBlinphone_call_params_get_privacy\fP (const \fBLinphoneCallParams\fP *cp)"
.br
.RI "Get requested level of privacy for the call\&. "
.ti -1c
.RI "float \fBlinphone_call_params_get_received_framerate\fP (const \fBLinphoneCallParams\fP *cp)"
.br
.RI "Get the framerate of the video that is received\&. "
.ti -1c
.RI "const \fBLinphoneVideoDefinition\fP * \fBlinphone_call_params_get_received_video_definition\fP (const \fBLinphoneCallParams\fP *cp)"
.br
.RI "Get the definition of the received video\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED MSVideoSize \fBlinphone_call_params_get_received_video_size\fP (const \fBLinphoneCallParams\fP *cp)"
.br
.RI "Get the size of the video that is received\&. "
.ti -1c
.RI "const char * \fBlinphone_call_params_get_record_file\fP (const \fBLinphoneCallParams\fP *cp)"
.br
.RI "Get the path for the audio recording of the call\&. "
.ti -1c
.RI "const char * \fBlinphone_call_params_get_rtp_profile\fP (const \fBLinphoneCallParams\fP *cp)"
.br
.RI "Get the RTP profile being used\&. "
.ti -1c
.RI "float \fBlinphone_call_params_get_sent_framerate\fP (const \fBLinphoneCallParams\fP *cp)"
.br
.RI "Get the framerate of the video that is sent\&. "
.ti -1c
.RI "const \fBLinphoneVideoDefinition\fP * \fBlinphone_call_params_get_sent_video_definition\fP (const \fBLinphoneCallParams\fP *cp)"
.br
.RI "Get the definition of the sent video\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED MSVideoSize \fBlinphone_call_params_get_sent_video_size\fP (const \fBLinphoneCallParams\fP *cp)"
.br
.RI "Gets the size of the video that is sent\&. "
.ti -1c
.RI "const char * \fBlinphone_call_params_get_session_name\fP (const \fBLinphoneCallParams\fP *cp)"
.br
.RI "Get the session name of the media session (ie in SDP)\&. "
.ti -1c
.RI "\fBLinphonePayloadType\fP * \fBlinphone_call_params_get_used_audio_payload_type\fP (const \fBLinphoneCallParams\fP *cp)"
.br
.RI "Get the audio payload type that has been selected by a call\&. "
.ti -1c
.RI "\fBLinphonePayloadType\fP * \fBlinphone_call_params_get_used_video_payload_type\fP (const \fBLinphoneCallParams\fP *cp)"
.br
.RI "Get the video payload type that has been selected by a call\&. "
.ti -1c
.RI "\fBLinphonePayloadType\fP * \fBlinphone_call_params_get_used_text_payload_type\fP (const \fBLinphoneCallParams\fP *cp)"
.br
.RI "Get the text payload type that has been selected by a call\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED const OrtpPayloadType * \fBlinphone_call_params_get_used_audio_codec\fP (const \fBLinphoneCallParams\fP *cp)"
.br
.RI "Get the audio payload type that has been selected by a call\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED const OrtpPayloadType * \fBlinphone_call_params_get_used_video_codec\fP (const \fBLinphoneCallParams\fP *cp)"
.br
.RI "Get the video payload type that has been selected by a call\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED const OrtpPayloadType * \fBlinphone_call_params_get_used_text_codec\fP (const \fBLinphoneCallParams\fP *cp)"
.br
.RI "Get the text payload type that has been selected by a call\&. "
.ti -1c
.RI "bool_t \fBlinphone_call_params_low_bandwidth_enabled\fP (const \fBLinphoneCallParams\fP *cp)"
.br
.RI "Tell whether the call has been configured in low bandwidth mode or not\&. "
.ti -1c
.RI "void \fBlinphone_call_params_set_audio_bandwidth_limit\fP (\fBLinphoneCallParams\fP *cp, int bw)"
.br
.RI "Refine bandwidth settings for this call by setting a bandwidth limit for audio streams\&. "
.ti -1c
.RI "void \fBlinphone_call_params_set_media_encryption\fP (\fBLinphoneCallParams\fP *cp, \fBLinphoneMediaEncryption\fP enc)"
.br
.RI "Set requested media encryption for a call\&. "
.ti -1c
.RI "void \fBlinphone_call_params_set_privacy\fP (\fBLinphoneCallParams\fP *cp, \fBLinphonePrivacyMask\fP privacy)"
.br
.RI "Set requested level of privacy for the call\&. "
.ti -1c
.RI "void \fBlinphone_call_params_set_record_file\fP (\fBLinphoneCallParams\fP *cp, const char *path)"
.br
.RI "Enable recording of the call\&. "
.ti -1c
.RI "void \fBlinphone_call_params_set_session_name\fP (\fBLinphoneCallParams\fP *cp, const char *name)"
.br
.RI "Set the session name of the media session (ie in SDP)\&. "
.ti -1c
.RI "bool_t \fBlinphone_call_params_audio_enabled\fP (const \fBLinphoneCallParams\fP *cp)"
.br
.RI "Tell whether audio is enabled or not\&. "
.ti -1c
.RI "bool_t \fBlinphone_call_params_video_enabled\fP (const \fBLinphoneCallParams\fP *cp)"
.br
.RI "Tell whether video is enabled or not\&. "
.ti -1c
.RI "\fBLinphoneMediaDirection\fP \fBlinphone_call_params_get_audio_direction\fP (const \fBLinphoneCallParams\fP *cp)"
.br
.RI "Get the audio stream direction\&. "
.ti -1c
.RI "\fBLinphoneMediaDirection\fP \fBlinphone_call_params_get_video_direction\fP (const \fBLinphoneCallParams\fP *cp)"
.br
.RI "Get the video stream direction\&. "
.ti -1c
.RI "void \fBlinphone_call_params_set_audio_direction\fP (\fBLinphoneCallParams\fP *cp, \fBLinphoneMediaDirection\fP dir)"
.br
.RI "Set the audio stream direction\&. "
.ti -1c
.RI "void \fBlinphone_call_params_set_video_direction\fP (\fBLinphoneCallParams\fP *cp, \fBLinphoneMediaDirection\fP dir)"
.br
.RI "Set the video stream direction\&. "
.ti -1c
.RI "void * \fBlinphone_call_params_get_user_data\fP (const \fBLinphoneCallParams\fP *cp)"
.br
.RI "Get the user data associated with the call params\&. "
.ti -1c
.RI "void \fBlinphone_call_params_set_user_data\fP (\fBLinphoneCallParams\fP *cp, void *ud)"
.br
.RI "Assign a user data to the call params\&. "
.ti -1c
.RI "\fBLinphoneCallParams\fP * \fBlinphone_call_params_ref\fP (\fBLinphoneCallParams\fP *cp)"
.br
.RI "Acquire a reference to the call params\&. "
.ti -1c
.RI "void \fBlinphone_call_params_unref\fP (\fBLinphoneCallParams\fP *cp)"
.br
.RI "Release a reference to the call params\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED void \fBlinphone_call_params_destroy\fP (\fBLinphoneCallParams\fP *cp)"
.br
.RI "Destroy a LinphoneCallParams object\&. "
.ti -1c
.RI "\fBLinphoneConferenceParams\fP * \fBlinphone_conference_params_new\fP (const \fBLinphoneCore\fP *core)"
.br
.RI "Create a \fBLinphoneConferenceParams\fP with default parameters set\&. "
.ti -1c
.RI "\fBLinphoneConferenceParams\fP * \fBlinphone_conference_params_ref\fP (\fBLinphoneConferenceParams\fP *params)"
.br
.RI "Take a reference on a #LinphoneConferencParams\&. "
.ti -1c
.RI "void \fBlinphone_conference_params_unref\fP (\fBLinphoneConferenceParams\fP *params)"
.br
.RI "Release a \fBLinphoneConferenceParams\fP\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED void \fBlinphone_conference_params_free\fP (\fBLinphoneConferenceParams\fP *params)"
.br
.RI "Free a \fBLinphoneConferenceParams\fP\&. "
.ti -1c
.RI "\fBLinphoneConferenceParams\fP * \fBlinphone_conference_params_clone\fP (const \fBLinphoneConferenceParams\fP *params)"
.br
.RI "Clone a \fBLinphoneConferenceParams\fP\&. "
.ti -1c
.RI "void \fBlinphone_conference_params_enable_video\fP (\fBLinphoneConferenceParams\fP *params, bool_t enable)"
.br
.RI "Enable video when starting a conference\&. "
.ti -1c
.RI "bool_t \fBlinphone_conference_params_video_requested\fP (const \fBLinphoneConferenceParams\fP *params)"
.br
.RI "Check whether video will be enable at conference starting\&. "
.ti -1c
.RI "\fBLinphoneConference\fP * \fBlinphone_conference_ref\fP (\fBLinphoneConference\fP *conf)"
.br
.RI "Take a reference on a \fBLinphoneConference\fP\&. "
.ti -1c
.RI "void \fBlinphone_conference_unref\fP (\fBLinphoneConference\fP *conf)"
.br
.RI "Release a \fBLinphoneConference\fP\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_conference_remove_participant\fP (\fBLinphoneConference\fP *obj, const \fBLinphoneAddress\fP *uri)"
.br
.RI "Remove a participant from a conference\&. "
.ti -1c
.RI "bctbx_list_t * \fBlinphone_conference_get_participants\fP (const \fBLinphoneConference\fP *obj)"
.br
.RI "Get URIs of all participants of one conference The returned bctbx_list_t contains URIs of all participant\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_conference_invite_participants\fP (\fBLinphoneConference\fP *conf, const bctbx_list_t *addresses, const \fBLinphoneCallParams\fP *params)"
.br
.RI "Invite participants to the conference, by supplying a list of LinphoneAddress\&. "
.ti -1c
.RI "const \fBLinphoneAddress\fP * \fBlinphone_core_get_current_call_remote_address\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Get the remote address of the current call\&. "
.ti -1c
.RI "\fBLinphoneCall\fP * \fBlinphone_core_invite\fP (\fBLinphoneCore\fP *lc, const char *url)"
.br
.RI "Initiates an outgoing call The application doesn't own a reference to the returned LinphoneCall object\&. "
.ti -1c
.RI "\fBLinphoneCall\fP * \fBlinphone_core_invite_address\fP (\fBLinphoneCore\fP *lc, const \fBLinphoneAddress\fP *addr)"
.br
.RI "Initiates an outgoing call given a destination LinphoneAddress The LinphoneAddress can be constructed directly using \fBlinphone_address_new()\fP, or created by \fBlinphone_core_interpret_url()\fP\&. "
.ti -1c
.RI "\fBLinphoneCall\fP * \fBlinphone_core_invite_with_params\fP (\fBLinphoneCore\fP *lc, const char *url, const \fBLinphoneCallParams\fP *params)"
.br
.RI "Initiates an outgoing call according to supplied call parameters The application doesn't own a reference to the returned LinphoneCall object\&. "
.ti -1c
.RI "\fBLinphoneCall\fP * \fBlinphone_core_invite_address_with_params\fP (\fBLinphoneCore\fP *lc, const \fBLinphoneAddress\fP *addr, const \fBLinphoneCallParams\fP *params)"
.br
.RI "Initiates an outgoing call given a destination LinphoneAddress The LinphoneAddress can be constructed directly using \fBlinphone_address_new()\fP, or created by \fBlinphone_core_interpret_url()\fP\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED \fBLinphoneStatus\fP \fBlinphone_core_transfer_call\fP (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call, const char *refer_to)"
.br
.RI "Performs a simple call transfer to the specified destination\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED \fBLinphoneStatus\fP \fBlinphone_core_transfer_call_to_another\fP (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call, \fBLinphoneCall\fP *dest)"
.br
.RI "Transfers a call to destination of another running call\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_is_incoming_invite_pending\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Tells whether there is an incoming invite pending\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_in_call\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Tells whether there is a call running\&. "
.ti -1c
.RI "\fBLinphoneCall\fP * \fBlinphone_core_get_current_call\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Gets the current call\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED \fBLinphoneStatus\fP \fBlinphone_core_accept_call\fP (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call)"
.br
.RI "Accept an incoming call\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED \fBLinphoneStatus\fP \fBlinphone_core_accept_call_with_params\fP (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call, const \fBLinphoneCallParams\fP *params)"
.br
.RI "Accept an incoming call, with parameters\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED \fBLinphoneStatus\fP \fBlinphone_core_accept_early_media_with_params\fP (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call, const \fBLinphoneCallParams\fP *params)"
.br
.RI "When receiving an incoming, accept to start a media session as early-media\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED \fBLinphoneStatus\fP \fBlinphone_core_accept_early_media\fP (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call)"
.br
.RI "Accept an early media session for an incoming call\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED \fBLinphoneStatus\fP \fBlinphone_core_terminate_call\fP (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call)"
.br
.RI "Terminates a call\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED \fBLinphoneStatus\fP \fBlinphone_core_redirect_call\fP (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call, const char *redirect_uri)"
.br
.RI "Redirect the specified call to the given redirect URI\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED \fBLinphoneStatus\fP \fBlinphone_core_decline_call\fP (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call, \fBLinphoneReason\fP reason)"
.br
.RI "Decline a pending incoming call, with a reason\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_core_terminate_all_calls\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Terminates all the calls\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED \fBLinphoneStatus\fP \fBlinphone_core_pause_call\fP (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call)"
.br
.RI "Pauses the call\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_core_pause_all_calls\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Pause all currently running calls\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED \fBLinphoneStatus\fP \fBlinphone_core_resume_call\fP (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call)"
.br
.RI "Resumes a call\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED \fBLinphoneStatus\fP \fBlinphone_core_update_call\fP (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call, const \fBLinphoneCallParams\fP *params)"
.br
.RI "Updates a running call according to supplied call parameters or parameters changed in the LinphoneCore\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED \fBLinphoneStatus\fP \fBlinphone_core_defer_call_update\fP (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call)"
.br
.RI "When receiving a \fBLinphoneCallUpdatedByRemote\fP state notification, prevent LinphoneCore from performing an automatic answer\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED \fBLinphoneStatus\fP \fBlinphone_core_accept_call_update\fP (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call, const \fBLinphoneCallParams\fP *params)"
.br
.RI "Accept call modifications initiated by other end\&. "
.ti -1c
.RI "\fBLinphoneCallParams\fP * \fBlinphone_core_create_call_params\fP (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call)"
.br
.RI "Create a LinphoneCallParams suitable for \fBlinphone_core_invite_with_params()\fP, \fBlinphone_core_accept_call_with_params()\fP, \fBlinphone_core_accept_early_media_with_params()\fP, \fBlinphone_core_accept_call_update()\fP\&. "
.ti -1c
.RI "\fBLinphoneCall\fP * \fBlinphone_core_get_call_by_remote_address\fP (const \fBLinphoneCore\fP *lc, const char *remote_address)"
.br
.RI "Get the call with the remote_address specified\&. "
.ti -1c
.RI "\fBLinphoneCall\fP * \fBlinphone_core_get_call_by_remote_address2\fP (const \fBLinphoneCore\fP *lc, const \fBLinphoneAddress\fP *remote_address)"
.br
.RI "Get the call with the remote_address specified\&. "
.ti -1c
.RI "void \fBlinphone_core_set_inc_timeout\fP (\fBLinphoneCore\fP *lc, int seconds)"
.br
.RI "Set the incoming call timeout in seconds\&. "
.ti -1c
.RI "int \fBlinphone_core_get_inc_timeout\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Returns the incoming call timeout See \fBlinphone_core_set_inc_timeout()\fP for details\&. "
.ti -1c
.RI "void \fBlinphone_core_set_in_call_timeout\fP (\fBLinphoneCore\fP *lc, int seconds)"
.br
.RI "Set the in call timeout in seconds\&. "
.ti -1c
.RI "int \fBlinphone_core_get_in_call_timeout\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Gets the in call timeout See \fBlinphone_core_set_in_call_timeout()\fP for details\&. "
.ti -1c
.RI "void \fBlinphone_core_set_delayed_timeout\fP (\fBLinphoneCore\fP *lc, int seconds)"
.br
.RI "Set the in delayed timeout in seconds\&. "
.ti -1c
.RI "int \fBlinphone_core_get_delayed_timeout\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Gets the delayed timeout See \fBlinphone_core_set_delayed_timeout()\fP for details\&. "
.ti -1c
.RI "int \fBlinphone_core_get_calls_nb\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Get the number of Call\&. "
.ti -1c
.RI "const bctbx_list_t * \fBlinphone_core_get_calls\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Gets the current list of calls\&. "
.ti -1c
.RI "\fBLinphoneCall\fP * \fBlinphone_core_find_call_from_uri\fP (const \fBLinphoneCore\fP *lc, const char *uri)"
.br
.RI "Search from the list of current calls if a remote address match uri\&. "
.ti -1c
.RI "\fBLinphoneConferenceParams\fP * \fBlinphone_core_create_conference_params\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Create some default conference parameters for instanciating a a conference with \fBlinphone_core_create_conference_with_params()\fP\&. "
.ti -1c
.RI "\fBLinphoneConference\fP * \fBlinphone_core_create_conference_with_params\fP (\fBLinphoneCore\fP *lc, const \fBLinphoneConferenceParams\fP *params)"
.br
.RI "Create a conference\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_core_add_to_conference\fP (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call)"
.br
.RI "Add a participant to the conference\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_core_add_all_to_conference\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Add all current calls into the conference\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_core_remove_from_conference\fP (\fBLinphoneCore\fP *lc, \fBLinphoneCall\fP *call)"
.br
.RI "Remove a call from the conference\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_is_in_conference\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Indicates whether the local participant is part of a conference\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_core_enter_conference\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Join the local participant to the running conference\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_core_leave_conference\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Make the local participant leave the running conference\&. "
.ti -1c
.RI "float \fBlinphone_core_get_conference_local_input_volume\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Get the set input volume of the local participant\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_core_terminate_conference\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Terminate the running conference\&. "
.ti -1c
.RI "int \fBlinphone_core_get_conference_size\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Get the number of participant in the running conference\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_core_start_conference_recording\fP (\fBLinphoneCore\fP *lc, const char *path)"
.br
.RI "Start recording the running conference\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_core_stop_conference_recording\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Stop recording the running conference\&. "
.ti -1c
.RI "\fBLinphoneConference\fP * \fBlinphone_core_get_conference\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Get a pointer on the internal conference object\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_sound_resources_locked\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Check if a call will need the sound resources in near future (typically an outgoing call that is awaiting response)\&. "
.ti -1c
.RI "\fBLinphonePlayer\fP * \fBlinphone_player_ref\fP (\fBLinphonePlayer\fP *player)"
.br
.RI "Acquire a reference to the player\&. "
.ti -1c
.RI "void \fBlinphone_player_unref\fP (\fBLinphonePlayer\fP *player)"
.br
.RI "Release reference to the player\&. "
.ti -1c
.RI "void * \fBlinphone_player_get_user_data\fP (const \fBLinphonePlayer\fP *player)"
.br
.RI "Retrieve the user pointer associated with the player\&. "
.ti -1c
.RI "void \fBlinphone_player_set_user_data\fP (\fBLinphonePlayer\fP *player, void *ud)"
.br
.RI "Assign a user pointer to the player\&. "
.ti -1c
.RI "\fBLinphonePlayerCbs\fP * \fBlinphone_player_get_callbacks\fP (const \fBLinphonePlayer\fP *player)"
.br
.RI "Get the LinphonePlayerCbs object associated with the LinphonePlayer\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_player_open\fP (\fBLinphonePlayer\fP *obj, const char *filename)"
.br
.RI "Open a file for playing\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_player_start\fP (\fBLinphonePlayer\fP *obj)"
.br
.RI "Start playing a file that has been opened with \fBlinphone_player_open()\fP\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_player_pause\fP (\fBLinphonePlayer\fP *obj)"
.br
.RI "Pause the playing of a file\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_player_seek\fP (\fBLinphonePlayer\fP *obj, int time_ms)"
.br
.RI "Seek in an opened file\&. "
.ti -1c
.RI "\fBLinphonePlayerState\fP \fBlinphone_player_get_state\fP (\fBLinphonePlayer\fP *obj)"
.br
.RI "Get the current state of a player\&. "
.ti -1c
.RI "int \fBlinphone_player_get_duration\fP (\fBLinphonePlayer\fP *obj)"
.br
.RI "Get the duration of the opened file\&. "
.ti -1c
.RI "int \fBlinphone_player_get_current_position\fP (\fBLinphonePlayer\fP *obj)"
.br
.RI "Get the current position in the opened file\&. "
.ti -1c
.RI "void \fBlinphone_player_close\fP (\fBLinphonePlayer\fP *obj)"
.br
.RI "Close the opened file\&. "
.ti -1c
.RI "\fBLinphonePlayerCbs\fP * \fBlinphone_player_cbs_ref\fP (\fBLinphonePlayerCbs\fP *cbs)"
.br
.RI "Acquire a reference to the LinphonePlayerCbs object\&. "
.ti -1c
.RI "void \fBlinphone_player_cbs_unref\fP (\fBLinphonePlayerCbs\fP *cbs)"
.br
.RI "Release reference to the LinphonePlayerCbs object\&. "
.ti -1c
.RI "void * \fBlinphone_player_cbs_get_user_data\fP (const \fBLinphonePlayerCbs\fP *cbs)"
.br
.RI "Retrieve the user pointer associated with the LinphonePlayerCbs object\&. "
.ti -1c
.RI "void \fBlinphone_player_cbs_set_user_data\fP (\fBLinphonePlayerCbs\fP *cbs, void *ud)"
.br
.RI "Assign a user pointer to the LinphonePlayerCbs object\&. "
.ti -1c
.RI "\fBLinphonePlayerCbsEofReachedCb\fP \fBlinphone_player_cbs_get_eof_reached\fP (const \fBLinphonePlayerCbs\fP *cbs)"
.br
.RI "Get the end-of-file reached callback\&. "
.ti -1c
.RI "void \fBlinphone_player_cbs_set_eof_reached\fP (\fBLinphonePlayerCbs\fP *cbs, \fBLinphonePlayerCbsEofReachedCb\fP cb)"
.br
.RI "Set the end-of-file reached callback\&. "
.in -1c
.SH "Detailed Description"
.PP 
Placing and receiving calls\&. 

The \fBLinphoneCall\fP object represents an incoming or outgoing call managed by the \fBLinphoneCore\fP\&. Outgoing calls can be created using \fBlinphone_core_invite()\fP or \fBlinphone_core_invite_address()\fP, while incoming calls are notified to the application through the \fBLinphoneCoreVTable::call_state_changed\fP callback\&.
.PP
See the basic call \fBtutorial\fP\&. 
.SH "Macro Definition Documentation"
.PP 
.SS "#define linphone_call_get_user_pointer(call)   \fBlinphone_call_get_user_data\fP(call)"

.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_call_get_user_data()\fP instead\&.
.RE
.PP

.SS "#define linphone_call_params_local_conference_mode   \fBlinphone_call_params_get_local_conference_mode\fP"

.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_call_params_get_local_conference_mode()\fP instead\&.
.RE
.PP

.SS "#define linphone_call_set_user_pointer(call, ud)   \fBlinphone_call_set_user_data\fP(call, ud)"

.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_call_set_user_data()\fP instead\&.
.RE
.PP

.SH "Typedef Documentation"
.PP 
.SS "typedef struct _LinphoneCallCbs \fBLinphoneCallCbs\fP"

.PP
That class holds all the callbacks which are called by LinphoneCall objects\&. Use \fBlinphone_factory_create_call_cbs()\fP to create an instance\&. Then, call the callback setters on the events you need to monitor and pass the object to a LinphoneCall instance through \fBlinphone_call_add_callbacks()\fP\&. 
.SS "typedef void(* LinphoneCallCbsAckProcessingCb) (\fBLinphoneCall\fP *call, \fBLinphoneHeaders\fP *ack, bool_t is_received)"

.PP
Callback for notifying the processing SIP ACK messages\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP LinphoneCall for which an ACK is being received or sent 
.br
\fIack\fP the ACK message 
.br
\fIis_received\fP if TRUE this ACK is an incoming one, otherwise it is an ACK about to be sent\&. 
.RE
.PP

.SS "typedef void(* LinphoneCallCbsDtmfReceivedCb) (\fBLinphoneCall\fP *call, int dtmf)"

.PP
Callback for being notified of received DTMFs\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP LinphoneCall object that received the dtmf 
.br
\fIdtmf\fP The ascii code of the dtmf 
.RE
.PP

.SS "typedef void(* LinphoneCallCbsEncryptionChangedCb) (\fBLinphoneCall\fP *call, bool_t on, const char *authentication_token)"

.PP
Call encryption changed callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP LinphoneCall object whose encryption is changed\&. 
.br
\fIon\fP Whether encryption is activated\&. 
.br
\fIauthentication_token\fP An authentication_token, currently set for ZRTP kind of encryption only\&. 
.RE
.PP

.SS "typedef void(* LinphoneCallCbsInfoMessageReceivedCb) (\fBLinphoneCall\fP *call, const \fBLinphoneInfoMessage\fP *msg)"

.PP
Callback for receiving info messages\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP LinphoneCall whose info message belongs to\&. 
.br
\fImsg\fP LinphoneInfoMessage object\&. 
.RE
.PP

.SS "typedef void(* LinphoneCallCbsStateChangedCb) (\fBLinphoneCall\fP *call, \fBLinphoneCallState\fP cstate, const char *message)"

.PP
Call state notification callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP LinphoneCall whose state is changed\&. 
.br
\fIcstate\fP The new state of the call 
.br
\fImessage\fP An informational message about the state\&. 
.RE
.PP

.SS "typedef void(* LinphoneCallCbsStatsUpdatedCb) (\fBLinphoneCall\fP *call, const \fBLinphoneCallStats\fP *stats)"

.PP
Callback for receiving quality statistics for calls\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP LinphoneCall object whose statistics are notified 
.br
\fIstats\fP LinphoneCallStats object 
.RE
.PP

.SS "typedef void(* LinphoneCallCbsTransferStateChangedCb) (\fBLinphoneCall\fP *call, \fBLinphoneCallState\fP cstate)"

.PP
Callback for notifying progresses of transfers\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP LinphoneCall that was transfered 
.br
\fIcstate\fP The state of the call to transfer target at the far end\&. 
.RE
.PP

.SS "typedef struct _LinphoneCallParams \fBLinphoneCallParams\fP"

.PP
The LinphoneCallParams is an object containing various call related parameters\&. It can be used to retrieve parameters from a currently running call or modify the call's characteristics dynamically\&. 
.SS "typedef enum \fB_LinphoneCallState\fP  \fBLinphoneCallState\fP"

.PP
LinphoneCallState enum represents the different state a call can reach into\&. The application is notified of state changes through the \fBLinphoneCoreVTable::call_state_changed\fP callback\&. 
.SS "typedef void(* LinphonePlayerCbsEofReachedCb) (\fBLinphonePlayer\fP *obj)"

.PP
Callback for notifying end of play (file)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIplayer\fP The LinphonePlayer object 
.RE
.PP

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fB_LinphoneCallState\fP"

.PP
LinphoneCallState enum represents the different state a call can reach into\&. The application is notified of state changes through the \fBLinphoneCoreVTable::call_state_changed\fP callback\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILinphoneCallIdle \fP\fP
Initial call state\&. 
.TP
\fB\fILinphoneCallIncomingReceived \fP\fP
This is a new incoming call\&. 
.TP
\fB\fILinphoneCallOutgoingInit \fP\fP
An outgoing call is started\&. 
.TP
\fB\fILinphoneCallOutgoingProgress \fP\fP
An outgoing call is in progress\&. 
.TP
\fB\fILinphoneCallOutgoingRinging \fP\fP
An outgoing call is ringing at remote end\&. 
.TP
\fB\fILinphoneCallOutgoingEarlyMedia \fP\fP
An outgoing call is proposed early media\&. 
.TP
\fB\fILinphoneCallConnected \fP\fP
Connected, the call is answered\&. 
.TP
\fB\fILinphoneCallStreamsRunning \fP\fP
The media streams are established and running\&. 
.TP
\fB\fILinphoneCallPausing \fP\fP
The call is pausing at the initiative of local end\&. 
.TP
\fB\fILinphoneCallPaused \fP\fP
The call is paused, remote end has accepted the pause\&. 
.TP
\fB\fILinphoneCallResuming \fP\fP
The call is being resumed by local end\&. 
.TP
\fB\fILinphoneCallRefered \fP\fP
The call is being transfered to another party, resulting in a new outgoing call to follow immediately\&. 
.TP
\fB\fILinphoneCallError \fP\fP
The call encountered an error\&. 
.TP
\fB\fILinphoneCallEnd \fP\fP
The call ended normally\&. 
.TP
\fB\fILinphoneCallPausedByRemote \fP\fP
The call is paused by remote end\&. 
.TP
\fB\fILinphoneCallUpdatedByRemote \fP\fP
The call's parameters change is requested by remote end, used for example when video is added by remote\&. 
.TP
\fB\fILinphoneCallIncomingEarlyMedia \fP\fP
We are proposing early media to an incoming call\&. 
.TP
\fB\fILinphoneCallUpdating \fP\fP
A call update has been initiated by us\&. 
.TP
\fB\fILinphoneCallReleased \fP\fP
The call object is no more retained by the core\&. 
.TP
\fB\fILinphoneCallEarlyUpdatedByRemote \fP\fP
The call is updated by remote while not yet answered (early dialog SIP UPDATE received) 
.TP
\fB\fILinphoneCallEarlyUpdating \fP\fP
We are updating the call while not yet answered (early dialog SIP UPDATE sent) 
.SS "enum \fB_LinphoneMediaDirection\fP"

.PP
Indicates for a given media the stream direction\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILinphoneMediaDirectionSendOnly \fP\fP
No active media not supported yet\&. 
.TP
\fB\fILinphoneMediaDirectionRecvOnly \fP\fP
Send only mode\&. 
.TP
\fB\fILinphoneMediaDirectionSendRecv \fP\fP
recv only mode 
.SS "enum \fB_LinphonePrivacy\fP"

.PP
Defines privacy policy to apply as described by rfc3323\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILinphonePrivacyNone \fP\fP
Privacy services must not perform any privacy function\&. 
.TP
\fB\fILinphonePrivacyUser \fP\fP
Request that privacy services provide a user-level privacy function\&. With this mode, 'from' header is hidden, usually replaced by From: 'Anonymous' <sip:anonymous@anonymous.invalid> 
.TP
\fB\fILinphonePrivacyHeader \fP\fP
Request that privacy services modify headers that cannot be set arbitrarily by the user (Contact/Via)\&. 
.TP
\fB\fILinphonePrivacySession \fP\fP
Request that privacy services provide privacy for session media\&. 
.TP
\fB\fILinphonePrivacyId \fP\fP
rfc3325 The presence of this privacy type in a Privacy header field indicates that the user would like the Network Asserted Identity to be kept private with respect to SIP entities outside the Trust Domain with which the user authenticated\&. Note that a user requesting multiple types of privacy MUST include all of the requested privacy types in its Privacy header field value 
.TP
\fB\fILinphonePrivacyCritical \fP\fP
Privacy service must perform the specified services or fail the request\&. 
.TP
\fB\fILinphonePrivacyDefault \fP\fP
Special keyword to use privacy as defined either globally or by proxy using \fBlinphone_proxy_config_set_privacy()\fP 
.SS "enum \fBLinphonePlayerState\fP"

.PP
The state of a LinphonePlayer\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILinphonePlayerClosed \fP\fP
No file is opened for playing\&. 
.TP
\fB\fILinphonePlayerPaused \fP\fP
The player is paused\&. 
.TP
\fB\fILinphonePlayerPlaying \fP\fP
The player is playing\&. 
.SH "Function Documentation"
.PP 
.SS "\fBLinphoneStatus\fP linphone_call_accept (\fBLinphoneCall\fP * call)"

.PP
Accept an incoming call\&. Basically the application is notified of incoming calls within the call_state_changed callback of the \fBLinphoneCoreVTable\fP structure, where it will receive a LinphoneCallIncoming event with the associated LinphoneCall object\&. The application can later accept the call using this method\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP A LinphoneCall object 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on failure 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_call_accept_early_media (\fBLinphoneCall\fP * call)"

.PP
Accept an early media session for an incoming call\&. This is identical as calling \fBlinphone_call_accept_early_media_with_params()\fP with NULL parameters\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP A LinphoneCall object 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, -1 otherwise 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlinphone_call_accept_early_media_with_params()\fP 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_call_accept_early_media_with_params (\fBLinphoneCall\fP * call, const \fBLinphoneCallParams\fP * params)"

.PP
When receiving an incoming, accept to start a media session as early-media\&. This means the call is not accepted but audio & video streams can be established if the remote party supports early media\&. However, unlike after call acceptance, mic and camera input are not sent during early-media, though received audio & video are played normally\&. The call can then later be fully accepted using \fBlinphone_call_accept()\fP or \fBlinphone_call_accept_with_params()\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP A LinphoneCall object 
.br
\fIparams\fP The call parameters to use (can be NULL) 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, -1 otherwise 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_call_accept_update (\fBLinphoneCall\fP * call, const \fBLinphoneCallParams\fP * params)"

.PP
Accept call modifications initiated by other end\&. This call may be performed in response to a \fBLinphoneCallUpdatedByRemote\fP state notification\&. When such notification arrives, the application can decide to call \fBlinphone_call_defer_update()\fP so that it can have the time to prompt the user\&. \fBlinphone_call_get_remote_params()\fP can be used to get information about the call parameters requested by the other party, such as whether a video stream is requested\&.
.PP
When the user accepts or refuse the change, \fBlinphone_call_accept_update()\fP can be done to answer to the other party\&. If params is NULL, then the same call parameters established before the update request will continue to be used (no change)\&. If params is not NULL, then the update will be accepted according to the parameters passed\&. Typical example is when a user accepts to start video, then params should indicate that video stream should be used (see \fBlinphone_call_params_enable_video()\fP)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP A LinphoneCall object 
.br
\fIparams\fP A LinphoneCallParams object describing the call parameters to accept 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, -1 otherwise (actually when this function call is performed outside ot \fBLinphoneCallUpdatedByRemote\fP state) 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_call_accept_with_params (\fBLinphoneCall\fP * call, const \fBLinphoneCallParams\fP * params)"

.PP
Accept an incoming call, with parameters\&. Basically the application is notified of incoming calls within the call_state_changed callback of the \fBLinphoneCoreVTable\fP structure, where it will receive a LinphoneCallIncoming event with the associated LinphoneCall object\&. The application can later accept the call using this method\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP A LinphoneCall object 
.br
\fIparams\fP The specific parameters for this call, for example whether video is accepted or not\&. Use NULL to use default parameters 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on failure 
.RE
.PP

.SS "bool_t linphone_call_asked_to_autoanswer (\fBLinphoneCall\fP * call)"

.PP
Tell whether a call has been asked to autoanswer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP LinphoneCall object 
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean value telling whether the call has been asked to autoanswer 
.RE
.PP

.SS "void linphone_call_cancel_dtmfs (\fBLinphoneCall\fP * call)"

.PP
Stop current DTMF sequence sending\&. Please note that some DTMF could be already sent, depending on when this function call is delayed from \fBlinphone_call_send_dtmfs\fP\&. This function will be automatically called if call state change to anything but LinphoneCallStreamsRunning\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP The LinphoneCall object 
.RE
.PP

.SS "\fBLinphoneCallCbsAckProcessingCb\fP linphone_call_cbs_get_ack_processing (\fBLinphoneCallCbs\fP * cbs)"

.PP
Get the ACK processing callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP LinphoneCallCbs object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The current ack processing callback\&. 
.RE
.PP

.SS "\fBLinphoneCallCbsDtmfReceivedCb\fP linphone_call_cbs_get_dtmf_received (\fBLinphoneCallCbs\fP * cbs)"

.PP
Get the dtmf received callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP LinphoneCallCbs object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The current dtmf received callback\&. 
.RE
.PP

.SS "\fBLinphoneCallCbsEncryptionChangedCb\fP linphone_call_cbs_get_encryption_changed (\fBLinphoneCallCbs\fP * cbs)"

.PP
Get the encryption changed callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP LinphoneCallCbs object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The current encryption changed callback\&. 
.RE
.PP

.SS "\fBLinphoneCallCbsInfoMessageReceivedCb\fP linphone_call_cbs_get_info_message_received (\fBLinphoneCallCbs\fP * cbs)"

.PP
Get the info message received callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP LinphoneCallCbs object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The current info message received callback\&. 
.RE
.PP

.SS "\fBLinphoneCallCbsStateChangedCb\fP linphone_call_cbs_get_state_changed (\fBLinphoneCallCbs\fP * cbs)"

.PP
Get the state changed callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP LinphoneCallCbs object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The current state changed callback\&. 
.RE
.PP

.SS "\fBLinphoneCallCbsStatsUpdatedCb\fP linphone_call_cbs_get_stats_updated (\fBLinphoneCallCbs\fP * cbs)"

.PP
Get the stats updated callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP LinphoneCallCbs object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The current stats updated callback\&. 
.RE
.PP

.SS "\fBLinphoneCallCbsTransferStateChangedCb\fP linphone_call_cbs_get_transfer_state_changed (\fBLinphoneCallCbs\fP * cbs)"

.PP
Get the transfer state changed callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP LinphoneCallCbs object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The current transfer state changed callback\&. 
.RE
.PP

.SS "void* linphone_call_cbs_get_user_data (const \fBLinphoneCallCbs\fP * cbs)"

.PP
Retrieve the user pointer associated with the LinphoneCallCbs object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP LinphoneCallCbs object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The user pointer associated with the LinphoneCallCbs object\&. 
.RE
.PP

.SS "\fBLinphoneCallCbs\fP* linphone_call_cbs_ref (\fBLinphoneCallCbs\fP * cbs)"

.PP
Acquire a reference to the LinphoneCallCbs object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP LinphoneCallCbs object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The same LinphoneCallCbs object\&. 
.RE
.PP

.SS "void linphone_call_cbs_set_ack_processing (\fBLinphoneCallCbs\fP * cbs, \fBLinphoneCallCbsAckProcessingCb\fP cb)"

.PP
Set ACK processing callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP LinphoneCallCbs object\&. 
.br
\fIcb\fP The ack processing callback to be used\&. 
.RE
.PP

.SS "void linphone_call_cbs_set_dtmf_received (\fBLinphoneCallCbs\fP * cbs, \fBLinphoneCallCbsDtmfReceivedCb\fP cb)"

.PP
Set the dtmf received callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP LinphoneCallCbs object\&. 
.br
\fIcb\fP The dtmf received callback to be used\&. 
.RE
.PP

.SS "void linphone_call_cbs_set_encryption_changed (\fBLinphoneCallCbs\fP * cbs, \fBLinphoneCallCbsEncryptionChangedCb\fP cb)"

.PP
Set the encryption changed callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP LinphoneCallCbs object\&. 
.br
\fIcb\fP The encryption changed callback to be used\&. 
.RE
.PP

.SS "void linphone_call_cbs_set_info_message_received (\fBLinphoneCallCbs\fP * cbs, \fBLinphoneCallCbsInfoMessageReceivedCb\fP cb)"

.PP
Set the info message received callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP LinphoneCallCbs object\&. 
.br
\fIcb\fP The info message received callback to be used\&. 
.RE
.PP

.SS "void linphone_call_cbs_set_state_changed (\fBLinphoneCallCbs\fP * cbs, \fBLinphoneCallCbsStateChangedCb\fP cb)"

.PP
Set the state changed callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP LinphoneCallCbs object\&. 
.br
\fIcb\fP The state changed callback to be used\&. 
.RE
.PP

.SS "void linphone_call_cbs_set_stats_updated (\fBLinphoneCallCbs\fP * cbs, \fBLinphoneCallCbsStatsUpdatedCb\fP cb)"

.PP
Set the stats updated callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP LinphoneCallCbs object\&. 
.br
\fIcb\fP The stats updated callback to be used\&. 
.RE
.PP

.SS "void linphone_call_cbs_set_transfer_state_changed (\fBLinphoneCallCbs\fP * cbs, \fBLinphoneCallCbsTransferStateChangedCb\fP cb)"

.PP
Set the transfer state changed callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP LinphoneCallCbs object\&. 
.br
\fIcb\fP The transfer state changed callback to be used\&. 
.RE
.PP

.SS "void linphone_call_cbs_set_user_data (\fBLinphoneCallCbs\fP * cbs, void * user_data)"

.PP
Assign a user pointer to the LinphoneCallCbs object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP LinphoneCallCbs object\&. 
.br
\fIud\fP The user pointer to associate with the LinphoneCallCbs object\&. 
.RE
.PP

.SS "void linphone_call_cbs_unref (\fBLinphoneCallCbs\fP * cbs)"

.PP
Release reference to the LinphoneCallCbs object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP LinphoneCallCbs object\&. 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_call_decline (\fBLinphoneCall\fP * call, \fBLinphoneReason\fP reason)"

.PP
Decline a pending incoming call, with a reason\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP A LinphoneCall object that must be in the IncomingReceived state 
.br
\fIreason\fP The reason for rejecting the call: LinphoneReasonDeclined or LinphoneReasonBusy 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on failure 
.RE
.PP

.SS "int linphone_call_decline_with_error_info (\fBLinphoneCall\fP * call, const \fBLinphoneErrorInfo\fP * ei)"

.PP
Decline a pending incoming call, with a LinphoneErrorInfo object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP A LinphoneCall object that must be in the IncomingReceived state 
.br
\fIei\fP LinphoneErrorInfo containing more information on the call rejection\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on failure 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_call_defer_update (\fBLinphoneCall\fP * call)"

.PP
When receiving a \fBLinphoneCallUpdatedByRemote\fP state notification, prevent LinphoneCore from performing an automatic answer\&. When receiving a \fBLinphoneCallUpdatedByRemote\fP state notification (ie an incoming reINVITE), the default behaviour of LinphoneCore is defined by the 'defer_update_default' option of the 'sip' section of the config\&. If this option is 0 (the default) then the LinphoneCore automatically answers the reINIVTE with call parameters unchanged\&. However when for example when the remote party updated the call to propose a video stream, it can be useful to prompt the user before answering\&. This can be achieved by calling \fBlinphone_core_defer_call_update()\fP during the call state notification, to deactivate the automatic answer that would just confirm the audio but reject the video\&. Then, when the user responds to dialog prompt, it becomes possible to call \fBlinphone_call_accept_update()\fP to answer the reINVITE, with eventually video enabled in the LinphoneCallParams argument\&.
.PP
The \fBLinphoneCallUpdatedByRemote\fP notification can also arrive when receiving an INVITE without SDP\&. In such case, an unchanged offer is made in the 200Ok, and when the ACK containing the SDP answer is received, \fBLinphoneCallUpdatedByRemote\fP is triggered to notify the application of possible changes in the media session\&. However in such case defering the update has no meaning since we just generating an offer\&.
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP A LinphoneCall object 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, -1 if the \fBlinphone_call_defer_update()\fP was done outside a valid \fBLinphoneCallUpdatedByRemote\fP notification 
.RE
.PP

.SS "const char* linphone_call_get_authentication_token (\fBLinphoneCall\fP * call)"

.PP
Returns the ZRTP authentication token to verify\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP the LinphoneCall 
.RE
.PP
\fBReturns:\fP
.RS 4
the authentication token to verify\&. 
.RE
.PP

.SS "bool_t linphone_call_get_authentication_token_verified (\fBLinphoneCall\fP * call)"

.PP
Returns whether ZRTP authentication token is verified\&. If not, it must be verified by users as described in ZRTP procedure\&. Once done, the application must inform of the results with \fBlinphone_call_set_authentication_token_verified()\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP the LinphoneCall 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if authentication token is verifed, false otherwise\&. 
.RE
.PP

.SS "\fBLinphoneCallLog\fP* linphone_call_get_call_log (const \fBLinphoneCall\fP * call)"

.PP
Gets the call log associated to this call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP LinphoneCall object 
.RE
.PP
\fBReturns:\fP
.RS 4
The LinphoneCallLog associated with the specified LinphoneCall 
.RE
.PP

.SS "\fBLinphoneConference\fP* linphone_call_get_conference (const \fBLinphoneCall\fP * call)"

.PP
Return the associated conference object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP \fBLinphoneCall\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer on \fBLinphoneConference\fP or NULL if the call is not part of any conference\&. 
.RE
.PP

.SS "\fBLinphoneCore\fP* linphone_call_get_core (const \fBLinphoneCall\fP * call)"

.PP
Get the core that has created the specified call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP LinphoneCall object 
.RE
.PP
\fBReturns:\fP
.RS 4
The LinphoneCore object that has created the specified call\&. 
.RE
.PP

.SS "const \fBLinphoneErrorInfo\fP* linphone_call_get_error_info (const \fBLinphoneCall\fP * call)"

.PP
Returns full details about call errors or termination reasons\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP LinphoneCall object on which we want the information error 
.RE
.PP
\fBReturns:\fP
.RS 4
LinphoneErrorInfo object holding the reason error\&. 
.RE
.PP

.SS "RtpTransport* linphone_call_get_meta_rtcp_transport (\fBLinphoneCall\fP * call, int stream_index)"

.PP
Returns the meta rtcp transport for the given stream index\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP 
.br
\fIstream_index\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to the meta rtcp transport if it exists, NULL otherwise 
.RE
.PP

.SS "RtpTransport* linphone_call_get_meta_rtp_transport (\fBLinphoneCall\fP * call, int stream_index)"

.PP
Returns the meta rtp transport for the given stream index\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP 
.br
\fIstream_index\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to the meta rtp transport if it exists, NULL otherwise 
.RE
.PP

.SS "const char* linphone_call_get_refer_to (const \fBLinphoneCall\fP * call)"

.PP
Gets the refer-to uri (if the call was transfered)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP LinphoneCall object 
.RE
.PP
\fBReturns:\fP
.RS 4
The refer-to uri of the call (if it was transfered) 
.RE
.PP

.SS "char* linphone_call_get_remote_address_as_string (const \fBLinphoneCall\fP * call)"

.PP
Returns the remote address associated to this call as a string\&. The result string must be freed by user using ms_free()\&. 
.SS "const \fBLinphoneCallParams\fP* linphone_call_get_remote_params (\fBLinphoneCall\fP * call)"

.PP
Returns call parameters proposed by remote\&. This is useful when receiving an incoming call, to know whether the remote party supports video, encryption or whatever\&. 
.SS "\fBLinphoneCall\fP* linphone_call_get_replaced_call (\fBLinphoneCall\fP * call)"

.PP
Returns the call object this call is replacing, if any\&. Call replacement can occur during call transfers\&. By default, the core automatically terminates the replaced call and accept the new one\&. This function allows the application to know whether a new incoming call is a one that replaces another one\&. 
.SS "int linphone_call_get_stream_count (\fBLinphoneCall\fP * call)"

.PP
Returns the number of stream for the given call\&. Currently there is only two (Audio, Video), but later there will be more\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
2 
.RE
.PP

.SS "MSFormatType linphone_call_get_stream_type (\fBLinphoneCall\fP * call, int stream_index)"

.PP
Returns the type of stream for the given stream index\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP 
.br
\fIstream_index\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the type (MSAudio, MSVideo, MSText) of the stream of given index\&. 
.RE
.PP

.SS "\fBLinphoneCallState\fP linphone_call_get_transfer_state (\fBLinphoneCall\fP * call)"

.PP
Returns the current transfer state, if a transfer has been initiated from this call\&. 
.PP
\fBSee also:\fP
.RS 4
\fBlinphone_core_transfer_call()\fP , \fBlinphone_core_transfer_call_to_another()\fP 
.RE
.PP

.SS "\fBLinphoneCall\fP* linphone_call_get_transferer_call (const \fBLinphoneCall\fP * call)"

.PP
Gets the transferer if this call was started automatically as a result of an incoming transfer request\&. The call in which the transfer request was received is returned in this case\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP LinphoneCall object 
.RE
.PP
\fBReturns:\fP
.RS 4
The transferer call if the specified call was started automatically as a result of an incoming transfer request, NULL otherwise 
.RE
.PP

.SS "void* linphone_call_get_user_data (const \fBLinphoneCall\fP * call)"

.PP
Retrieve the user pointer associated with the call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP The call\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The user pointer associated with the call\&. 
.RE
.PP

.SS "bool_t linphone_call_has_transfer_pending (const \fBLinphoneCall\fP * call)"

.PP
Returns true if this calls has received a transfer that has not been executed yet\&. Pending transfers are executed when this call is being paused or closed, locally or by remote endpoint\&. If the call is already paused while receiving the transfer request, the transfer immediately occurs\&. 
.SS "LINPHONE_DEPRECATED bool_t linphone_call_is_in_conference (const \fBLinphoneCall\fP * call)"

.PP
Return TRUE if this call is currently part of a conference\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP \fBLinphoneCall\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if part of a conference\&. 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_call_get_conference()\fP instead\&.  
.RE
.PP

.SS "void linphone_call_params_add_custom_header (\fBLinphoneCallParams\fP * cp, const char * header_name, const char * header_value)"

.PP
Add a custom SIP header in the INVITE for a call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP The \fBLinphoneCallParams\fP to add a custom SIP header to\&. 
.br
\fIheader_name\fP The name of the header to add\&. 
.br
\fIheader_value\fP The content of the header to add\&. 
.RE
.PP

.SS "bool_t linphone_call_params_audio_enabled (const \fBLinphoneCallParams\fP * cp)"

.PP
Tell whether audio is enabled or not\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean value telling whether audio is enabled or not\&. 
.RE
.PP

.SS "\fBLinphoneCallParams\fP* linphone_call_params_copy (const \fBLinphoneCallParams\fP * cp)"

.PP
Copy an existing LinphoneCallParams object to a new LinphoneCallParams object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP The LinphoneCallParams object to copy\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A copy of the LinphoneCallParams object\&. 
.RE
.PP

.SS "LINPHONE_DEPRECATED void linphone_call_params_destroy (\fBLinphoneCallParams\fP * cp)"

.PP
Destroy a LinphoneCallParams object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_call_params_unref()\fP instead\&.  
.RE
.PP

.SS "bool_t linphone_call_params_early_media_sending_enabled (const \fBLinphoneCallParams\fP * cp)"

.PP
Indicate whether sending of early media was enabled\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean value telling whether sending of early media was enabled\&. 
.RE
.PP

.SS "void linphone_call_params_enable_audio (\fBLinphoneCallParams\fP * cp, bool_t enabled)"

.PP
Enable audio stream\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.br
\fIenabled\fP A boolean value telling whether to enable audio or not\&. 
.RE
.PP

.SS "void linphone_call_params_enable_early_media_sending (\fBLinphoneCallParams\fP * cp, bool_t enabled)"

.PP
Enable sending of real early media (during outgoing calls)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.br
\fIenabled\fP A boolean value telling whether to enable early media sending or not\&. 
.RE
.PP

.SS "void linphone_call_params_enable_low_bandwidth (\fBLinphoneCallParams\fP * cp, bool_t enabled)"

.PP
Indicate low bandwith mode\&. Configuring a call to low bandwidth mode will result in the core to activate several settings for the call in order to ensure that bitrate usage is lowered to the minimum possible\&. Typically, ptime (packetization time) will be increased, audio codec's output bitrate will be targetted to 20kbit/s provided that it is achievable by the codec selected after SDP handshake\&. Video is automatically disabled\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.br
\fIenabled\fP A boolean value telling whether to activate the low bandwidth mode or not\&. 
.RE
.PP

.SS "void linphone_call_params_enable_video (\fBLinphoneCallParams\fP * cp, bool_t enabled)"

.PP
Enable video stream\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.br
\fIenabled\fP A boolean value telling whether to enable video or not\&. 
.RE
.PP

.SS "\fBLinphoneMediaDirection\fP linphone_call_params_get_audio_direction (const \fBLinphoneCallParams\fP * cp)"

.PP
Get the audio stream direction\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.RE
.PP
\fBReturns:\fP
.RS 4
The audio stream direction associated with the call params\&. 
.RE
.PP

.SS "const char* linphone_call_params_get_custom_header (const \fBLinphoneCallParams\fP * cp, const char * header_name)"

.PP
Get a custom SIP header\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP The \fBLinphoneCallParams\fP to get the custom SIP header from\&. 
.br
\fIheader_name\fP The name of the header to get\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The content of the header or NULL if not found\&. 
.RE
.PP

.SS "bool_t linphone_call_params_get_local_conference_mode (const \fBLinphoneCallParams\fP * cp)"

.PP
Tell whether the call is part of the locally managed conference\&. 
.PP
\fBWarning:\fP
.RS 4
If a conference server is used to manage conferences, that function does not return TRUE even if the conference is running\&.
.br
 If you want to test whether the conference is running, you should test whether \fBlinphone_core_get_conference()\fP return a non-null pointer\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean value telling whether the call is part of the locally managed conference\&. 
.RE
.PP

.SS "\fBLinphoneMediaEncryption\fP linphone_call_params_get_media_encryption (const \fBLinphoneCallParams\fP * cp)"

.PP
Get the kind of media encryption selected for the call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.RE
.PP
\fBReturns:\fP
.RS 4
The kind of media encryption selected for the call\&. 
.RE
.PP

.SS "\fBLinphonePrivacyMask\fP linphone_call_params_get_privacy (const \fBLinphoneCallParams\fP * cp)"

.PP
Get requested level of privacy for the call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.RE
.PP
\fBReturns:\fP
.RS 4
The privacy mode used for the call\&. 
.RE
.PP

.SS "float linphone_call_params_get_received_framerate (const \fBLinphoneCallParams\fP * cp)"

.PP
Get the framerate of the video that is received\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.RE
.PP
\fBReturns:\fP
.RS 4
The actual received framerate in frames per seconds, 0 if not available\&. 
.RE
.PP

.SS "const \fBLinphoneVideoDefinition\fP* linphone_call_params_get_received_video_definition (const \fBLinphoneCallParams\fP * cp)"

.PP
Get the definition of the received video\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.RE
.PP
\fBReturns:\fP
.RS 4
The received LinphoneVideoDefinition 
.RE
.PP

.SS "LINPHONE_DEPRECATED MSVideoSize linphone_call_params_get_received_video_size (const \fBLinphoneCallParams\fP * cp)"

.PP
Get the size of the video that is received\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.RE
.PP
\fBReturns:\fP
.RS 4
The received video size or MS_VIDEO_SIZE_UNKNOWN if not available\&. 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_call_params_get_received_video_definition()\fP instead 
.RE
.PP

.SS "const char* linphone_call_params_get_record_file (const \fBLinphoneCallParams\fP * cp)"

.PP
Get the path for the audio recording of the call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.RE
.PP
\fBReturns:\fP
.RS 4
The path to the audio recording of the call\&. 
.RE
.PP

.SS "const char* linphone_call_params_get_rtp_profile (const \fBLinphoneCallParams\fP * cp)"

.PP
Get the RTP profile being used\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP \fBLinphoneCallParams\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
The RTP profile\&. 
.RE
.PP

.SS "float linphone_call_params_get_sent_framerate (const \fBLinphoneCallParams\fP * cp)"

.PP
Get the framerate of the video that is sent\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.RE
.PP
\fBReturns:\fP
.RS 4
The actual sent framerate in frames per seconds, 0 if not available\&. 
.RE
.PP

.SS "const \fBLinphoneVideoDefinition\fP* linphone_call_params_get_sent_video_definition (const \fBLinphoneCallParams\fP * cp)"

.PP
Get the definition of the sent video\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.RE
.PP
\fBReturns:\fP
.RS 4
The sent LinphoneVideoDefinition 
.RE
.PP

.SS "LINPHONE_DEPRECATED MSVideoSize linphone_call_params_get_sent_video_size (const \fBLinphoneCallParams\fP * cp)"

.PP
Gets the size of the video that is sent\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCalParams object 
.RE
.PP
\fBReturns:\fP
.RS 4
The sent video size or MS_VIDEO_SIZE_UNKNOWN if not available\&. 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_call_params_get_sent_video_definition()\fP instead 
.RE
.PP

.SS "const char* linphone_call_params_get_session_name (const \fBLinphoneCallParams\fP * cp)"

.PP
Get the session name of the media session (ie in SDP)\&. Subject from the SIP message can be retrieved using \fBlinphone_call_params_get_custom_header()\fP and is different\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.RE
.PP
\fBReturns:\fP
.RS 4
The session name of the media session\&. 
.RE
.PP

.SS "LINPHONE_DEPRECATED const OrtpPayloadType* linphone_call_params_get_used_audio_codec (const \fBLinphoneCallParams\fP * cp)"

.PP
Get the audio payload type that has been selected by a call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP The call\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The selected payload type\&. NULL is returned if no audio payload type has been seleced by the call\&. 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_call_params_get_used_audio_payload_type()\fP instead\&.  
.RE
.PP

.SS "\fBLinphonePayloadType\fP* linphone_call_params_get_used_audio_payload_type (const \fBLinphoneCallParams\fP * cp)"

.PP
Get the audio payload type that has been selected by a call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP The call\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The selected payload type\&. NULL is returned if no audio payload type has been seleced by the call\&. 
.RE
.PP

.SS "LINPHONE_DEPRECATED const OrtpPayloadType* linphone_call_params_get_used_text_codec (const \fBLinphoneCallParams\fP * cp)"

.PP
Get the text payload type that has been selected by a call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP The call\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The selected payload type\&. NULL is returned if no text payload type has been seleced by the call\&. 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_call_params_get_used_text_payload_type()\fP instead\&.  
.RE
.PP

.SS "\fBLinphonePayloadType\fP* linphone_call_params_get_used_text_payload_type (const \fBLinphoneCallParams\fP * cp)"

.PP
Get the text payload type that has been selected by a call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP The call\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The selected payload type\&. NULL is returned if no text payload type has been seleced by the call\&. 
.RE
.PP

.SS "LINPHONE_DEPRECATED const OrtpPayloadType* linphone_call_params_get_used_video_codec (const \fBLinphoneCallParams\fP * cp)"

.PP
Get the video payload type that has been selected by a call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP The call\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The selected payload type\&. NULL is returned if no video payload type has been seleced by the call\&. 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_call_params_get_used_video_payload_type()\fP instead\&.  
.RE
.PP

.SS "\fBLinphonePayloadType\fP* linphone_call_params_get_used_video_payload_type (const \fBLinphoneCallParams\fP * cp)"

.PP
Get the video payload type that has been selected by a call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP The call\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The selected payload type\&. NULL is returned if no video payload type has been seleced by the call\&. 
.RE
.PP

.SS "void* linphone_call_params_get_user_data (const \fBLinphoneCallParams\fP * cp)"

.PP
Get the user data associated with the call params\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.RE
.PP
\fBReturns:\fP
.RS 4
The user data associated with the call params\&. 
.RE
.PP

.SS "\fBLinphoneMediaDirection\fP linphone_call_params_get_video_direction (const \fBLinphoneCallParams\fP * cp)"

.PP
Get the video stream direction\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.RE
.PP
\fBReturns:\fP
.RS 4
The video stream direction associated with the call params\&. 
.RE
.PP

.SS "bool_t linphone_call_params_low_bandwidth_enabled (const \fBLinphoneCallParams\fP * cp)"

.PP
Tell whether the call has been configured in low bandwidth mode or not\&. This mode can be automatically discovered thanks to a stun server when activate_edge_workarounds=1 in section [net] of configuration file\&. An application that would have reliable way to know network capacity may not use activate_edge_workarounds=1 but instead manually configure low bandwidth mode with \fBlinphone_call_params_enable_low_bandwidth()\fP\&. When enabled, this param may transform a call request with video in audio only mode\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean value telling whether the low bandwidth mode has been configured/detected\&. 
.RE
.PP

.SS "\fBLinphoneCallParams\fP* linphone_call_params_ref (\fBLinphoneCallParams\fP * cp)"

.PP
Acquire a reference to the call params\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.RE
.PP
\fBReturns:\fP
.RS 4
The same LinphoneCallParams object 
.RE
.PP

.SS "void linphone_call_params_set_audio_bandwidth_limit (\fBLinphoneCallParams\fP * cp, int bw)"

.PP
Refine bandwidth settings for this call by setting a bandwidth limit for audio streams\&. As a consequence, codecs whose bitrates are not compatible with this limit won't be used\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.br
\fIbw\fP The audio bandwidth limit to set in kbit/s\&. 
.RE
.PP

.SS "void linphone_call_params_set_audio_direction (\fBLinphoneCallParams\fP * cp, \fBLinphoneMediaDirection\fP dir)"

.PP
Set the audio stream direction\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.br
\fIdir\fP The audio stream direction associated with this call params\&. 
.RE
.PP

.SS "void linphone_call_params_set_media_encryption (\fBLinphoneCallParams\fP * cp, \fBLinphoneMediaEncryption\fP enc)"

.PP
Set requested media encryption for a call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.br
\fIenc\fP The media encryption to use for the call\&. 
.RE
.PP

.SS "void linphone_call_params_set_privacy (\fBLinphoneCallParams\fP * cp, \fBLinphonePrivacyMask\fP privacy)"

.PP
Set requested level of privacy for the call\&.  
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.br
\fIprivacy\fP The privacy mode to used for the call\&. 
.RE
.PP

.SS "void linphone_call_params_set_record_file (\fBLinphoneCallParams\fP * cp, const char * path)"

.PP
Enable recording of the call\&. This function must be used before the call parameters are assigned to the call\&. The call recording can be started and paused after the call is established with \fBlinphone_call_start_recording()\fP and linphone_call_pause_recording()\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.br
\fIpath\fP A string containing the path and filename of the file where audio/video streams are to be written\&. The filename must have either \&.mkv or \&.wav extention\&. The video stream will be written only if a MKV file is given\&. 
.RE
.PP

.SS "void linphone_call_params_set_session_name (\fBLinphoneCallParams\fP * cp, const char * name)"

.PP
Set the session name of the media session (ie in SDP)\&. Subject from the SIP message (which is different) can be set using linphone_call_params_set_custom_header()\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.br
\fIname\fP The session name to be used\&. 
.RE
.PP

.SS "void linphone_call_params_set_user_data (\fBLinphoneCallParams\fP * cp, void * ud)"

.PP
Assign a user data to the call params\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.br
\fIud\fP The user data to associate with the call params\&. 
.RE
.PP

.SS "void linphone_call_params_set_video_direction (\fBLinphoneCallParams\fP * cp, \fBLinphoneMediaDirection\fP dir)"

.PP
Set the video stream direction\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.br
\fIdir\fP The video stream direction associated with this call params\&. 
.RE
.PP

.SS "void linphone_call_params_unref (\fBLinphoneCallParams\fP * cp)"

.PP
Release a reference to the call params\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.RE
.PP

.SS "bool_t linphone_call_params_video_enabled (const \fBLinphoneCallParams\fP * cp)"

.PP
Tell whether video is enabled or not\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcp\fP LinphoneCallParams object 
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean value telling whether video is enabled or not\&. 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_call_pause (\fBLinphoneCall\fP * call)"

.PP
Pauses the call\&. If a music file has been setup using \fBlinphone_core_set_play_file()\fP, this file will be played to the remote user\&. The only way to resume a paused call is to call \fBlinphone_call_resume()\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP LinphoneCall object 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on failure 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlinphone_call_resume()\fP 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_call_redirect (\fBLinphoneCall\fP * call, const char * redirect_uri)"

.PP
Redirect the specified call to the given redirect URI\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP A LinphoneCall object 
.br
\fIredirect_uri\fP The URI to redirect the call to 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, -1 on error\&. 
.RE
.PP

.SS "\fBLinphoneCall\fP* linphone_call_ref (\fBLinphoneCall\fP * call)"

.PP
Acquire a reference to the call\&. An application that wishes to retain a pointer to call object must use this function to unsure the pointer remains valid\&. Once the application no more needs this pointer, it must call \fBlinphone_call_unref()\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP The call\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The same call\&. 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_call_resume (\fBLinphoneCall\fP * call)"

.PP
Resumes a call\&. The call needs to have been paused previously with \fBlinphone_call_pause()\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP LinphoneCall object 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on failure 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlinphone_call_pause()\fP 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_call_send_dtmf (\fBLinphoneCall\fP * call, char dtmf)"

.PP
Send the specified dtmf\&. The dtmf is automatically played to the user\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP The LinphoneCall object 
.br
\fIdtmf\fP The dtmf name specified as a char, such as '0', '#' etc\&.\&.\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, -1 on error\&. 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_call_send_dtmfs (\fBLinphoneCall\fP * call, const char * dtmfs)"

.PP
Send a list of dtmf\&. The dtmfs are automatically sent to remote, separated by some needed customizable delay\&. Sending is canceled if the call state changes to something not LinphoneCallStreamsRunning\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP The LinphoneCall object 
.br
\fIdtmfs\fP A dtmf sequence such as '123#123123' 
.RE
.PP
\fBReturns:\fP
.RS 4
-2 if there is already a DTMF sequence, -1 if call is not ready, 0 otherwise\&. 
.RE
.PP

.SS "void linphone_call_set_audio_route (\fBLinphoneCall\fP * call, \fBLinphoneAudioRoute\fP route)"

.PP
Change the playback output device (currently only used for blackberry) 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP 
.br
\fIroute\fP the wanted audio route (earpiece, speaker, \&.\&.\&.) 
.RE
.PP

.SS "void linphone_call_set_authentication_token_verified (\fBLinphoneCall\fP * call, bool_t verified)"

.PP
Set the result of ZRTP short code verification by user\&. If remote party also does the same, it will update the ZRTP cache so that user's verification will not be required for the two users\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP the LinphoneCall 
.br
\fIverified\fP whether the ZRTP SAS is verified\&. 
.RE
.PP

.SS "void linphone_call_set_user_data (\fBLinphoneCall\fP * call, void * ud)"

.PP
Assign a user pointer to the call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP The call\&. 
.br
\fIud\fP The user pointer to associate with the call\&. 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_call_take_preview_snapshot (\fBLinphoneCall\fP * call, const char * file)"

.PP
Take a photo of currently captured video and write it into a jpeg file\&. Note that the snapshot is asynchronous, an application shall not assume that the file is created when the function returns\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP a LinphoneCall 
.br
\fIfile\fP a path where to write the jpeg content\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successfull, -1 otherwise (typically if jpeg format is not supported)\&. 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_call_take_video_snapshot (\fBLinphoneCall\fP * call, const char * file)"

.PP
Take a photo of currently received video and write it into a jpeg file\&. Note that the snapshot is asynchronous, an application shall not assume that the file is created when the function returns\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP a LinphoneCall 
.br
\fIfile\fP a path where to write the jpeg content\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successfull, -1 otherwise (typically if jpeg format is not supported)\&. 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_call_terminate (\fBLinphoneCall\fP * call)"

.PP
Terminates a call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP LinphoneCall object 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on failure 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_call_terminate_with_error_info (\fBLinphoneCall\fP * call, const \fBLinphoneErrorInfo\fP * ei)"

.PP
Terminates a call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP LinphoneCall object 
.br
\fIei\fP LinphoneErrorInfo 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on failure 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_call_transfer (\fBLinphoneCall\fP * call, const char * refer_to)"

.PP
Performs a simple call transfer to the specified destination\&. The remote endpoint is expected to issue a new call to the specified destination\&. The current call remains active and thus can be later paused or terminated\&. It is possible to follow the progress of the transfer provided that transferee sends notification about it\&. In this case, the transfer_state_changed callback of the \fBLinphoneCoreVTable\fP is invoked to notify of the state of the new call at the other party\&. The notified states are \fBLinphoneCallOutgoingInit\fP , \fBLinphoneCallOutgoingProgress\fP, \fBLinphoneCallOutgoingRinging\fP and \fBLinphoneCallConnected\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP The call to be transfered 
.br
\fIrefer_to\fP The destination the call is to be refered to 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on failure 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_call_transfer_to_another (\fBLinphoneCall\fP * call, \fBLinphoneCall\fP * dest)"

.PP
Transfers a call to destination of another running call\&. This is used for 'attended transfer' scenarios\&. The transfered call is supposed to be in paused state, so that it is able to accept the transfer immediately\&. The destination call is a call previously established to introduce the transfered person\&. This method will send a transfer request to the transfered person\&. The phone of the transfered is then expected to automatically call to the destination of the transfer\&. The receiver of the transfer will then automatically close the call with us (the 'dest' call)\&. It is possible to follow the progress of the transfer provided that transferee sends notification about it\&. In this case, the transfer_state_changed callback of the \fBLinphoneCoreVTable\fP is invoked to notify of the state of the new call at the other party\&. The notified states are \fBLinphoneCallOutgoingInit\fP , \fBLinphoneCallOutgoingProgress\fP, \fBLinphoneCallOutgoingRinging\fP and \fBLinphoneCallConnected\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP A running call you want to transfer 
.br
\fIdest\fP A running call whose remote person will receive the transfer 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on failure 
.RE
.PP

.SS "void linphone_call_unref (\fBLinphoneCall\fP * call)"

.PP
Release reference to the call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP The call\&. 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_call_update (\fBLinphoneCall\fP * call, const \fBLinphoneCallParams\fP * params)"

.PP
Updates a running call according to supplied call parameters or parameters changed in the LinphoneCore\&. In this version this is limited to the following use cases:
.IP "\(bu" 2
setting up/down the video stream according to the video parameter of the LinphoneCallParams (see \fBlinphone_call_params_enable_video()\fP )\&.
.IP "\(bu" 2
changing the size of the transmitted video after calling \fBlinphone_core_set_preferred_video_size()\fP In case no changes are requested through the LinphoneCallParams argument, then this argument can be omitted and set to NULL\&. WARNING: Updating a call in the LinphoneCallPaused state will still result in a paused call even if the media directions set in the params are sendrecv\&. To resume a paused call, you need to call \fBlinphone_call_resume()\fP\&.
.PP
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP A LinphoneCall object 
.br
\fIparams\fP The new call parameters to use (may be NULL) 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, -1 otherwise\&. 
.RE
.PP

.SS "void linphone_call_zoom_video (\fBLinphoneCall\fP * call, float zoom_factor, float * cx, float * cy)"

.PP
Perform a zoom of the video displayed during a call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP the call\&. 
.br
\fIzoom_factor\fP a floating point number describing the zoom factor\&. A value 1\&.0 corresponds to no zoom applied\&. 
.br
\fIcx\fP a floating point number pointing the horizontal center of the zoom to be applied\&. This value should be between 0\&.0 and 1\&.0\&. 
.br
\fIcy\fP a floating point number pointing the vertical center of the zoom to be applied\&. This value should be between 0\&.0 and 1\&.0\&.
.RE
.PP
cx and cy are updated in return in case their coordinates were too excentrated for the requested zoom factor\&. The zoom ensures that all the screen is fullfilled with the video\&. 
.SS "bctbx_list_t* linphone_conference_get_participants (const \fBLinphoneConference\fP * obj)"

.PP
Get URIs of all participants of one conference The returned bctbx_list_t contains URIs of all participant\&. That list must be freed after use and each URI must be unref with \fBlinphone_address_unref()\fP 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP A \fBLinphoneConference\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
A list of \fBLinphoneAddress\fP objects\&. 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_conference_invite_participants (\fBLinphoneConference\fP * conf, const bctbx_list_t * addresses, const \fBLinphoneCallParams\fP * params)"

.PP
Invite participants to the conference, by supplying a list of LinphoneAddress\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP The conference\&. 
.br
\fIaddresses\fP A list of \fBLinphoneAddress\fP objects\&. 
.br
\fIparams\fP \fBLinphoneCallParams\fP to use for inviting the participants\&. 
.RE
.PP

.SS "\fBLinphoneConferenceParams\fP* linphone_conference_params_clone (const \fBLinphoneConferenceParams\fP * params)"

.PP
Clone a \fBLinphoneConferenceParams\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparams\fP The \fBLinphoneConferenceParams\fP to clone 
.RE
.PP
\fBReturns:\fP
.RS 4
An allocated \fBLinphoneConferenceParams\fP with the same parameters than params 
.RE
.PP

.SS "void linphone_conference_params_enable_video (\fBLinphoneConferenceParams\fP * params, bool_t enable)"

.PP
Enable video when starting a conference\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparams\fP A \fBLinphoneConferenceParams\fP 
.br
\fIenable\fP If true, video will be enabled during conference 
.RE
.PP

.SS "LINPHONE_DEPRECATED void linphone_conference_params_free (\fBLinphoneConferenceParams\fP * params)"

.PP
Free a \fBLinphoneConferenceParams\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparams\fP \fBLinphoneConferenceParams\fP to free 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_conference_params_unref()\fP instead\&.  
.RE
.PP

.SS "\fBLinphoneConferenceParams\fP* linphone_conference_params_new (const \fBLinphoneCore\fP * core)"

.PP
Create a \fBLinphoneConferenceParams\fP with default parameters set\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcore\fP \fBLinphoneCore\fP to use to find out the default parameters\&. Can be NULL\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A freshly allocated \fBLinphoneConferenceParams\fP 
.RE
.PP

.SS "\fBLinphoneConferenceParams\fP* linphone_conference_params_ref (\fBLinphoneConferenceParams\fP * params)"

.PP
Take a reference on a #LinphoneConferencParams\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparams\fP The \fBLinphoneConferenceParams\fP to ref\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The freshly refed \fBLinphoneConferenceParams\fP\&. 
.RE
.PP

.SS "void linphone_conference_params_unref (\fBLinphoneConferenceParams\fP * params)"

.PP
Release a \fBLinphoneConferenceParams\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparams\fP The \fBLinphoneConferenceParams\fP to release\&. 
.RE
.PP

.SS "bool_t linphone_conference_params_video_requested (const \fBLinphoneConferenceParams\fP * params)"

.PP
Check whether video will be enable at conference starting\&. 
.PP
\fBReturns:\fP
.RS 4
if true, the video will be enable at conference starting 
.RE
.PP

.SS "\fBLinphoneConference\fP* linphone_conference_ref (\fBLinphoneConference\fP * conf)"

.PP
Take a reference on a \fBLinphoneConference\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIconf\fP The \fBLinphoneConference\fP to ref\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The freshly refed \fBLinphoneConference\fP\&. 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_conference_remove_participant (\fBLinphoneConference\fP * obj, const \fBLinphoneAddress\fP * uri)"

.PP
Remove a participant from a conference\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP A \fBLinphoneConference\fP 
.br
\fIuri\fP SIP URI of the participant to remove 
.RE
.PP
\fBWarning:\fP
.RS 4
The passed SIP URI must be one of the URIs returned by \fBlinphone_conference_get_participants()\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if succeeded, -1 if failed 
.RE
.PP

.SS "void linphone_conference_unref (\fBLinphoneConference\fP * conf)"

.PP
Release a \fBLinphoneConference\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIconf\fP The \fBLinphoneConference\fP to release\&. 
.RE
.PP

.SS "LINPHONE_DEPRECATED \fBLinphoneStatus\fP linphone_core_accept_call (\fBLinphoneCore\fP * lc, \fBLinphoneCall\fP * call)"

.PP
Accept an incoming call\&. Basically the application is notified of incoming calls within the call_state_changed callback of the \fBLinphoneCoreVTable\fP structure, where it will receive a LinphoneCallIncoming event with the associated LinphoneCall object\&. The application can later accept the call using this method\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIcall\fP The LinphoneCall object representing the call to be answered 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on failure
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_call_accept()\fP instead 
.RE
.PP

.SS "LINPHONE_DEPRECATED \fBLinphoneStatus\fP linphone_core_accept_call_update (\fBLinphoneCore\fP * lc, \fBLinphoneCall\fP * call, const \fBLinphoneCallParams\fP * params)"

.PP
Accept call modifications initiated by other end\&. This call may be performed in response to a \fBLinphoneCallUpdatedByRemote\fP state notification\&. When such notification arrives, the application can decide to call linphone_core_defer_update_call() so that it can have the time to prompt the user\&. \fBlinphone_call_get_remote_params()\fP can be used to get information about the call parameters requested by the other party, such as whether a video stream is requested\&.
.PP
When the user accepts or refuse the change, \fBlinphone_core_accept_call_update()\fP can be done to answer to the other party\&. If params is NULL, then the same call parameters established before the update request will continue to be used (no change)\&. If params is not NULL, then the update will be accepted according to the parameters passed\&. Typical example is when a user accepts to start video, then params should indicate that video stream should be used (see \fBlinphone_call_params_enable_video()\fP)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIcall\fP The call for which to accept an update 
.br
\fIparams\fP A LinphoneCallParams object describing the call parameters to accept 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, -1 otherwise (actually when this function call is performed outside ot \fBLinphoneCallUpdatedByRemote\fP state)
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_call_accept_update()\fP instead 
.RE
.PP

.SS "LINPHONE_DEPRECATED \fBLinphoneStatus\fP linphone_core_accept_call_with_params (\fBLinphoneCore\fP * lc, \fBLinphoneCall\fP * call, const \fBLinphoneCallParams\fP * params)"

.PP
Accept an incoming call, with parameters\&. Basically the application is notified of incoming calls within the call_state_changed callback of the \fBLinphoneCoreVTable\fP structure, where it will receive a LinphoneCallIncoming event with the associated LinphoneCall object\&. The application can later accept the call using this method\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIcall\fP The LinphoneCall object representing the call to be answered 
.br
\fIparams\fP The specific parameters for this call, for example whether video is accepted or not\&. Use NULL to use default parameters 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on failure
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_call_accept_with_params()\fP instead 
.RE
.PP

.SS "LINPHONE_DEPRECATED \fBLinphoneStatus\fP linphone_core_accept_early_media (\fBLinphoneCore\fP * lc, \fBLinphoneCall\fP * call)"

.PP
Accept an early media session for an incoming call\&. This is identical as calling \fBlinphone_core_accept_early_media_with_params()\fP with NULL call parameters\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIcall\fP The incoming call to accept 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, -1 otherwise
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlinphone_core_accept_early_media_with_params()\fP 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_call_accept_early_media()\fP instead 
.RE
.PP

.SS "LINPHONE_DEPRECATED \fBLinphoneStatus\fP linphone_core_accept_early_media_with_params (\fBLinphoneCore\fP * lc, \fBLinphoneCall\fP * call, const \fBLinphoneCallParams\fP * params)"

.PP
When receiving an incoming, accept to start a media session as early-media\&. This means the call is not accepted but audio & video streams can be established if the remote party supports early media\&. However, unlike after call acceptance, mic and camera input are not sent during early-media, though received audio & video are played normally\&. The call can then later be fully accepted using \fBlinphone_core_accept_call()\fP or \fBlinphone_core_accept_call_with_params()\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIcall\fP The call to accept 
.br
\fIparams\fP The call parameters to use (can be NULL) 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, -1 otherwise
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_call_accept_early_media_with_params()\fP instead 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_core_add_all_to_conference (\fBLinphoneCore\fP * lc)"

.PP
Add all current calls into the conference\&. If no conference is running a new internal conference context is created and all current calls are added to it\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if succeeded\&. Negative number if failed 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_core_add_to_conference (\fBLinphoneCore\fP * lc, \fBLinphoneCall\fP * call)"

.PP
Add a participant to the conference\&. If no conference is going on a new internal conference context is created and the participant is added to it\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP 
.br
\fIcall\fP The current call with the participant to add 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if succeeded\&. Negative number if failed 
.RE
.PP

.SS "\fBLinphoneCallParams\fP* linphone_core_create_call_params (\fBLinphoneCore\fP * lc, \fBLinphoneCall\fP * call)"

.PP
Create a LinphoneCallParams suitable for \fBlinphone_core_invite_with_params()\fP, \fBlinphone_core_accept_call_with_params()\fP, \fBlinphone_core_accept_early_media_with_params()\fP, \fBlinphone_core_accept_call_update()\fP\&. The parameters are initialized according to the current LinphoneCore configuration and the current state of the LinphoneCall\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIcall\fP LinphoneCall for which the parameters are to be build, or NULL in the case where the parameters are to be used for a new outgoing call\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A new LinphoneCallParams object 
.RE
.PP

.SS "\fBLinphoneConferenceParams\fP* linphone_core_create_conference_params (\fBLinphoneCore\fP * lc)"

.PP
Create some default conference parameters for instanciating a a conference with \fBlinphone_core_create_conference_with_params()\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the core 
.RE
.PP
\fBReturns:\fP
.RS 4
conference parameters\&. 
.RE
.PP

.SS "\fBLinphoneConference\fP* linphone_core_create_conference_with_params (\fBLinphoneCore\fP * lc, const \fBLinphoneConferenceParams\fP * params)"

.PP
Create a conference\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The \fBLinphoneCore\fP instance where the conference will be created inside\&. 
.br
\fIparams\fP Parameters of the conference\&. See \fBLinphoneConferenceParams\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer on the freshly created conference\&. That object will be automatically freed by the core after calling \fBlinphone_core_terminate_conference()\fP\&. 
.RE
.PP

.SS "LINPHONE_DEPRECATED \fBLinphoneStatus\fP linphone_core_decline_call (\fBLinphoneCore\fP * lc, \fBLinphoneCall\fP * call, \fBLinphoneReason\fP reason)"

.PP
Decline a pending incoming call, with a reason\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIcall\fP The LinphoneCall to decline, must be in the IncomingReceived state 
.br
\fIreason\fP The reason for rejecting the call: LinphoneReasonDeclined or LinphoneReasonBusy 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on failure
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_call_decline()\fP instead 
.RE
.PP

.SS "LINPHONE_DEPRECATED \fBLinphoneStatus\fP linphone_core_defer_call_update (\fBLinphoneCore\fP * lc, \fBLinphoneCall\fP * call)"

.PP
When receiving a \fBLinphoneCallUpdatedByRemote\fP state notification, prevent LinphoneCore from performing an automatic answer\&. When receiving a \fBLinphoneCallUpdatedByRemote\fP state notification (ie an incoming reINVITE), the default behaviour of LinphoneCore is defined by the 'defer_update_default' option of the 'sip' section of the config\&. If this option is 0 (the default) then the LinphoneCore automatically answers the reINIVTE with call parameters unchanged\&. However when for example when the remote party updated the call to propose a video stream, it can be useful to prompt the user before answering\&. This can be achieved by calling \fBlinphone_core_defer_call_update()\fP during the call state notification, to deactivate the automatic answer that would just confirm the audio but reject the video\&. Then, when the user responds to dialog prompt, it becomes possible to call \fBlinphone_core_accept_call_update()\fP to answer the reINVITE, with eventually video enabled in the LinphoneCallParams argument\&.
.PP
The \fBLinphoneCallUpdatedByRemote\fP notification can also arrive when receiving an INVITE without SDP\&. In such case, an unchanged offer is made in the 200Ok, and when the ACK containing the SDP answer is received, \fBLinphoneCallUpdatedByRemote\fP is triggered to notify the application of possible changes in the media session\&. However in such case defering the update has no meaning since we just generating an offer\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIcall\fP The call for which to defer the update 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, -1 if the \fBlinphone_core_defer_call_update()\fP was done outside a valid \fBLinphoneCallUpdatedByRemote\fP notification
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_call_defer_update()\fP instead 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_core_enter_conference (\fBLinphoneCore\fP * lc)"

.PP
Join the local participant to the running conference\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if succeeded\&. Negative number if failed 
.RE
.PP

.SS "\fBLinphoneCall\fP* linphone_core_find_call_from_uri (const \fBLinphoneCore\fP * lc, const char * uri)"

.PP
Search from the list of current calls if a remote address match uri\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP 
.br
\fIuri\fP which should match call remote uri 
.RE
.PP
\fBReturns:\fP
.RS 4
LinphoneCall or NULL is no match is found 
.RE
.PP

.SS "\fBLinphoneCall\fP* linphone_core_get_call_by_remote_address (const \fBLinphoneCore\fP * lc, const char * remote_address)"

.PP
Get the call with the remote_address specified\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIremote_address\fP The remote address of the call that we want to get 
.RE
.PP
\fBReturns:\fP
.RS 4
The call if it has been found, NULL otherwise 
.RE
.PP

.SS "\fBLinphoneCall\fP* linphone_core_get_call_by_remote_address2 (const \fBLinphoneCore\fP * lc, const \fBLinphoneAddress\fP * remote_address)"

.PP
Get the call with the remote_address specified\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP 
.br
\fIremote_address\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the LinphoneCall of the call if found 
.RE
.PP

.SS "const bctbx_list_t* linphone_core_get_calls (\fBLinphoneCore\fP * lc)"

.PP
Gets the current list of calls\&. Note that this list is read-only and might be changed by the core after a function call to \fBlinphone_core_iterate()\fP\&. Similarly the LinphoneCall objects inside it might be destroyed without prior notice\&. To hold references to LinphoneCall object into your program, you must use \fBlinphone_call_ref()\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
A list of \fBLinphoneCall\fP objects\&. 
.RE
.PP

.SS "int linphone_core_get_calls_nb (const \fBLinphoneCore\fP * lc)"

.PP
Get the number of Call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The current number of calls 
.RE
.PP

.SS "\fBLinphoneConference\fP* linphone_core_get_conference (\fBLinphoneCore\fP * lc)"

.PP
Get a pointer on the internal conference object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer on \fBLinphoneConference\fP or NULL if no conference are going on 
.RE
.PP

.SS "float linphone_core_get_conference_local_input_volume (\fBLinphoneCore\fP * lc)"

.PP
Get the set input volume of the local participant\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
A value inside [0\&.0 ; 1\&.0] 
.RE
.PP

.SS "int linphone_core_get_conference_size (\fBLinphoneCore\fP * lc)"

.PP
Get the number of participant in the running conference\&. The local participant is included in the count only if it is in the conference\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of participant 
.RE
.PP

.SS "\fBLinphoneCall\fP* linphone_core_get_current_call (const \fBLinphoneCore\fP * lc)"

.PP
Gets the current call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The current call or NULL if no call is running 
.RE
.PP

.SS "const \fBLinphoneAddress\fP* linphone_core_get_current_call_remote_address (\fBLinphoneCore\fP * lc)"

.PP
Get the remote address of the current call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The remote address of the current call or NULL if there is no current call\&. 
.RE
.PP

.SS "int linphone_core_get_delayed_timeout (\fBLinphoneCore\fP * lc)"

.PP
Gets the delayed timeout See \fBlinphone_core_set_delayed_timeout()\fP for details\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The current delayed timeout in seconds 
.RE
.PP

.SS "int linphone_core_get_in_call_timeout (\fBLinphoneCore\fP * lc)"

.PP
Gets the in call timeout See \fBlinphone_core_set_in_call_timeout()\fP for details\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The current in call timeout in seconds 
.RE
.PP

.SS "int linphone_core_get_inc_timeout (\fBLinphoneCore\fP * lc)"

.PP
Returns the incoming call timeout See \fBlinphone_core_set_inc_timeout()\fP for details\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The current incoming call timeout in seconds 
.RE
.PP

.SS "bool_t linphone_core_in_call (const \fBLinphoneCore\fP * lc)"

.PP
Tells whether there is a call running\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean value telling whether a call is currently running or not 
.RE
.PP

.SS "\fBLinphoneCall\fP* linphone_core_invite (\fBLinphoneCore\fP * lc, const char * url)"

.PP
Initiates an outgoing call The application doesn't own a reference to the returned LinphoneCall object\&. Use \fBlinphone_call_ref()\fP to safely keep the LinphoneCall pointer valid within your application\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIurl\fP The destination of the call (sip address, or phone number)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A LinphoneCall object or NULL in case of failure 
.RE
.PP

.SS "\fBLinphoneCall\fP* linphone_core_invite_address (\fBLinphoneCore\fP * lc, const \fBLinphoneAddress\fP * addr)"

.PP
Initiates an outgoing call given a destination LinphoneAddress The LinphoneAddress can be constructed directly using \fBlinphone_address_new()\fP, or created by \fBlinphone_core_interpret_url()\fP\&. The application doesn't own a reference to the returned LinphoneCall object\&. Use \fBlinphone_call_ref()\fP to safely keep the LinphoneCall pointer valid within your application\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIaddr\fP The destination of the call (sip address)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A LinphoneCall object or NULL in case of failure 
.RE
.PP

.SS "\fBLinphoneCall\fP* linphone_core_invite_address_with_params (\fBLinphoneCore\fP * lc, const \fBLinphoneAddress\fP * addr, const \fBLinphoneCallParams\fP * params)"

.PP
Initiates an outgoing call given a destination LinphoneAddress The LinphoneAddress can be constructed directly using \fBlinphone_address_new()\fP, or created by \fBlinphone_core_interpret_url()\fP\&. The application doesn't own a reference to the returned LinphoneCall object\&. Use \fBlinphone_call_ref()\fP to safely keep the LinphoneCall pointer valid within your application\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIaddr\fP The destination of the call (sip address)\&. 
.br
\fIparams\fP Call parameters 
.RE
.PP
\fBReturns:\fP
.RS 4
A LinphoneCall object or NULL in case of failure 
.RE
.PP

.SS "\fBLinphoneCall\fP* linphone_core_invite_with_params (\fBLinphoneCore\fP * lc, const char * url, const \fBLinphoneCallParams\fP * params)"

.PP
Initiates an outgoing call according to supplied call parameters The application doesn't own a reference to the returned LinphoneCall object\&. Use \fBlinphone_call_ref()\fP to safely keep the LinphoneCall pointer valid within your application\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIurl\fP The destination of the call (sip address, or phone number)\&. 
.br
\fIparams\fP Call parameters 
.RE
.PP
\fBReturns:\fP
.RS 4
A LinphoneCall object or NULL in case of failure 
.RE
.PP

.SS "bool_t linphone_core_is_in_conference (const \fBLinphoneCore\fP * lc)"

.PP
Indicates whether the local participant is part of a conference\&. 
.PP
\fBWarning:\fP
.RS 4
That function automatically fails in the case of conferences using a conferencet server (focus)\&. If you use such a conference, you should use \fBlinphone_conference_remove_participant()\fP instead\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the linphone core 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if the local participant is in a conference, FALSE otherwise\&. 
.RE
.PP

.SS "bool_t linphone_core_is_incoming_invite_pending (\fBLinphoneCore\fP * lc)"

.PP
Tells whether there is an incoming invite pending\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean telling whether an incoming invite is pending or not\&. 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_core_leave_conference (\fBLinphoneCore\fP * lc)"

.PP
Make the local participant leave the running conference\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if succeeded\&. Negative number if failed 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_core_pause_all_calls (\fBLinphoneCore\fP * lc)"

.PP
Pause all currently running calls\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
0 
.RE
.PP

.SS "LINPHONE_DEPRECATED \fBLinphoneStatus\fP linphone_core_pause_call (\fBLinphoneCore\fP * lc, \fBLinphoneCall\fP * call)"

.PP
Pauses the call\&. If a music file has been setup using \fBlinphone_core_set_play_file()\fP, this file will be played to the remote user\&. The only way to resume a paused call is to call \fBlinphone_core_resume_call()\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIcall\fP The call to pause 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on failure
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlinphone_core_resume_call()\fP 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_call_pause()\fP instead 
.RE
.PP

.SS "LINPHONE_DEPRECATED \fBLinphoneStatus\fP linphone_core_redirect_call (\fBLinphoneCore\fP * lc, \fBLinphoneCall\fP * call, const char * redirect_uri)"

.PP
Redirect the specified call to the given redirect URI\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIcall\fP The \fBLinphoneCall\fP to redirect 
.br
\fIredirect_uri\fP The URI to redirect the call to 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, -1 on error\&.
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_call_redirect()\fP instead 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_core_remove_from_conference (\fBLinphoneCore\fP * lc, \fBLinphoneCall\fP * call)"

.PP
Remove a call from the conference\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the linphone core 
.br
\fIcall\fP a call that has been previously merged into the conference\&.
.RE
.PP
After removing the remote participant belonging to the supplied call, the call becomes a normal call in paused state\&. If one single remote participant is left alone together with the local user in the conference after the removal, then the conference is automatically transformed into a simple call in StreamsRunning state\&. The conference's resources are then automatically destroyed\&.
.PP
In other words, unless \fBlinphone_core_leave_conference()\fP is explicitly called, the last remote participant of a conference is automatically put in a simple call in running state\&.
.PP
\fBReturns:\fP
.RS 4
0 if successful, -1 otherwise\&. 
.RE
.PP

.SS "LINPHONE_DEPRECATED \fBLinphoneStatus\fP linphone_core_resume_call (\fBLinphoneCore\fP * lc, \fBLinphoneCall\fP * call)"

.PP
Resumes a call\&. The call needs to have been paused previously with \fBlinphone_core_pause_call()\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIcall\fP The call to resume 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on failure
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlinphone_core_pause_call()\fP 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_call_resume()\fP instead 
.RE
.PP

.SS "void linphone_core_set_delayed_timeout (\fBLinphoneCore\fP * lc, int seconds)"

.PP
Set the in delayed timeout in seconds\&. After this timeout period, a delayed call (internal call initialisation or resolution) is resumed\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIseconds\fP The new delayed timeout 
.RE
.PP

.SS "void linphone_core_set_in_call_timeout (\fBLinphoneCore\fP * lc, int seconds)"

.PP
Set the in call timeout in seconds\&. After this timeout period, the call is automatically hangup\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIseconds\fP The new timeout in seconds 
.RE
.PP

.SS "void linphone_core_set_inc_timeout (\fBLinphoneCore\fP * lc, int seconds)"

.PP
Set the incoming call timeout in seconds\&. If an incoming call isn't answered for this timeout period, it is automatically declined\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIseconds\fP The new timeout in seconds 
.RE
.PP

.SS "bool_t linphone_core_sound_resources_locked (\fBLinphoneCore\fP * lc)"

.PP
Check if a call will need the sound resources in near future (typically an outgoing call that is awaiting response)\&. In liblinphone, it is not possible to have two independant calls using sound device or camera at the same time\&. In order to prevent this situation, an application can use \fBlinphone_core_sound_resources_locked()\fP to know whether it is possible at a given time to start a new outgoing call\&. When the function returns TRUE, an application should not allow the user to start an outgoing call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean value telling whether a call will need the sound resources in near future 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_core_start_conference_recording (\fBLinphoneCore\fP * lc, const char * path)"

.PP
Start recording the running conference\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP 
.br
\fIpath\fP Path to the file where the recording will be written 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if succeeded\&. Negative number if failed 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_core_stop_conference_recording (\fBLinphoneCore\fP * lc)"

.PP
Stop recording the running conference\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if succeeded\&. Negative number if failed 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_core_terminate_all_calls (\fBLinphoneCore\fP * lc)"

.PP
Terminates all the calls\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
0 
.RE
.PP

.SS "LINPHONE_DEPRECATED \fBLinphoneStatus\fP linphone_core_terminate_call (\fBLinphoneCore\fP * lc, \fBLinphoneCall\fP * call)"

.PP
Terminates a call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIcall\fP The LinphoneCall object representing the call to be terminated 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on failure
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_call_terminate()\fP instead 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_core_terminate_conference (\fBLinphoneCore\fP * lc)"

.PP
Terminate the running conference\&. If it is a local conference, all calls inside it will become back separate calls and will be put in \fBLinphoneCallPaused\fP state\&. If it is a conference involving a focus server, all calls inside the conference will be terminated\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if succeeded\&. Negative number if failed 
.RE
.PP

.SS "LINPHONE_DEPRECATED \fBLinphoneStatus\fP linphone_core_transfer_call (\fBLinphoneCore\fP * lc, \fBLinphoneCall\fP * call, const char * refer_to)"

.PP
Performs a simple call transfer to the specified destination\&. The remote endpoint is expected to issue a new call to the specified destination\&. The current call remains active and thus can be later paused or terminated\&. It is possible to follow the progress of the transfer provided that transferee sends notification about it\&. In this case, the transfer_state_changed callback of the \fBLinphoneCoreVTable\fP is invoked to notify of the state of the new call at the other party\&. The notified states are \fBLinphoneCallOutgoingInit\fP , \fBLinphoneCallOutgoingProgress\fP, \fBLinphoneCallOutgoingRinging\fP and \fBLinphoneCallConnected\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIcall\fP The call to be transfered 
.br
\fIrefer_to\fP The destination the call is to be refered to 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on failure
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_call_transfer()\fP instead 
.RE
.PP

.SS "LINPHONE_DEPRECATED \fBLinphoneStatus\fP linphone_core_transfer_call_to_another (\fBLinphoneCore\fP * lc, \fBLinphoneCall\fP * call, \fBLinphoneCall\fP * dest)"

.PP
Transfers a call to destination of another running call\&. This is used for 'attended transfer' scenarios\&. The transfered call is supposed to be in paused state, so that it is able to accept the transfer immediately\&. The destination call is a call previously established to introduce the transfered person\&. This method will send a transfer request to the transfered person\&. The phone of the transfered is then expected to automatically call to the destination of the transfer\&. The receiver of the transfer will then automatically close the call with us (the 'dest' call)\&. It is possible to follow the progress of the transfer provided that transferee sends notification about it\&. In this case, the transfer_state_changed callback of the \fBLinphoneCoreVTable\fP is invoked to notify of the state of the new call at the other party\&. The notified states are \fBLinphoneCallOutgoingInit\fP , \fBLinphoneCallOutgoingProgress\fP, \fBLinphoneCallOutgoingRinging\fP and \fBLinphoneCallConnected\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIcall\fP A running call you want to transfer 
.br
\fIdest\fP A running call whose remote person will receive the transfer 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on failure
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_call_transfer_to_another()\fP instead 
.RE
.PP

.SS "LINPHONE_DEPRECATED \fBLinphoneStatus\fP linphone_core_update_call (\fBLinphoneCore\fP * lc, \fBLinphoneCall\fP * call, const \fBLinphoneCallParams\fP * params)"

.PP
Updates a running call according to supplied call parameters or parameters changed in the LinphoneCore\&. In this version this is limited to the following use cases:
.IP "\(bu" 2
setting up/down the video stream according to the video parameter of the LinphoneCallParams (see \fBlinphone_call_params_enable_video()\fP )\&.
.IP "\(bu" 2
changing the size of the transmitted video after calling \fBlinphone_core_set_preferred_video_size()\fP In case no changes are requested through the LinphoneCallParams argument, then this argument can be omitted and set to NULL\&. WARNING: Updating a call in the LinphoneCallPaused state will still result in a paused call even if the media directions set in the params are sendrecv\&. To resume a paused call, you need to call \fBlinphone_core_resume_call()\fP\&.
.PP
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIcall\fP The call to be updated 
.br
\fIparams\fP The new call parameters to use (may be NULL) 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, -1 otherwise\&.
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_call_update()\fP instead 
.RE
.PP

.SS "\fBLinphonePlayerCbsEofReachedCb\fP linphone_player_cbs_get_eof_reached (const \fBLinphonePlayerCbs\fP * cbs)"

.PP
Get the end-of-file reached callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP LinphonePlayerCbs object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The current end-of-file reached callback\&. 
.RE
.PP

.SS "void* linphone_player_cbs_get_user_data (const \fBLinphonePlayerCbs\fP * cbs)"

.PP
Retrieve the user pointer associated with the LinphonePlayerCbs object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP LinphonePlayerCbs object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The user pointer associated with the LinphonePlayerCbs object\&. 
.RE
.PP

.SS "\fBLinphonePlayerCbs\fP* linphone_player_cbs_ref (\fBLinphonePlayerCbs\fP * cbs)"

.PP
Acquire a reference to the LinphonePlayerCbs object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP LinphonePlayerCbs object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The same LinphonePlayerCbs object\&. 
.RE
.PP

.SS "void linphone_player_cbs_set_eof_reached (\fBLinphonePlayerCbs\fP * cbs, \fBLinphonePlayerCbsEofReachedCb\fP cb)"

.PP
Set the end-of-file reached callback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP LinphonePlayerCbs object\&. 
.br
\fIcb\fP The end-of-file reached callback to be used\&. 
.RE
.PP

.SS "void linphone_player_cbs_set_user_data (\fBLinphonePlayerCbs\fP * cbs, void * ud)"

.PP
Assign a user pointer to the LinphonePlayerCbs object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP LinphonePlayerCbs object\&. 
.br
\fIud\fP The user pointer to associate with the LinphonePlayerCbs object\&. 
.RE
.PP

.SS "void linphone_player_cbs_unref (\fBLinphonePlayerCbs\fP * cbs)"

.PP
Release reference to the LinphonePlayerCbs object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcbs\fP LinphonePlayerCbs object\&. 
.RE
.PP

.SS "void linphone_player_close (\fBLinphonePlayer\fP * obj)"

.PP
Close the opened file\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP LinphonePlayer object 
.RE
.PP

.SS "\fBLinphonePlayerCbs\fP* linphone_player_get_callbacks (const \fBLinphonePlayer\fP * player)"

.PP
Get the LinphonePlayerCbs object associated with the LinphonePlayer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIplayer\fP LinphonePlayer object 
.RE
.PP
\fBReturns:\fP
.RS 4
The LinphonePlayerCbs object associated with the LinphonePlayer\&. 
.RE
.PP

.SS "int linphone_player_get_current_position (\fBLinphonePlayer\fP * obj)"

.PP
Get the current position in the opened file\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP LinphonePlayer object 
.RE
.PP
\fBReturns:\fP
.RS 4
The current position in the opened file 
.RE
.PP

.SS "int linphone_player_get_duration (\fBLinphonePlayer\fP * obj)"

.PP
Get the duration of the opened file\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP LinphonePlayer object 
.RE
.PP
\fBReturns:\fP
.RS 4
The duration of the opened file 
.RE
.PP

.SS "\fBLinphonePlayerState\fP linphone_player_get_state (\fBLinphonePlayer\fP * obj)"

.PP
Get the current state of a player\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP LinphonePlayer object 
.RE
.PP
\fBReturns:\fP
.RS 4
The current state of the player\&. 
.RE
.PP

.SS "void* linphone_player_get_user_data (const \fBLinphonePlayer\fP * player)"

.PP
Retrieve the user pointer associated with the player\&. 
.PP
\fBParameters:\fP
.RS 4
\fIplayer\fP LinphonePlayer object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The user pointer associated with the player\&. 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_player_open (\fBLinphonePlayer\fP * obj, const char * filename)"

.PP
Open a file for playing\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP LinphonePlayer object 
.br
\fIfilename\fP The path to the file to open 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_player_pause (\fBLinphonePlayer\fP * obj)"

.PP
Pause the playing of a file\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP LinphonePlayer object 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, a negative value otherwise 
.RE
.PP

.SS "\fBLinphonePlayer\fP* linphone_player_ref (\fBLinphonePlayer\fP * player)"

.PP
Acquire a reference to the player\&. 
.PP
\fBParameters:\fP
.RS 4
\fIplayer\fP LinphonePlayer object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The same LinphonePlayer object\&. 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_player_seek (\fBLinphonePlayer\fP * obj, int time_ms)"

.PP
Seek in an opened file\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP LinphonePlayer object 
.br
\fItime_ms\fP The time we want to go to in the file (in milliseconds)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, a negative value otherwise\&. 
.RE
.PP

.SS "void linphone_player_set_user_data (\fBLinphonePlayer\fP * player, void * ud)"

.PP
Assign a user pointer to the player\&. 
.PP
\fBParameters:\fP
.RS 4
\fIplayer\fP LinphonePlayer object\&. 
.br
\fIud\fP The user pointer to associate with the player\&. 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_player_start (\fBLinphonePlayer\fP * obj)"

.PP
Start playing a file that has been opened with \fBlinphone_player_open()\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP LinphonePlayer object 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, a negative value otherwise 
.RE
.PP

.SS "void linphone_player_unref (\fBLinphonePlayer\fP * player)"

.PP
Release reference to the player\&. 
.PP
\fBParameters:\fP
.RS 4
\fIplayer\fP LinphonePlayer object\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Liblinphone from the source code\&.
