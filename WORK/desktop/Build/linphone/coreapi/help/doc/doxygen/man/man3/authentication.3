.TH "authentication" 3 "Thu Dec 14 2017" "Version 3.12.0" "Liblinphone" \" -*- nroff -*-
.ad l
.nh
.SH NAME
authentication \- Managing authentication: userid and passwords\&.  

.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBLINPHONE_AUTH_INFO\fP(obj)   BELLE_SIP_CAST(obj, \fBLinphoneAuthInfo\fP)"
.br
.RI "Safely cast a belle_sip_object_t into LinphoneAuthInfo\&. "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct _LinphoneAuthInfo \fBLinphoneAuthInfo\fP"
.br
.RI "Object holding authentication information\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBLinphoneAuthInfo\fP * \fBlinphone_auth_info_new\fP (const char *username, const char *userid, const char *passwd, const char *ha1, const char *realm, const char *domain)"
.br
.RI "Creates a \fBLinphoneAuthInfo\fP object with supplied information\&. "
.ti -1c
.RI "\fBLinphoneAuthInfo\fP * \fBlinphone_auth_info_clone\fP (const \fBLinphoneAuthInfo\fP *source)"
.br
.RI "Instantiates a new auth info with values from source\&. "
.ti -1c
.RI "\fBLinphoneAuthInfo\fP * \fBlinphone_auth_info_ref\fP (\fBLinphoneAuthInfo\fP *info)"
.br
.RI "Take a reference on a \fBLinphoneAuthInfo\fP\&. "
.ti -1c
.RI "void \fBlinphone_auth_info_unref\fP (\fBLinphoneAuthInfo\fP *info)"
.br
.RI "Release a \fBLinphoneAuthInfo\fP\&. "
.ti -1c
.RI "void \fBlinphone_auth_info_set_passwd\fP (\fBLinphoneAuthInfo\fP *info, const char *passwd)"
.br
.RI "Sets the password\&. "
.ti -1c
.RI "void \fBlinphone_auth_info_set_username\fP (\fBLinphoneAuthInfo\fP *info, const char *username)"
.br
.RI "Sets the username\&. "
.ti -1c
.RI "void \fBlinphone_auth_info_set_userid\fP (\fBLinphoneAuthInfo\fP *info, const char *userid)"
.br
.RI "Sets the userid\&. "
.ti -1c
.RI "void \fBlinphone_auth_info_set_realm\fP (\fBLinphoneAuthInfo\fP *info, const char *realm)"
.br
.RI "Sets the realm\&. "
.ti -1c
.RI "void \fBlinphone_auth_info_set_domain\fP (\fBLinphoneAuthInfo\fP *info, const char *domain)"
.br
.RI "Sets the domain for which this authentication is valid\&. "
.ti -1c
.RI "void \fBlinphone_auth_info_set_ha1\fP (\fBLinphoneAuthInfo\fP *info, const char *ha1)"
.br
.RI "Sets the ha1\&. "
.ti -1c
.RI "void \fBlinphone_auth_info_set_tls_cert\fP (\fBLinphoneAuthInfo\fP *info, const char *tls_cert)"
.br
.RI "Sets the TLS certificate\&. "
.ti -1c
.RI "void \fBlinphone_auth_info_set_tls_key\fP (\fBLinphoneAuthInfo\fP *info, const char *tls_key)"
.br
.RI "Sets the TLS key\&. "
.ti -1c
.RI "void \fBlinphone_auth_info_set_tls_cert_path\fP (\fBLinphoneAuthInfo\fP *info, const char *tls_cert_path)"
.br
.RI "Sets the TLS certificate path\&. "
.ti -1c
.RI "void \fBlinphone_auth_info_set_tls_key_path\fP (\fBLinphoneAuthInfo\fP *info, const char *tls_key_path)"
.br
.RI "Sets the TLS key path\&. "
.ti -1c
.RI "const char * \fBlinphone_auth_info_get_username\fP (const \fBLinphoneAuthInfo\fP *info)"
.br
.RI "Gets the username\&. "
.ti -1c
.RI "const char * \fBlinphone_auth_info_get_passwd\fP (const \fBLinphoneAuthInfo\fP *info)"
.br
.RI "Gets the password\&. "
.ti -1c
.RI "const char * \fBlinphone_auth_info_get_userid\fP (const \fBLinphoneAuthInfo\fP *info)"
.br
.RI "Gets the userid\&. "
.ti -1c
.RI "const char * \fBlinphone_auth_info_get_realm\fP (const \fBLinphoneAuthInfo\fP *info)"
.br
.RI "Gets the realm\&. "
.ti -1c
.RI "const char * \fBlinphone_auth_info_get_domain\fP (const \fBLinphoneAuthInfo\fP *info)"
.br
.RI "Gets the domain\&. "
.ti -1c
.RI "const char * \fBlinphone_auth_info_get_ha1\fP (const \fBLinphoneAuthInfo\fP *info)"
.br
.RI "Gets the ha1\&. "
.ti -1c
.RI "const char * \fBlinphone_auth_info_get_tls_cert\fP (const \fBLinphoneAuthInfo\fP *info)"
.br
.RI "Gets the TLS certificate\&. "
.ti -1c
.RI "const char * \fBlinphone_auth_info_get_tls_key\fP (const \fBLinphoneAuthInfo\fP *info)"
.br
.RI "Gets the TLS key\&. "
.ti -1c
.RI "const char * \fBlinphone_auth_info_get_tls_cert_path\fP (const \fBLinphoneAuthInfo\fP *info)"
.br
.RI "Gets the TLS certificate path\&. "
.ti -1c
.RI "const char * \fBlinphone_auth_info_get_tls_key_path\fP (const \fBLinphoneAuthInfo\fP *info)"
.br
.RI "Gets the TLS key path\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED void \fBlinphone_auth_info_destroy\fP (\fBLinphoneAuthInfo\fP *info)"
.br
.ti -1c
.RI "\fBLinphoneAuthInfo\fP * \fBlinphone_core_create_auth_info\fP (\fBLinphoneCore\fP *lc, const char *username, const char *userid, const char *passwd, const char *ha1, const char *realm, const char *domain)"
.br
.RI "Create an authentication information with default values from Linphone core\&. "
.ti -1c
.RI "void \fBlinphone_core_add_auth_info\fP (\fBLinphoneCore\fP *lc, const \fBLinphoneAuthInfo\fP *info)"
.br
.RI "Adds authentication information to the \fBLinphoneCore\fP\&. "
.ti -1c
.RI "void \fBlinphone_core_remove_auth_info\fP (\fBLinphoneCore\fP *lc, const \fBLinphoneAuthInfo\fP *info)"
.br
.RI "Removes an authentication information object\&. "
.ti -1c
.RI "const bctbx_list_t * \fBlinphone_core_get_auth_info_list\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Returns an unmodifiable list of currently entered \fBLinphoneAuthInfo\fP\&. "
.ti -1c
.RI "const \fBLinphoneAuthInfo\fP * \fBlinphone_core_find_auth_info\fP (\fBLinphoneCore\fP *lc, const char *realm, const char *username, const char *sip_domain)"
.br
.RI "Find authentication info matching realm, username, domain criteria\&. "
.ti -1c
.RI "void \fBlinphone_core_clear_all_auth_info\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Clear all authentication information\&. "
.in -1c
.SH "Detailed Description"
.PP 
Managing authentication: userid and passwords\&. 


.SH "Typedef Documentation"
.PP 
.SS "typedef struct _LinphoneAuthInfo \fBLinphoneAuthInfo\fP"

.PP
Object holding authentication information\&. 
.PP
\fBNote:\fP
.RS 4
The object's fields should not be accessed directly\&. Prefer using the accessor methods\&.
.RE
.PP
In most case, authentication information consists of a username and password\&. Sometimes, a userid is required by proxy, and realm can be useful to discriminate different SIP domains\&.
.PP
Once created and filled, a LinphoneAuthInfo must be added to the LinphoneCore in order to become known and used automatically when needed\&. Use \fBlinphone_core_add_auth_info()\fP for that purpose\&.
.PP
The LinphoneCore object can take the initiative to request authentication information when needed to the application through the auth_info_requested callback of the LinphoneCoreVTable structure\&.
.PP
The application can respond to this information request later using \fBlinphone_core_add_auth_info()\fP\&. This will unblock all pending authentication transactions and retry them with authentication headers\&. 
.SH "Function Documentation"
.PP 
.SS "\fBLinphoneAuthInfo\fP* linphone_auth_info_clone (const \fBLinphoneAuthInfo\fP * source)"

.PP
Instantiates a new auth info with values from source\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsource\fP The \fBLinphoneAuthInfo\fP object to be cloned 
.RE
.PP
\fBReturns:\fP
.RS 4
The newly created \fBLinphoneAuthInfo\fP object\&. 
.RE
.PP

.SS "const char* linphone_auth_info_get_domain (const \fBLinphoneAuthInfo\fP * info)"

.PP
Gets the domain\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinfo\fP The \fBLinphoneAuthInfo\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
The domain\&. 
.RE
.PP

.SS "const char* linphone_auth_info_get_ha1 (const \fBLinphoneAuthInfo\fP * info)"

.PP
Gets the ha1\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinfo\fP The \fBLinphoneAuthInfo\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
The ha1\&. 
.RE
.PP

.SS "const char* linphone_auth_info_get_passwd (const \fBLinphoneAuthInfo\fP * info)"

.PP
Gets the password\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinfo\fP The \fBLinphoneAuthInfo\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
The password\&. 
.RE
.PP

.SS "const char* linphone_auth_info_get_realm (const \fBLinphoneAuthInfo\fP * info)"

.PP
Gets the realm\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinfo\fP The \fBLinphoneAuthInfo\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
The realm\&. 
.RE
.PP

.SS "const char* linphone_auth_info_get_tls_cert (const \fBLinphoneAuthInfo\fP * info)"

.PP
Gets the TLS certificate\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinfo\fP The \fBLinphoneAuthInfo\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
The TLS certificate\&. 
.RE
.PP

.SS "const char* linphone_auth_info_get_tls_cert_path (const \fBLinphoneAuthInfo\fP * info)"

.PP
Gets the TLS certificate path\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinfo\fP The \fBLinphoneAuthInfo\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
The TLS certificate path\&. 
.RE
.PP

.SS "const char* linphone_auth_info_get_tls_key (const \fBLinphoneAuthInfo\fP * info)"

.PP
Gets the TLS key\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinfo\fP The \fBLinphoneAuthInfo\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
The TLS key\&. 
.RE
.PP

.SS "const char* linphone_auth_info_get_tls_key_path (const \fBLinphoneAuthInfo\fP * info)"

.PP
Gets the TLS key path\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinfo\fP The \fBLinphoneAuthInfo\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
The TLS key path\&. 
.RE
.PP

.SS "const char* linphone_auth_info_get_userid (const \fBLinphoneAuthInfo\fP * info)"

.PP
Gets the userid\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinfo\fP The \fBLinphoneAuthInfo\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
The userid\&. 
.RE
.PP

.SS "const char* linphone_auth_info_get_username (const \fBLinphoneAuthInfo\fP * info)"

.PP
Gets the username\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinfo\fP The \fBLinphoneAuthInfo\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
The username\&. 
.RE
.PP

.SS "\fBLinphoneAuthInfo\fP* linphone_auth_info_new (const char * username, const char * userid, const char * passwd, const char * ha1, const char * realm, const char * domain)"

.PP
Creates a \fBLinphoneAuthInfo\fP object with supplied information\&. The object can be created empty, that is with all arguments set to NULL\&. Username, userid, password, realm and domain can be set later using specific methods\&. At the end, username and passwd (or ha1) are required\&. 
.PP
\fBParameters:\fP
.RS 4
\fIusername\fP The username that needs to be authenticated 
.br
\fIuserid\fP The userid used for authenticating (use NULL if you don't know what it is) 
.br
\fIpasswd\fP The password in clear text 
.br
\fIha1\fP The ha1-encrypted password if password is not given in clear text\&. 
.br
\fIrealm\fP The authentication domain (which can be larger than the sip domain\&. Unfortunately many SIP servers don't use this parameter\&. 
.br
\fIdomain\fP The SIP domain for which this authentication information is valid, if it has to be restricted for a single SIP domain\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A \fBLinphoneAuthInfo\fP object\&. linphone_auth_info_destroy() must be used to destroy it when no longer needed\&. The LinphoneCore makes a copy of LinphoneAuthInfo passed through \fBlinphone_core_add_auth_info()\fP\&. 
.RE
.PP

.SS "void linphone_auth_info_set_domain (\fBLinphoneAuthInfo\fP * info, const char * domain)"

.PP
Sets the domain for which this authentication is valid\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinfo\fP The \fBLinphoneAuthInfo\fP object 
.br
\fIdomain\fP The domain\&. This should not be necessary because realm is supposed to be unique and sufficient\&. However, many SIP servers don't set realm correctly, then domain has to be used to distinguish between several SIP account bearing the same username\&. 
.RE
.PP

.SS "void linphone_auth_info_set_ha1 (\fBLinphoneAuthInfo\fP * info, const char * ha1)"

.PP
Sets the ha1\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinfo\fP The \fBLinphoneAuthInfo\fP object 
.br
\fIha1\fP The ha1\&. 
.RE
.PP

.SS "void linphone_auth_info_set_passwd (\fBLinphoneAuthInfo\fP * info, const char * passwd)"

.PP
Sets the password\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinfo\fP The \fBLinphoneAuthInfo\fP object 
.br
\fIpasswd\fP The password\&. 
.RE
.PP

.SS "void linphone_auth_info_set_realm (\fBLinphoneAuthInfo\fP * info, const char * realm)"

.PP
Sets the realm\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinfo\fP The \fBLinphoneAuthInfo\fP object 
.br
\fIrealm\fP The realm\&. 
.RE
.PP

.SS "void linphone_auth_info_set_tls_cert (\fBLinphoneAuthInfo\fP * info, const char * tls_cert)"

.PP
Sets the TLS certificate\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinfo\fP The \fBLinphoneAuthInfo\fP object 
.br
\fItls_cert\fP The TLS certificate\&. 
.RE
.PP

.SS "void linphone_auth_info_set_tls_cert_path (\fBLinphoneAuthInfo\fP * info, const char * tls_cert_path)"

.PP
Sets the TLS certificate path\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinfo\fP The \fBLinphoneAuthInfo\fP object 
.br
\fItls_cert_path\fP The TLS certificate path\&. 
.RE
.PP

.SS "void linphone_auth_info_set_tls_key (\fBLinphoneAuthInfo\fP * info, const char * tls_key)"

.PP
Sets the TLS key\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinfo\fP The \fBLinphoneAuthInfo\fP object 
.br
\fItls_key\fP The TLS key\&. 
.RE
.PP

.SS "void linphone_auth_info_set_tls_key_path (\fBLinphoneAuthInfo\fP * info, const char * tls_key_path)"

.PP
Sets the TLS key path\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinfo\fP The \fBLinphoneAuthInfo\fP object 
.br
\fItls_key_path\fP The TLS key path\&. 
.RE
.PP

.SS "void linphone_auth_info_set_userid (\fBLinphoneAuthInfo\fP * info, const char * userid)"

.PP
Sets the userid\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinfo\fP The \fBLinphoneAuthInfo\fP object 
.br
\fIuserid\fP The userid\&. 
.RE
.PP

.SS "void linphone_auth_info_set_username (\fBLinphoneAuthInfo\fP * info, const char * username)"

.PP
Sets the username\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinfo\fP The \fBLinphoneAuthInfo\fP object 
.br
\fIusername\fP The username\&. 
.RE
.PP

.SS "void linphone_core_add_auth_info (\fBLinphoneCore\fP * lc, const \fBLinphoneAuthInfo\fP * info)"

.PP
Adds authentication information to the \fBLinphoneCore\fP\&. That piece of information will be used during all SIP transactions that require authentication\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The \fBLinphoneCore\fP\&. 
.br
\fIinfo\fP The \fBLinphoneAuthInfo\fP to add\&. 
.RE
.PP

.SS "\fBLinphoneAuthInfo\fP* linphone_core_create_auth_info (\fBLinphoneCore\fP * lc, const char * username, const char * userid, const char * passwd, const char * ha1, const char * realm, const char * domain)"

.PP
Create an authentication information with default values from Linphone core\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIusername\fP String containing the username part of the authentication credentials 
.br
\fIuserid\fP String containing the username to use to calculate the authentication digest (optional) 
.br
\fIpasswd\fP String containing the password of the authentication credentials (optional, either passwd or ha1 must be set) 
.br
\fIha1\fP String containing a ha1 hash of the password (optional, either passwd or ha1 must be set) 
.br
\fIrealm\fP String used to discriminate different SIP authentication domains (optional) 
.br
\fIdomain\fP String containing the SIP domain for which this authentication information is valid, if it has to be restricted for a single SIP domain\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBLinphoneAuthInfo\fP with default values set 
.RE
.PP

.SS "const \fBLinphoneAuthInfo\fP* linphone_core_find_auth_info (\fBLinphoneCore\fP * lc, const char * realm, const char * username, const char * sip_domain)"

.PP
Find authentication info matching realm, username, domain criteria\&. First of all, (realm,username) pair are searched\&. If multiple results (which should not happen because realm are supposed to be unique), then domain is added to the search\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the LinphoneCore 
.br
\fIrealm\fP the authentication 'realm' (optional) 
.br
\fIusername\fP the SIP username to be authenticated (mandatory) 
.br
\fIsip_domain\fP the SIP domain name (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
a \fBLinphoneAuthInfo\fP 
.RE
.PP

.SS "const bctbx_list_t* linphone_core_get_auth_info_list (const \fBLinphoneCore\fP * lc)"

.PP
Returns an unmodifiable list of currently entered \fBLinphoneAuthInfo\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A list of \fBLinphoneAuthInfo\fP objects\&. 
.RE
.PP

.SS "void linphone_core_remove_auth_info (\fBLinphoneCore\fP * lc, const \fBLinphoneAuthInfo\fP * info)"

.PP
Removes an authentication information object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The \fBLinphoneCore\fP from which the \fBLinphoneAuthInfo\fP will be removed\&. 
.br
\fIinfo\fP The \fBLinphoneAuthInfo\fP to remove\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Liblinphone from the source code\&.
