.TH "media_parameters" 3 "Thu Dec 14 2017" "Version 3.12.0" "Liblinphone" \" -*- nroff -*-
.ad l
.nh
.SH NAME
media_parameters \- Controlling media parameters\&.  

.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fB_LinphoneVideoPolicy\fP"
.br
.RI "Structure describing policy regarding video streams establishments\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBLINPHONE_FIND_PAYLOAD_IGNORE_RATE\fP   \-1"
.br
.RI "Wildcard value used by \fBlinphone_core_find_payload_type\fP to ignore rate in search algorithm\&. "
.ti -1c
.RI "#define \fBLINPHONE_FIND_PAYLOAD_IGNORE_CHANNELS\fP   \-1"
.br
.RI "Wildcard value used by \fBlinphone_core_find_payload_type\fP to ignore channel in search algorithm\&. "
.ti -1c
.RI "#define \fBLINPHONE_VIDEO_DISPLAY_AUTO\fP   (void*)((unsigned long) 0)"
.br
.RI "For MacOS, Linux, Windows: core will create its own window\&. "
.ti -1c
.RI "#define \fBLINPHONE_VIDEO_DISPLAY_NONE\fP   (void*)((unsigned long) \-1)"
.br
.RI "For MacOS, Linux, Windows: do nothing\&. "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fB_LinphoneAVPFMode\fP \fBLinphoneAVPFMode\fP"
.br
.RI "Enum describing RTP AVPF activation modes\&. "
.ti -1c
.RI "typedef enum \fB_LinphoneMediaEncryption\fP \fBLinphoneMediaEncryption\fP"
.br
.RI "Enum describing type of media encryption types\&. "
.ti -1c
.RI "typedef struct _LinphoneVideoDefinition \fBLinphoneVideoDefinition\fP"
.br
.RI "The LinphoneVideoDefinition object represents a video definition, eg\&. "
.ti -1c
.RI "typedef struct \fB_LinphoneVideoPolicy\fP \fBLinphoneVideoPolicy\fP"
.br
.RI "Structure describing policy regarding video streams establishments\&. "
.ti -1c
.RI "typedef struct _LinphoneVideoActivationPolicy \fBLinphoneVideoActivationPolicy\fP"
.br
.RI "Structure describing policy regarding video streams establishments\&. "
.ti -1c
.RI "typedef struct _LinphonePayloadType \fBLinphonePayloadType\fP"
.br
.RI "Object representing an RTP payload type\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fB_LinphoneAVPFMode\fP { \fBLinphoneAVPFDefault\fP = -1, \fBLinphoneAVPFDisabled\fP, \fBLinphoneAVPFEnabled\fP }
.RI "Enum describing RTP AVPF activation modes\&. ""
.br
.ti -1c
.RI "enum \fB_LinphoneMediaEncryption\fP { \fBLinphoneMediaEncryptionNone\fP, \fBLinphoneMediaEncryptionSRTP\fP, \fBLinphoneMediaEncryptionZRTP\fP, \fBLinphoneMediaEncryptionDTLS\fP }
.RI "Enum describing type of media encryption types\&. ""
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void * \fBlinphone_call_get_native_video_window_id\fP (const \fBLinphoneCall\fP *call)"
.br
.RI "Get the native window handle of the video window, casted as an unsigned long\&. "
.ti -1c
.RI "void \fBlinphone_call_set_native_video_window_id\fP (\fBLinphoneCall\fP *call, void *id)"
.br
.RI "Set the native video window id where the video is to be displayed\&. "
.ti -1c
.RI "void \fBlinphone_call_enable_echo_cancellation\fP (\fBLinphoneCall\fP *call, bool_t val)"
.br
.RI "Enables or disable echo cancellation for this call\&. "
.ti -1c
.RI "bool_t \fBlinphone_call_echo_cancellation_enabled\fP (\fBLinphoneCall\fP *lc)"
.br
.RI "Returns TRUE if echo cancellation is enabled\&. "
.ti -1c
.RI "void \fBlinphone_call_enable_echo_limiter\fP (\fBLinphoneCall\fP *call, bool_t val)"
.br
.RI "Enables or disable echo limiter for this call\&. "
.ti -1c
.RI "bool_t \fBlinphone_call_echo_limiter_enabled\fP (const \fBLinphoneCall\fP *call)"
.br
.RI "Returns TRUE if echo limiter is enabled\&. "
.ti -1c
.RI "void \fBlinphone_call_params_enable_audio_multicast\fP (\fBLinphoneCallParams\fP *params, bool_t yesno)"
.br
.RI "Use to enable multicast rtp for audio stream\&. "
.ti -1c
.RI "bool_t \fBlinphone_call_params_audio_multicast_enabled\fP (const \fBLinphoneCallParams\fP *params)"
.br
.RI "Use to get multicast state of audio stream\&. "
.ti -1c
.RI "void \fBlinphone_call_params_enable_video_multicast\fP (\fBLinphoneCallParams\fP *params, bool_t yesno)"
.br
.RI "Use to enable multicast rtp for video stream\&. "
.ti -1c
.RI "bool_t \fBlinphone_call_params_video_multicast_enabled\fP (const \fBLinphoneCallParams\fP *params)"
.br
.RI "Use to get multicast state of video stream\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_call_params_enable_realtime_text\fP (\fBLinphoneCallParams\fP *params, bool_t yesno)"
.br
.RI "Use to enable real time text following rfc4103\&. "
.ti -1c
.RI "bool_t \fBlinphone_call_params_realtime_text_enabled\fP (const \fBLinphoneCallParams\fP *params)"
.br
.RI "Use to get real time text following rfc4103\&. "
.ti -1c
.RI "void \fBlinphone_call_params_add_custom_sdp_attribute\fP (\fBLinphoneCallParams\fP *params, const char *attribute_name, const char *attribute_value)"
.br
.RI "Add a custom attribute related to all the streams in the SDP exchanged within SIP messages during a call\&. "
.ti -1c
.RI "void \fBlinphone_call_params_add_custom_sdp_media_attribute\fP (\fBLinphoneCallParams\fP *params, \fBLinphoneStreamType\fP type, const char *attribute_name, const char *attribute_value)"
.br
.RI "Add a custom attribute related to a specific stream in the SDP exchanged within SIP messages during a call\&. "
.ti -1c
.RI "const char * \fBlinphone_call_params_get_custom_sdp_attribute\fP (const \fBLinphoneCallParams\fP *params, const char *attribute_name)"
.br
.RI "Get a custom SDP attribute that is related to all the streams\&. "
.ti -1c
.RI "const char * \fBlinphone_call_params_get_custom_sdp_media_attribute\fP (const \fBLinphoneCallParams\fP *params, \fBLinphoneStreamType\fP type, const char *attribute_name)"
.br
.RI "Get a custom SDP attribute that is related to a specific stream\&. "
.ti -1c
.RI "void \fBlinphone_call_params_clear_custom_sdp_attributes\fP (\fBLinphoneCallParams\fP *params)"
.br
.RI "Clear the custom SDP attributes related to all the streams in the SDP exchanged within SIP messages during a call\&. "
.ti -1c
.RI "void \fBlinphone_call_params_clear_custom_sdp_media_attributes\fP (\fBLinphoneCallParams\fP *params, \fBLinphoneStreamType\fP type)"
.br
.RI "Clear the custom SDP attributes related to a specific stream in the SDP exchanged within SIP messages during a call\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED void \fBlinphone_core_send_dtmf\fP (\fBLinphoneCore\fP *lc, char dtmf)"
.br
.RI "Send the specified dtmf\&. "
.ti -1c
.RI "void \fBlinphone_core_set_download_bandwidth\fP (\fBLinphoneCore\fP *lc, int bw)"
.br
.RI "Sets maximum available download bandwidth This is IP bandwidth, in kbit/s\&. "
.ti -1c
.RI "void \fBlinphone_core_set_upload_bandwidth\fP (\fBLinphoneCore\fP *lc, int bw)"
.br
.RI "Sets maximum available upload bandwidth This is IP bandwidth, in kbit/s\&. "
.ti -1c
.RI "void \fBlinphone_core_set_expected_bandwidth\fP (\fBLinphoneCore\fP *lc, int bw)"
.br
.RI "Sets expected available upload bandwidth This is IP bandwidth, in kbit/s\&. "
.ti -1c
.RI "int \fBlinphone_core_get_download_bandwidth\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Retrieve the maximum available download bandwidth\&. "
.ti -1c
.RI "int \fBlinphone_core_get_upload_bandwidth\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Retrieve the maximum available upload bandwidth\&. "
.ti -1c
.RI "void \fBlinphone_core_enable_adaptive_rate_control\fP (\fBLinphoneCore\fP *lc, bool_t enabled)"
.br
.RI "Enable adaptive rate control\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_adaptive_rate_control_enabled\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Returns whether adaptive rate control is enabled\&. "
.ti -1c
.RI "void \fBlinphone_core_set_adaptive_rate_algorithm\fP (\fBLinphoneCore\fP *lc, const char *algorithm)"
.br
.RI "Sets adaptive rate algorithm\&. "
.ti -1c
.RI "const char * \fBlinphone_core_get_adaptive_rate_algorithm\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Returns which adaptive rate algorithm is currently configured for future calls\&. "
.ti -1c
.RI "void \fBlinphone_core_set_download_ptime\fP (\fBLinphoneCore\fP *lc, int ptime)"
.br
.RI "Set audio packetization time linphone expects to receive from peer\&. "
.ti -1c
.RI "int \fBlinphone_core_get_download_ptime\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Get audio packetization time linphone expects to receive from peer\&. "
.ti -1c
.RI "void \fBlinphone_core_set_upload_ptime\fP (\fBLinphoneCore\fP *lc, int ptime)"
.br
.RI "Set audio packetization time linphone will send (in absence of requirement from peer) A value of 0 stands for the current codec default packetization time\&. "
.ti -1c
.RI "int \fBlinphone_core_get_upload_ptime\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Set audio packetization time linphone will send (in absence of requirement from peer) A value of 0 stands for the current codec default packetization time\&. "
.ti -1c
.RI "void \fBlinphone_core_set_sip_transport_timeout\fP (\fBLinphoneCore\fP *lc, int timeout_ms)"
.br
.RI "Set the SIP transport timeout\&. "
.ti -1c
.RI "int \fBlinphone_core_get_sip_transport_timeout\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Get the SIP transport timeout\&. "
.ti -1c
.RI "void \fBlinphone_core_enable_dns_srv\fP (\fBLinphoneCore\fP *lc, bool_t enable)"
.br
.RI "Enable or disable DNS SRV resolution\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_dns_srv_enabled\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Tells whether DNS SRV resolution is enabled\&. "
.ti -1c
.RI "void \fBlinphone_core_enable_dns_search\fP (\fBLinphoneCore\fP *lc, bool_t enable)"
.br
.RI "Enable or disable DNS search (use of local domain if the fully qualified name did return results)\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_dns_search_enabled\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Tells whether DNS search (use of local domain if the fully qualified name did return results) is enabled\&. "
.ti -1c
.RI "void \fBlinphone_core_set_dns_servers\fP (\fBLinphoneCore\fP *lc, const bctbx_list_t *servers)"
.br
.RI "Forces liblinphone to use the supplied list of dns servers, instead of system's ones\&. "
.ti -1c
.RI "bctbx_list_t * \fBlinphone_core_get_audio_payload_types\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Return the list of the available audio payload types\&. "
.ti -1c
.RI "void \fBlinphone_core_set_audio_payload_types\fP (\fBLinphoneCore\fP *lc, const bctbx_list_t *payload_types)"
.br
.RI "Redefine the list of the available payload types\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED const bctbx_list_t * \fBlinphone_core_get_audio_codecs\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Returns the list of available audio codecs\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED \fBLinphoneStatus\fP \fBlinphone_core_set_audio_codecs\fP (\fBLinphoneCore\fP *lc, bctbx_list_t *codecs)"
.br
.RI "Sets the list of audio codecs\&. "
.ti -1c
.RI "bctbx_list_t * \fBlinphone_core_get_video_payload_types\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Return the list of the available video payload types\&. "
.ti -1c
.RI "void \fBlinphone_core_set_video_payload_types\fP (\fBLinphoneCore\fP *lc, const bctbx_list_t *payload_types)"
.br
.RI "Redefine the list of the available video payload types\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED const bctbx_list_t * \fBlinphone_core_get_video_codecs\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Returns the list of available video codecs\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED \fBLinphoneStatus\fP \fBlinphone_core_set_video_codecs\fP (\fBLinphoneCore\fP *lc, bctbx_list_t *codecs)"
.br
.RI "Sets the list of video codecs\&. "
.ti -1c
.RI "bctbx_list_t * \fBlinphone_core_get_text_payload_types\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Return the list of the available text payload types\&. "
.ti -1c
.RI "void \fBlinphone_core_set_text_payload_types\fP (\fBLinphoneCore\fP *lc, const bctbx_list_t *payload_types)"
.br
.RI "Redefine the list of the available payload types\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED const bctbx_list_t * \fBlinphone_core_get_text_codecs\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Returns the list of available text codecs\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED \fBLinphoneStatus\fP \fBlinphone_core_set_text_codecs\fP (\fBLinphoneCore\fP *lc, bctbx_list_t *codecs)"
.br
.RI "Sets the list of text codecs\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED bool_t \fBlinphone_core_payload_type_enabled\fP (const \fBLinphoneCore\fP *lc, const OrtpPayloadType *pt)"
.br
.RI "Tells whether the specified payload type is enabled\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED bool_t \fBlinphone_core_payload_type_is_vbr\fP (const \fBLinphoneCore\fP *lc, const OrtpPayloadType *pt)"
.br
.RI "Tells whether the specified payload type represents a variable bitrate codec\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED void \fBlinphone_core_set_payload_type_bitrate\fP (\fBLinphoneCore\fP *lc, OrtpPayloadType *pt, int bitrate)"
.br
.RI "Set an explicit bitrate (IP bitrate, not codec bitrate) for a given codec, in kbit/s\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED int \fBlinphone_core_get_payload_type_bitrate\fP (\fBLinphoneCore\fP *lc, const OrtpPayloadType *pt)"
.br
.RI "Get the bitrate explicitely set with \fBlinphone_core_set_payload_type_bitrate()\fP\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED \fBLinphoneStatus\fP \fBlinphone_core_enable_payload_type\fP (\fBLinphoneCore\fP *lc, OrtpPayloadType *pt, bool_t enable)"
.br
.RI "Enable or disable the use of the specified payload type\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED OrtpPayloadType * \fBlinphone_core_find_payload_type\fP (\fBLinphoneCore\fP *lc, const char *type, int rate, int channels)"
.br
.RI "Get payload type from mime type and clock rate\&. "
.ti -1c
.RI "\fBLinphonePayloadType\fP * \fBlinphone_core_get_payload_type\fP (\fBLinphoneCore\fP *lc, const char *type, int rate, int channels)"
.br
.RI "Get payload type from mime type and clock rate\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED int \fBlinphone_core_get_payload_type_number\fP (\fBLinphoneCore\fP *lc, const OrtpPayloadType *pt)"
.br
.RI "Returns the payload type number assigned for this codec\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED void \fBlinphone_core_set_payload_type_number\fP (\fBLinphoneCore\fP *lc, OrtpPayloadType *pt, int number)"
.br
.RI "Force a number for a payload type\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED bool_t \fBlinphone_core_check_payload_type_usability\fP (\fBLinphoneCore\fP *lc, const OrtpPayloadType *pt)"
.br
.RI "Return TRUE if codec can be used with bandwidth, FALSE else\&. "
.ti -1c
.RI "void \fBlinphone_core_enable_audio_adaptive_jittcomp\fP (\fBLinphoneCore\fP *lc, bool_t enable)"
.br
.RI "Enable or disable the audio adaptive jitter compensation\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_audio_adaptive_jittcomp_enabled\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Tells whether the audio adaptive jitter compensation is enabled\&. "
.ti -1c
.RI "int \fBlinphone_core_get_audio_jittcomp\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Returns the nominal audio jitter buffer size in milliseconds\&. "
.ti -1c
.RI "void \fBlinphone_core_set_audio_jittcomp\fP (\fBLinphoneCore\fP *lc, int milliseconds)"
.br
.RI "Sets the nominal audio jitter buffer size in milliseconds\&. "
.ti -1c
.RI "void \fBlinphone_core_enable_video_adaptive_jittcomp\fP (\fBLinphoneCore\fP *lc, bool_t enable)"
.br
.RI "Enable or disable the video adaptive jitter compensation\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_video_adaptive_jittcomp_enabled\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Tells whether the video adaptive jitter compensation is enabled\&. "
.ti -1c
.RI "int \fBlinphone_core_get_video_jittcomp\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Returns the nominal video jitter buffer size in milliseconds\&. "
.ti -1c
.RI "void \fBlinphone_core_set_video_jittcomp\fP (\fBLinphoneCore\fP *lc, int milliseconds)"
.br
.RI "Sets the nominal video jitter buffer size in milliseconds\&. "
.ti -1c
.RI "int \fBlinphone_core_get_nortp_timeout\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Gets the value of the no-rtp timeout\&. "
.ti -1c
.RI "void \fBlinphone_core_set_audio_port_range\fP (\fBLinphoneCore\fP *lc, int min_port, int max_port)"
.br
.RI "Sets the UDP port range from which to randomly select the port used for audio streaming\&. "
.ti -1c
.RI "void \fBlinphone_core_set_video_port_range\fP (\fBLinphoneCore\fP *lc, int min_port, int max_port)"
.br
.RI "Sets the UDP port range from which to randomly select the port used for video streaming\&. "
.ti -1c
.RI "void \fBlinphone_core_set_text_port_range\fP (\fBLinphoneCore\fP *lc, int min_port, int max_port)"
.br
.RI "Sets the UDP port range from which to randomly select the port used for text streaming\&. "
.ti -1c
.RI "void \fBlinphone_core_set_nortp_timeout\fP (\fBLinphoneCore\fP *lc, int seconds)"
.br
.RI "Sets the no-rtp timeout value in seconds\&. "
.ti -1c
.RI "void \fBlinphone_core_set_use_info_for_dtmf\fP (\fBLinphoneCore\fP *lc, bool_t use_info)"
.br
.RI "Sets whether SIP INFO is to be used to send digits\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_get_use_info_for_dtmf\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Indicates whether SIP INFO is used to send digits\&. "
.ti -1c
.RI "void \fBlinphone_core_set_use_rfc2833_for_dtmf\fP (\fBLinphoneCore\fP *lc, bool_t use_rfc2833)"
.br
.RI "Sets whether RFC2833 is to be used to send digits\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_get_use_rfc2833_for_dtmf\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Indicates whether RFC2833 is used to send digits\&. "
.ti -1c
.RI "const char ** \fBlinphone_core_get_sound_devices\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Gets the list of the available sound devices\&. "
.ti -1c
.RI "void \fBlinphone_core_reload_sound_devices\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Update detection of sound devices\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_sound_device_can_capture\fP (\fBLinphoneCore\fP *lc, const char *device)"
.br
.RI "Tells whether a specified sound device can capture sound\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_sound_device_can_playback\fP (\fBLinphoneCore\fP *lc, const char *device)"
.br
.RI "Tells whether a specified sound device can play sound\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED int \fBlinphone_core_get_ring_level\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Get ring sound level in 0-100 scale\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED int \fBlinphone_core_get_play_level\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Get playback sound level in 0-100 scale\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED int \fBlinphone_core_get_rec_level\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Get sound capture level in 0-100 scale\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED void \fBlinphone_core_set_ring_level\fP (\fBLinphoneCore\fP *lc, int level)"
.br
.RI "Set sound ring level in 0-100 scale\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED void \fBlinphone_core_set_play_level\fP (\fBLinphoneCore\fP *lc, int level)"
.br
.RI "Set sound playback level in 0-100 scale\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED void \fBlinphone_core_set_rec_level\fP (\fBLinphoneCore\fP *lc, int level)"
.br
.RI "Set sound capture level in 0-100 scale\&. "
.ti -1c
.RI "void \fBlinphone_core_set_mic_gain_db\fP (\fBLinphoneCore\fP *lc, float level)"
.br
.RI "Allow to control microphone level: gain in db\&. "
.ti -1c
.RI "float \fBlinphone_core_get_mic_gain_db\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Get microphone gain in db\&. "
.ti -1c
.RI "void \fBlinphone_core_set_playback_gain_db\fP (\fBLinphoneCore\fP *lc, float level)"
.br
.RI "Allow to control play level before entering sound card: gain in db\&. "
.ti -1c
.RI "float \fBlinphone_core_get_playback_gain_db\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Get playback gain in db before entering sound card\&. "
.ti -1c
.RI "const char * \fBlinphone_core_get_ringer_device\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Gets the name of the currently assigned sound device for ringing\&. "
.ti -1c
.RI "const char * \fBlinphone_core_get_playback_device\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Gets the name of the currently assigned sound device for playback\&. "
.ti -1c
.RI "const char * \fBlinphone_core_get_capture_device\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Gets the name of the currently assigned sound device for capture\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_core_set_ringer_device\fP (\fBLinphoneCore\fP *lc, const char *devid)"
.br
.RI "Sets the sound device used for ringing\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_core_set_playback_device\fP (\fBLinphoneCore\fP *lc, const char *devid)"
.br
.RI "Sets the sound device used for playback\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_core_set_capture_device\fP (\fBLinphoneCore\fP *lc, const char *devid)"
.br
.RI "Sets the sound device used for capture\&. "
.ti -1c
.RI "void \fBlinphone_core_stop_ringing\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Whenever the liblinphone is playing a ring to advertise an incoming call or ringback of an outgoing call, this function stops the ringing\&. "
.ti -1c
.RI "void \fBlinphone_core_set_ring\fP (\fBLinphoneCore\fP *lc, const char *path)"
.br
.RI "Sets the path to a wav file used for ringing\&. "
.ti -1c
.RI "const char * \fBlinphone_core_get_ring\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Returns the path to the wav file used for ringing\&. "
.ti -1c
.RI "void \fBlinphone_core_set_ringback\fP (\fBLinphoneCore\fP *lc, const char *path)"
.br
.RI "Sets the path to a wav file used for ringing back\&. "
.ti -1c
.RI "const char * \fBlinphone_core_get_ringback\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Returns the path to the wav file used for ringing back\&. "
.ti -1c
.RI "void \fBlinphone_core_set_remote_ringback_tone\fP (\fBLinphoneCore\fP *lc, const char *ring)"
.br
.RI "Specify a ring back tone to be played to far end during incoming calls\&. "
.ti -1c
.RI "const char * \fBlinphone_core_get_remote_ringback_tone\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Get the ring back tone played to far end during incoming calls\&. "
.ti -1c
.RI "void \fBlinphone_core_set_ring_during_incoming_early_media\fP (\fBLinphoneCore\fP *lc, bool_t enable)"
.br
.RI "Enable or disable the ring play during an incoming early media call\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_get_ring_during_incoming_early_media\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Tells whether the ring play is enabled during an incoming early media call\&. "
.ti -1c
.RI "void \fBlinphone_core_enable_echo_cancellation\fP (\fBLinphoneCore\fP *lc, bool_t val)"
.br
.RI "Enables or disable echo cancellation\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_echo_cancellation_enabled\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Returns TRUE if echo cancellation is enabled\&. "
.ti -1c
.RI "void \fBlinphone_core_enable_echo_limiter\fP (\fBLinphoneCore\fP *lc, bool_t val)"
.br
.RI "Enables or disable echo limiter\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_echo_limiter_enabled\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Tells whether echo limiter is enabled\&. "
.ti -1c
.RI "void \fBlinphone_core_enable_mic\fP (\fBLinphoneCore\fP *lc, bool_t enable)"
.br
.RI "Enable or disable the microphone\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_mic_enabled\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Tells whether the microphone is enabled\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED void \fBlinphone_core_enable_video\fP (\fBLinphoneCore\fP *lc, bool_t vcap_enabled, bool_t display_enabled)"
.br
.RI "Enables video globally\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_video_enabled\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Returns TRUE if either capture or display is enabled, FALSE otherwise\&. "
.ti -1c
.RI "void \fBlinphone_core_enable_video_capture\fP (\fBLinphoneCore\fP *lc, bool_t enable)"
.br
.RI "Enable or disable video capture\&. "
.ti -1c
.RI "void \fBlinphone_core_enable_video_display\fP (\fBLinphoneCore\fP *lc, bool_t enable)"
.br
.RI "Enable or disable video display\&. "
.ti -1c
.RI "void \fBlinphone_core_enable_video_source_reuse\fP (\fBLinphoneCore\fP *lc, bool_t enable)"
.br
.RI "Enable or disable video source reuse when switching from preview to actual video call\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_video_capture_enabled\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Tells whether video capture is enabled\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_video_display_enabled\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Tells whether video display is enabled\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED void \fBlinphone_core_set_video_policy\fP (\fBLinphoneCore\fP *lc, const \fBLinphoneVideoPolicy\fP *policy)"
.br
.RI "Sets the default policy for video\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED const \fBLinphoneVideoPolicy\fP * \fBlinphone_core_get_video_policy\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Get the default policy for video\&. "
.ti -1c
.RI "\fBLinphoneVideoActivationPolicy\fP * \fBlinphone_video_activation_policy_ref\fP (\fBLinphoneVideoActivationPolicy\fP *policy)"
.br
.RI "Increment refcount\&. "
.ti -1c
.RI "void \fBlinphone_video_activation_policy_unref\fP (\fBLinphoneVideoActivationPolicy\fP *policy)"
.br
.RI "Decrement refcount and possibly free the object\&. "
.ti -1c
.RI "void * \fBlinphone_video_activation_policy_get_user_data\fP (const \fBLinphoneVideoActivationPolicy\fP *policy)"
.br
.RI "Gets the user data in the LinphoneVideoActivationPolicy object\&. "
.ti -1c
.RI "void \fBlinphone_video_activation_policy_set_user_data\fP (\fBLinphoneVideoActivationPolicy\fP *policy, void *data)"
.br
.RI "Sets the user data in the LinphoneVideoActivationPolicy object\&. "
.ti -1c
.RI "bool_t \fBlinphone_video_activation_policy_get_automatically_accept\fP (const \fBLinphoneVideoActivationPolicy\fP *policy)"
.br
.RI "Gets the value for the automatically accept video policy\&. "
.ti -1c
.RI "bool_t \fBlinphone_video_activation_policy_get_automatically_initiate\fP (const \fBLinphoneVideoActivationPolicy\fP *policy)"
.br
.RI "Gets the value for the automatically initiate video policy\&. "
.ti -1c
.RI "void \fBlinphone_video_activation_policy_set_automatically_accept\fP (\fBLinphoneVideoActivationPolicy\fP *policy, bool_t enable)"
.br
.RI "Sets the value for the automatically accept video policy\&. "
.ti -1c
.RI "void \fBlinphone_video_activation_policy_set_automatically_initiate\fP (\fBLinphoneVideoActivationPolicy\fP *policy, bool_t enable)"
.br
.RI "Sets the value for the automatically initiate video policy\&. "
.ti -1c
.RI "void \fBlinphone_core_set_video_activation_policy\fP (\fBLinphoneCore\fP *lc, const \fBLinphoneVideoActivationPolicy\fP *policy)"
.br
.RI "Sets the default policy for video\&. "
.ti -1c
.RI "\fBLinphoneVideoActivationPolicy\fP * \fBlinphone_core_get_video_activation_policy\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Get the default policy for video\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED const \fBMSVideoSizeDef\fP * \fBlinphone_core_get_supported_video_sizes\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Returns the zero terminated table of supported video resolutions\&. "
.ti -1c
.RI "void \fBlinphone_core_set_preferred_video_definition\fP (\fBLinphoneCore\fP *lc, \fBLinphoneVideoDefinition\fP *vdef)"
.br
.RI "Set the preferred video definition for the stream that is captured and sent to the remote party\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED void \fBlinphone_core_set_preferred_video_size\fP (\fBLinphoneCore\fP *lc, MSVideoSize vsize)"
.br
.RI "Sets the preferred video size\&. "
.ti -1c
.RI "void \fBlinphone_core_set_preview_video_definition\fP (\fBLinphoneCore\fP *lc, \fBLinphoneVideoDefinition\fP *vdef)"
.br
.RI "Set the video definition for the captured (preview) video\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED void \fBlinphone_core_set_preview_video_size\fP (\fBLinphoneCore\fP *lc, MSVideoSize vsize)"
.br
.RI "Sets the video size for the captured (preview) video\&. "
.ti -1c
.RI "void \fBlinphone_core_set_preview_video_size_by_name\fP (\fBLinphoneCore\fP *lc, const char *name)"
.br
.RI "Sets the preview video size by its name\&. "
.ti -1c
.RI "const \fBLinphoneVideoDefinition\fP * \fBlinphone_core_get_preview_video_definition\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Get the definition of the captured video\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED MSVideoSize \fBlinphone_core_get_preview_video_size\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Returns video size for the captured video if it was previously set by \fBlinphone_core_set_preview_video_size()\fP, otherwise returns a 0,0 size\&. "
.ti -1c
.RI "\fBLinphoneVideoDefinition\fP * \fBlinphone_core_get_current_preview_video_definition\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Get the effective video definition provided by the camera for the captured video\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED MSVideoSize \fBlinphone_core_get_current_preview_video_size\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Returns the effective video size for the captured video as provided by the camera\&. "
.ti -1c
.RI "const \fBLinphoneVideoDefinition\fP * \fBlinphone_core_get_preferred_video_definition\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Get the preferred video definition for the stream that is captured and sent to the remote party\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED MSVideoSize \fBlinphone_core_get_preferred_video_size\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Returns the current preferred video size for sending\&. "
.ti -1c
.RI "void \fBlinphone_core_set_preferred_video_size_by_name\fP (\fBLinphoneCore\fP *lc, const char *name)"
.br
.RI "Sets the preferred video size by its name\&. "
.ti -1c
.RI "void \fBlinphone_core_set_preferred_framerate\fP (\fBLinphoneCore\fP *lc, float fps)"
.br
.RI "Set the preferred frame rate for video\&. "
.ti -1c
.RI "float \fBlinphone_core_get_preferred_framerate\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Returns the preferred video framerate, previously set by \fBlinphone_core_set_preferred_framerate()\fP\&. "
.ti -1c
.RI "void \fBlinphone_core_preview_ogl_render\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Call generic OpenGL render for a given core\&. "
.ti -1c
.RI "void \fBlinphone_core_enable_video_preview\fP (\fBLinphoneCore\fP *lc, bool_t val)"
.br
.RI "Controls video preview enablement\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_video_preview_enabled\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Tells whether video preview is enabled\&. "
.ti -1c
.RI "void \fBlinphone_core_enable_self_view\fP (\fBLinphoneCore\fP *lc, bool_t val)"
.br
.RI "Enables or disable self view during calls\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_self_view_enabled\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Tells whether video self view during call is enabled or not\&. "
.ti -1c
.RI "void \fBlinphone_core_reload_video_devices\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Update detection of camera devices\&. "
.ti -1c
.RI "const char ** \fBlinphone_core_get_video_devices\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Gets the list of the available video capture devices\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_core_set_video_device\fP (\fBLinphoneCore\fP *lc, const char *id)"
.br
.RI "Sets the active video device\&. "
.ti -1c
.RI "const char * \fBlinphone_core_get_video_device\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Returns the name of the currently active video device\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_core_set_static_picture\fP (\fBLinphoneCore\fP *lc, const char *path)"
.br
.RI "Set the path to the image file to stream when 'Static picture' is set as the video device\&. "
.ti -1c
.RI "const char * \fBlinphone_core_get_static_picture\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Get the path to the image file streamed when 'Static picture' is set as the video device\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_core_set_static_picture_fps\fP (\fBLinphoneCore\fP *lc, float fps)"
.br
.RI "Set the frame rate for static picture\&. "
.ti -1c
.RI "float \fBlinphone_core_get_static_picture_fps\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Get the frame rate for static picture\&. "
.ti -1c
.RI "void * \fBlinphone_core_get_native_video_window_id\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Get the native window handle of the video window\&. "
.ti -1c
.RI "void \fBlinphone_core_set_native_video_window_id\fP (\fBLinphoneCore\fP *lc, void *id)"
.br
.RI "Set the native video window id where the video is to be displayed\&. "
.ti -1c
.RI "void * \fBlinphone_core_get_native_preview_window_id\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Get the native window handle of the video preview window\&. "
.ti -1c
.RI "void \fBlinphone_core_set_native_preview_window_id\fP (\fBLinphoneCore\fP *lc, void *id)"
.br
.RI "Set the native window id where the preview video (local camera) is to be displayed\&. "
.ti -1c
.RI "void \fBlinphone_core_use_preview_window\fP (\fBLinphoneCore\fP *lc, bool_t yesno)"
.br
.RI "Tells the core to use a separate window for local camera preview video, instead of inserting local view within the remote video window\&. "
.ti -1c
.RI "int \fBlinphone_core_get_device_rotation\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Gets the current device orientation\&. "
.ti -1c
.RI "void \fBlinphone_core_set_device_rotation\fP (\fBLinphoneCore\fP *lc, int rotation)"
.br
.RI "Tells the core the device current orientation\&. "
.ti -1c
.RI "void \fBlinphone_core_set_use_files\fP (\fBLinphoneCore\fP *lc, bool_t yesno)"
.br
.RI "Ask the core to stream audio from and to files, instead of using the soundcard\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_get_use_files\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Gets whether linphone is currently streaming audio from and to files, rather than using the soundcard\&. "
.ti -1c
.RI "const char * \fBlinphone_core_get_play_file\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Get the wav file that is played when putting somebody on hold, or when files are used instead of soundcards (see \fBlinphone_core_set_use_files()\fP)\&. "
.ti -1c
.RI "void \fBlinphone_core_set_play_file\fP (\fBLinphoneCore\fP *lc, const char *file)"
.br
.RI "Sets a wav file to be played when putting somebody on hold, or when files are used instead of soundcards (see \fBlinphone_core_set_use_files()\fP)\&. "
.ti -1c
.RI "const char * \fBlinphone_core_get_record_file\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Get the wav file where incoming stream is recorded, when files are used instead of soundcards (see \fBlinphone_core_set_use_files()\fP)\&. "
.ti -1c
.RI "void \fBlinphone_core_set_record_file\fP (\fBLinphoneCore\fP *lc, const char *file)"
.br
.RI "Sets a wav file where incoming stream is to be recorded, when files are used instead of soundcards (see \fBlinphone_core_set_use_files()\fP)\&. "
.ti -1c
.RI "void \fBlinphone_core_play_dtmf\fP (\fBLinphoneCore\fP *lc, char dtmf, int duration_ms)"
.br
.RI "Plays a dtmf sound to the local user\&. "
.ti -1c
.RI "void \fBlinphone_core_stop_dtmf\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Stops playing a dtmf started by \fBlinphone_core_play_dtmf()\fP\&. "
.ti -1c
.RI "int \fBlinphone_core_get_mtu\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Returns the maximum transmission unit size in bytes\&. "
.ti -1c
.RI "void \fBlinphone_core_set_mtu\fP (\fBLinphoneCore\fP *lc, int mtu)"
.br
.RI "Sets the maximum transmission unit size in bytes\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_core_set_media_encryption\fP (\fBLinphoneCore\fP *lc, \fBLinphoneMediaEncryption\fP menc)"
.br
.RI "Choose the media encryption policy to be used for RTP packets\&. "
.ti -1c
.RI "\fBLinphoneMediaEncryption\fP \fBlinphone_core_get_media_encryption\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Get the media encryption policy being used for RTP packets\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_is_media_encryption_mandatory\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Get behaviour when encryption parameters negociation fails on outgoing call\&. "
.ti -1c
.RI "void \fBlinphone_core_set_media_encryption_mandatory\fP (\fBLinphoneCore\fP *lc, bool_t m)"
.br
.RI "Define behaviour when encryption parameters negociation fails on outgoing call\&. "
.ti -1c
.RI "const char * \fBlinphone_core_get_video_display_filter\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Get the name of the mediastreamer2 filter used for rendering video\&. "
.ti -1c
.RI "void \fBlinphone_core_set_video_display_filter\fP (\fBLinphoneCore\fP *lc, const char *filtername)"
.br
.RI "Set the name of the mediastreamer2 filter to be used for rendering video\&. "
.ti -1c
.RI "const char * \fBlinphone_core_get_echo_canceller_filter_name\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Get the name of the mediastreamer2 filter used for echo cancelling\&. "
.ti -1c
.RI "void \fBlinphone_core_set_echo_canceller_filter_name\fP (\fBLinphoneCore\fP *lc, const char *filtername)"
.br
.RI "Set the name of the mediastreamer2 filter to be used for echo cancelling\&. "
.ti -1c
.RI "const char ** \fBlinphone_core_get_supported_file_formats\fP (\fBLinphoneCore\fP *core)"
.br
.RI "Returns a null terminated table of strings containing the file format extension supported for call recording\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_file_format_supported\fP (\fBLinphoneCore\fP *lc, const char *fmt)"
.br
.RI "Returns whether a specific file format is supported\&. "
.ti -1c
.RI "void \fBlinphone_core_set_avpf_mode\fP (\fBLinphoneCore\fP *lc, \fBLinphoneAVPFMode\fP mode)"
.br
.RI "Enable RTCP feedback (also known as RTP/AVPF profile)\&. "
.ti -1c
.RI "\fBLinphoneAVPFMode\fP \fBlinphone_core_get_avpf_mode\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Return AVPF enablement\&. "
.ti -1c
.RI "void \fBlinphone_core_set_avpf_rr_interval\fP (\fBLinphoneCore\fP *lc, int interval)"
.br
.RI "Set the avpf report interval in seconds\&. "
.ti -1c
.RI "int \fBlinphone_core_get_avpf_rr_interval\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Return the avpf report interval in seconds\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_core_set_audio_multicast_addr\fP (\fBLinphoneCore\fP *lc, const char *ip)"
.br
.RI "Use to set multicast address to be used for audio stream\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_core_set_video_multicast_addr\fP (\fBLinphoneCore\fP *lc, const char *ip)"
.br
.RI "Use to set multicast address to be used for video stream\&. "
.ti -1c
.RI "const char * \fBlinphone_core_get_audio_multicast_addr\fP (const \fBLinphoneCore\fP *core)"
.br
.RI "Use to get multicast address to be used for audio stream\&. "
.ti -1c
.RI "const char * \fBlinphone_core_get_video_multicast_addr\fP (const \fBLinphoneCore\fP *core)"
.br
.RI "Use to get multicast address to be used for video stream\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_core_set_audio_multicast_ttl\fP (\fBLinphoneCore\fP *core, int ttl)"
.br
.RI "Use to set multicast ttl to be used for audio stream\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_core_set_video_multicast_ttl\fP (\fBLinphoneCore\fP *lc, int ttl)"
.br
.RI "Use to set multicast ttl to be used for video stream\&. "
.ti -1c
.RI "int \fBlinphone_core_get_audio_multicast_ttl\fP (const \fBLinphoneCore\fP *core)"
.br
.RI "Use to get multicast ttl to be used for audio stream\&. "
.ti -1c
.RI "int \fBlinphone_core_get_video_multicast_ttl\fP (const \fBLinphoneCore\fP *core)"
.br
.RI "Use to get multicast ttl to be used for video stream\&. "
.ti -1c
.RI "void \fBlinphone_core_enable_audio_multicast\fP (\fBLinphoneCore\fP *core, bool_t yesno)"
.br
.RI "Use to enable multicast rtp for audio stream\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_audio_multicast_enabled\fP (const \fBLinphoneCore\fP *core)"
.br
.RI "Use to get multicast state of audio stream\&. "
.ti -1c
.RI "void \fBlinphone_core_enable_video_multicast\fP (\fBLinphoneCore\fP *core, bool_t yesno)"
.br
.RI "Use to enable multicast rtp for video stream\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_video_multicast_enabled\fP (const \fBLinphoneCore\fP *core)"
.br
.RI "Use to get multicast state of video stream\&. "
.ti -1c
.RI "\fBLinphoneStatus\fP \fBlinphone_core_set_network_simulator_params\fP (\fBLinphoneCore\fP *lc, const OrtpNetworkSimulatorParams *params)"
.br
.RI "Set the network simulator parameters\&. "
.ti -1c
.RI "const OrtpNetworkSimulatorParams * \fBlinphone_core_get_network_simulator_params\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Get the previously set network simulation parameters\&. "
.ti -1c
.RI "void \fBlinphone_core_set_video_preset\fP (\fBLinphoneCore\fP *lc, const char *preset)"
.br
.RI "Set the video preset to be used for video calls\&. "
.ti -1c
.RI "const char * \fBlinphone_core_get_video_preset\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "Get the video preset used for video calls\&. "
.ti -1c
.RI "bool_t \fBlinphone_core_realtime_text_enabled\fP (\fBLinphoneCore\fP *lc)"
.br
.RI "Gets if realtime text is enabled or not\&. "
.ti -1c
.RI "const char * \fBlinphone_media_encryption_to_string\fP (\fBLinphoneMediaEncryption\fP menc)"
.br
.RI "Convert enum member to string\&. "
.ti -1c
.RI "\fBLinphonePayloadType\fP * \fBlinphone_payload_type_ref\fP (\fBLinphonePayloadType\fP *pt)"
.br
.RI "Take a reference on a \fBLinphonePayloadType\fP\&. "
.ti -1c
.RI "void \fBlinphone_payload_type_unref\fP (\fBLinphonePayloadType\fP *pt)"
.br
.RI "Release a reference on a \fBLinphonePayloadType\fP\&. "
.ti -1c
.RI "int \fBlinphone_payload_type_get_type\fP (const \fBLinphonePayloadType\fP *pt)"
.br
.RI "Get the type of a payload type\&. "
.ti -1c
.RI "int \fBlinphone_payload_type_enable\fP (\fBLinphonePayloadType\fP *pt, bool_t enabled)"
.br
.RI "Enable/disable a payload type\&. "
.ti -1c
.RI "bool_t \fBlinphone_payload_type_enabled\fP (const \fBLinphonePayloadType\fP *pt)"
.br
.RI "Check whether a palyoad type is enabled\&. "
.ti -1c
.RI "char * \fBlinphone_payload_type_get_description\fP (const \fBLinphonePayloadType\fP *pt)"
.br
.RI "Return a string describing a payload type\&. "
.ti -1c
.RI "const char * \fBlinphone_payload_type_get_encoder_description\fP (const \fBLinphonePayloadType\fP *pt)"
.br
.RI "Get a description of the encoder used to provide a payload type\&. "
.ti -1c
.RI "int \fBlinphone_payload_type_get_normal_bitrate\fP (const \fBLinphonePayloadType\fP *pt)"
.br
.RI "Get the normal bitrate in bits/s\&. "
.ti -1c
.RI "void \fBlinphone_payload_type_set_normal_bitrate\fP (\fBLinphonePayloadType\fP *pt, int bitrate)"
.br
.RI "Change the normal bitrate of a payload type\&. "
.ti -1c
.RI "const char * \fBlinphone_payload_type_get_mime_type\fP (const \fBLinphonePayloadType\fP *pt)"
.br
.RI "Get the mime type\&. "
.ti -1c
.RI "int \fBlinphone_payload_type_get_channels\fP (const \fBLinphonePayloadType\fP *pt)"
.br
.RI "Get the number of channels\&. "
.ti -1c
.RI "int \fBlinphone_payload_type_get_number\fP (const \fBLinphonePayloadType\fP *pt)"
.br
.RI "Returns the payload type number assigned for this codec\&. "
.ti -1c
.RI "void \fBlinphone_payload_type_set_number\fP (\fBLinphonePayloadType\fP *pt, int number)"
.br
.RI "Force a number for a payload type\&. "
.ti -1c
.RI "const char * \fBlinphone_payload_type_get_recv_fmtp\fP (const \fBLinphonePayloadType\fP *pt)"
.br
.RI "Get the format parameters for incoming streams\&. "
.ti -1c
.RI "void \fBlinphone_payload_type_set_recv_fmtp\fP (\fBLinphonePayloadType\fP *pt, const char *recv_fmtp)"
.br
.RI "Set the format parameters for incoming streams\&. "
.ti -1c
.RI "const char * \fBlinphone_payload_type_get_send_fmtp\fP (const \fBLinphonePayloadType\fP *pt)"
.br
.RI "Get the format parameters for outgoing streams\&. "
.ti -1c
.RI "void \fBlinphone_payload_type_set_send_fmtp\fP (\fBLinphonePayloadType\fP *pt, const char *send_fmtp)"
.br
.RI "Set the format parameters for outgoing streams\&. "
.ti -1c
.RI "int \fBlinphone_payload_type_get_clock_rate\fP (const \fBLinphonePayloadType\fP *pt)"
.br
.RI "Get the clock rate of a payload type\&. "
.ti -1c
.RI "bool_t \fBlinphone_payload_type_is_vbr\fP (const \fBLinphonePayloadType\fP *pt)"
.br
.RI "Tells whether the specified payload type represents a variable bitrate codec\&. "
.ti -1c
.RI "bool_t \fBlinphone_payload_type_is_usable\fP (const \fBLinphonePayloadType\fP *pt)"
.br
.RI "Check whether the payload is usable according the bandwidth targets set in the core\&. "
.ti -1c
.RI "\fBLinphoneVideoDefinition\fP * \fBlinphone_video_definition_ref\fP (\fBLinphoneVideoDefinition\fP *vdef)"
.br
.RI "Acquire a reference to the video definition\&. "
.ti -1c
.RI "void \fBlinphone_video_definition_unref\fP (\fBLinphoneVideoDefinition\fP *vdef)"
.br
.RI "Release reference to the video definition\&. "
.ti -1c
.RI "void * \fBlinphone_video_definition_get_user_data\fP (const \fBLinphoneVideoDefinition\fP *vdef)"
.br
.RI "Retrieve the user pointer associated with the video definition\&. "
.ti -1c
.RI "void \fBlinphone_video_definition_set_user_data\fP (\fBLinphoneVideoDefinition\fP *vdef, void *ud)"
.br
.RI "Assign a user pointer to the video definition\&. "
.ti -1c
.RI "\fBLinphoneVideoDefinition\fP * \fBlinphone_video_definition_clone\fP (const \fBLinphoneVideoDefinition\fP *vdef)"
.br
.RI "Clone a video definition\&. "
.ti -1c
.RI "unsigned int \fBlinphone_video_definition_get_width\fP (const \fBLinphoneVideoDefinition\fP *vdef)"
.br
.RI "Get the width of the video definition\&. "
.ti -1c
.RI "void \fBlinphone_video_definition_set_width\fP (\fBLinphoneVideoDefinition\fP *vdef, unsigned int width)"
.br
.RI "Set the width of the video definition\&. "
.ti -1c
.RI "unsigned int \fBlinphone_video_definition_get_height\fP (const \fBLinphoneVideoDefinition\fP *vdef)"
.br
.RI "Get the height of the video definition\&. "
.ti -1c
.RI "void \fBlinphone_video_definition_set_height\fP (\fBLinphoneVideoDefinition\fP *vdef, unsigned int height)"
.br
.RI "Set the height of the video definition\&. "
.ti -1c
.RI "void \fBlinphone_video_definition_set_definition\fP (\fBLinphoneVideoDefinition\fP *vdef, unsigned int width, unsigned int height)"
.br
.RI "Set the width and the height of the video definition\&. "
.ti -1c
.RI "const char * \fBlinphone_video_definition_get_name\fP (const \fBLinphoneVideoDefinition\fP *vdef)"
.br
.RI "Get the name of the video definition\&. "
.ti -1c
.RI "void \fBlinphone_video_definition_set_name\fP (\fBLinphoneVideoDefinition\fP *vdef, const char *name)"
.br
.RI "Set the name of the video definition\&. "
.ti -1c
.RI "bool_t \fBlinphone_video_definition_equals\fP (const \fBLinphoneVideoDefinition\fP *vdef1, const \fBLinphoneVideoDefinition\fP *vdef2)"
.br
.RI "Tells whether two LinphoneVideoDefinition objects are equal (the widths and the heights are the same but can be switched)\&. "
.ti -1c
.RI "bool_t \fBlinphone_video_definition_strict_equals\fP (const \fBLinphoneVideoDefinition\fP *vdef1, const \fBLinphoneVideoDefinition\fP *vdef2)"
.br
.RI "Tells whether two LinphoneVideoDefinition objects are strictly equal (the widths are the same and the heights are the same)\&. "
.ti -1c
.RI "bool_t \fBlinphone_video_definition_is_undefined\fP (const \fBLinphoneVideoDefinition\fP *vdef)"
.br
.RI "Tells whether a LinphoneVideoDefinition is undefined\&. "
.in -1c
.SH "Detailed Description"
.PP 
Controlling media parameters\&. 

\fBMulticast\fP
.PP
Call using rtp multicast addresses are supported for both audio and video with some limitations\&. Limitations are, no stun, no ice, no encryption\&.
.IP "\(bu" 2
Incoming call with multicast address are automatically accepted\&. The called party switches in a media receive only mode\&.
.IP "\(bu" 2
Outgoing call willing to send media to a multicast address can activate multicast using \fBlinphone_core_enable_video_multicast()\fP or \fBlinphone_core_enable_audio_multicast()\fP\&. The calling party switches in a media listen send only mode\&. 
.PP

.SH "Typedef Documentation"
.PP 
.SS "typedef struct _LinphoneVideoDefinition \fBLinphoneVideoDefinition\fP"

.PP
The LinphoneVideoDefinition object represents a video definition, eg\&. its width and its height\&. 
.SS "typedef struct \fB_LinphoneVideoPolicy\fP  \fBLinphoneVideoPolicy\fP"

.PP
Structure describing policy regarding video streams establishments\&. 
.PP
\fBDeprecated\fP
.RS 4
 
.RE
.PP

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fB_LinphoneAVPFMode\fP"

.PP
Enum describing RTP AVPF activation modes\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILinphoneAVPFDefault \fP\fP
Use default value defined at upper level\&. 
.TP
\fB\fILinphoneAVPFDisabled \fP\fP
AVPF is disabled\&. 
.TP
\fB\fILinphoneAVPFEnabled \fP\fP
AVPF is enabled\&. 
.SS "enum \fB_LinphoneMediaEncryption\fP"

.PP
Enum describing type of media encryption types\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILinphoneMediaEncryptionNone \fP\fP
No media encryption is used\&. 
.TP
\fB\fILinphoneMediaEncryptionSRTP \fP\fP
Use SRTP media encryption\&. 
.TP
\fB\fILinphoneMediaEncryptionZRTP \fP\fP
Use ZRTP media encryption\&. 
.TP
\fB\fILinphoneMediaEncryptionDTLS \fP\fP
Use DTLS media encryption\&. 
.SH "Function Documentation"
.PP 
.SS "void linphone_call_enable_echo_cancellation (\fBLinphoneCall\fP * call, bool_t val)"

.PP
Enables or disable echo cancellation for this call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP 
.br
\fIval\fP 
.RE
.PP

.SS "void linphone_call_enable_echo_limiter (\fBLinphoneCall\fP * call, bool_t val)"

.PP
Enables or disable echo limiter for this call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP 
.br
\fIval\fP 
.RE
.PP

.SS "void linphone_call_params_add_custom_sdp_attribute (\fBLinphoneCallParams\fP * params, const char * attribute_name, const char * attribute_value)"

.PP
Add a custom attribute related to all the streams in the SDP exchanged within SIP messages during a call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparams\fP The \fBLinphoneCallParams\fP to add a custom SDP attribute to\&. 
.br
\fIattribute_name\fP The name of the attribute to add\&. 
.br
\fIattribute_value\fP The content value of the attribute to add\&. 
.RE
.PP

.SS "void linphone_call_params_add_custom_sdp_media_attribute (\fBLinphoneCallParams\fP * params, \fBLinphoneStreamType\fP type, const char * attribute_name, const char * attribute_value)"

.PP
Add a custom attribute related to a specific stream in the SDP exchanged within SIP messages during a call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparams\fP The \fBLinphoneCallParams\fP to add a custom SDP attribute to\&. 
.br
\fItype\fP The type of the stream to add a custom SDP attribute to\&. 
.br
\fIattribute_name\fP The name of the attribute to add\&. 
.br
\fIattribute_value\fP The content value of the attribute to add\&. 
.RE
.PP

.SS "bool_t linphone_call_params_audio_multicast_enabled (const \fBLinphoneCallParams\fP * params)"

.PP
Use to get multicast state of audio stream\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparams\fP \fBLinphoneCallParams\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
true if subsequent calls will propose multicast ip set by \fBlinphone_core_set_audio_multicast_addr\fP 
.RE
.PP

.SS "void linphone_call_params_clear_custom_sdp_attributes (\fBLinphoneCallParams\fP * params)"

.PP
Clear the custom SDP attributes related to all the streams in the SDP exchanged within SIP messages during a call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparams\fP The \fBLinphoneCallParams\fP to clear the custom SDP attributes from\&. 
.RE
.PP

.SS "void linphone_call_params_clear_custom_sdp_media_attributes (\fBLinphoneCallParams\fP * params, \fBLinphoneStreamType\fP type)"

.PP
Clear the custom SDP attributes related to a specific stream in the SDP exchanged within SIP messages during a call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparams\fP The \fBLinphoneCallParams\fP to clear the custom SDP attributes from\&. 
.br
\fItype\fP The type of the stream to clear the custom SDP attributes from\&. 
.RE
.PP

.SS "void linphone_call_params_enable_audio_multicast (\fBLinphoneCallParams\fP * params, bool_t yesno)"

.PP
Use to enable multicast rtp for audio stream\&. 
.IP "\(bu" 2
If enabled, outgoing calls put a multicast address from \fBlinphone_core_get_video_multicast_addr\fP into audio cline\&. In case of outgoing call audio stream is sent to this multicast address\&. 
.br
 For incoming calls behavior is unchanged\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparams\fP \fBLinphoneCallParams\fP 
.br
\fIyesno\fP if yes, subsequent calls will propose multicast ip set by \fBlinphone_core_set_audio_multicast_addr\fP 
.RE
.PP

.PP

.SS "\fBLinphoneStatus\fP linphone_call_params_enable_realtime_text (\fBLinphoneCallParams\fP * params, bool_t yesno)"

.PP
Use to enable real time text following rfc4103\&. If enabled, outgoing calls put a m=text line in SDP offer \&. 
.PP
\fBParameters:\fP
.RS 4
\fIparams\fP \fBLinphoneCallParams\fP 
.br
\fIyesno\fP if yes, subsequent outgoing calls will propose rtt 
.RE
.PP

.SS "void linphone_call_params_enable_video_multicast (\fBLinphoneCallParams\fP * params, bool_t yesno)"

.PP
Use to enable multicast rtp for video stream\&. If enabled, outgoing calls put a multicast address from \fBlinphone_core_get_video_multicast_addr\fP into video cline\&. In case of outgoing call video stream is sent to this multicast address\&. 
.br
 For incoming calls behavior is unchanged\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparams\fP \fBLinphoneCallParams\fP 
.br
\fIyesno\fP if yes, subsequent outgoing calls will propose multicast ip set by \fBlinphone_core_set_video_multicast_addr\fP 
.RE
.PP

.SS "const char* linphone_call_params_get_custom_sdp_attribute (const \fBLinphoneCallParams\fP * params, const char * attribute_name)"

.PP
Get a custom SDP attribute that is related to all the streams\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparams\fP The \fBLinphoneCallParams\fP to get the custom SDP attribute from\&. 
.br
\fIattribute_name\fP The name of the attribute to get\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The content value of the attribute or NULL if not found\&. 
.RE
.PP

.SS "const char* linphone_call_params_get_custom_sdp_media_attribute (const \fBLinphoneCallParams\fP * params, \fBLinphoneStreamType\fP type, const char * attribute_name)"

.PP
Get a custom SDP attribute that is related to a specific stream\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparams\fP The \fBLinphoneCallParams\fP to get the custom SDP attribute from\&. 
.br
\fItype\fP The type of the stream to add a custom SDP attribute to\&. 
.br
\fIattribute_name\fP The name of the attribute to get\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The content value of the attribute or NULL if not found\&. 
.RE
.PP

.SS "bool_t linphone_call_params_realtime_text_enabled (const \fBLinphoneCallParams\fP * params)"

.PP
Use to get real time text following rfc4103\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparams\fP \fBLinphoneCallParams\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
returns true if call rtt is activated\&. 
.RE
.PP

.SS "bool_t linphone_call_params_video_multicast_enabled (const \fBLinphoneCallParams\fP * params)"

.PP
Use to get multicast state of video stream\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparams\fP \fBLinphoneCallParams\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
true if subsequent calls will propose multicast ip set by \fBlinphone_core_set_video_multicast_addr\fP 
.RE
.PP

.SS "void linphone_call_set_native_video_window_id (\fBLinphoneCall\fP * call, void * id)"

.PP
Set the native video window id where the video is to be displayed\&. For MacOS, Linux, Windows: if not set or 0 a window will be automatically created, unless the special id -1 is given\&. 
.SS "bool_t linphone_core_adaptive_rate_control_enabled (const \fBLinphoneCore\fP * lc)"

.PP
Returns whether adaptive rate control is enabled\&. 
.PP
\fBSee also:\fP
.RS 4
\fBlinphone_core_enable_adaptive_rate_control()\fP 
.RE
.PP

.SS "bool_t linphone_core_audio_adaptive_jittcomp_enabled (\fBLinphoneCore\fP * lc)"

.PP
Tells whether the audio adaptive jitter compensation is enabled\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if the audio adaptive jitter compensation is enabled, FALSE otherwise\&. 
.RE
.PP

.SS "bool_t linphone_core_audio_multicast_enabled (const \fBLinphoneCore\fP * core)"

.PP
Use to get multicast state of audio stream\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcore\fP \fBLinphoneCore\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
true if subsequent calls will propose multicast ip set by \fBlinphone_core_set_audio_multicast_addr\fP 
.RE
.PP

.SS "LINPHONE_DEPRECATED bool_t linphone_core_check_payload_type_usability (\fBLinphoneCore\fP * lc, const OrtpPayloadType * pt)"

.PP
Return TRUE if codec can be used with bandwidth, FALSE else\&. 
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_payload_type_is_usable()\fP instead\&.
.RE
.PP
 
.SS "bool_t linphone_core_dns_search_enabled (const \fBLinphoneCore\fP * lc)"

.PP
Tells whether DNS search (use of local domain if the fully qualified name did return results) is enabled\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if DNS search is enabled, FALSE if disabled\&. 
.RE
.PP

.SS "bool_t linphone_core_dns_srv_enabled (const \fBLinphoneCore\fP * lc)"

.PP
Tells whether DNS SRV resolution is enabled\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if DNS SRV resolution is enabled, FALSE if disabled\&. 
.RE
.PP

.SS "bool_t linphone_core_echo_cancellation_enabled (const \fBLinphoneCore\fP * lc)"

.PP
Returns TRUE if echo cancellation is enabled\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean value telling whether echo cancellation is enabled or disabled 
.RE
.PP

.SS "bool_t linphone_core_echo_limiter_enabled (const \fBLinphoneCore\fP * lc)"

.PP
Tells whether echo limiter is enabled\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if the echo limiter is enabled, FALSE otherwise\&. 
.RE
.PP

.SS "void linphone_core_enable_adaptive_rate_control (\fBLinphoneCore\fP * lc, bool_t enabled)"

.PP
Enable adaptive rate control\&. Adaptive rate control consists in using RTCP feedback provided information to dynamically control the output bitrate of the audio and video encoders, so that we can adapt to the network conditions and available bandwidth\&. Control of the audio encoder is done in case of audio-only call, and control of the video encoder is done for audio & video calls\&. Adaptive rate control feature is enabled by default\&. 
.SS "void linphone_core_enable_audio_adaptive_jittcomp (\fBLinphoneCore\fP * lc, bool_t enable)"

.PP
Enable or disable the audio adaptive jitter compensation\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIenable\fP TRUE to enable the audio adaptive jitter compensation, FALSE to disable it\&. 
.RE
.PP

.SS "void linphone_core_enable_audio_multicast (\fBLinphoneCore\fP * core, bool_t yesno)"

.PP
Use to enable multicast rtp for audio stream\&. If enabled, outgoing calls put a multicast address from \fBlinphone_core_get_video_multicast_addr\fP into audio cline\&. In case of outgoing call audio stream is sent to this multicast address\&. For incoming calls behavior is unchanged\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcore\fP \fBLinphoneCore\fP 
.br
\fIyesno\fP if yes, subsequent calls will propose multicast ip set by \fBlinphone_core_set_audio_multicast_addr\fP 
.RE
.PP

.SS "void linphone_core_enable_dns_search (\fBLinphoneCore\fP * lc, bool_t enable)"

.PP
Enable or disable DNS search (use of local domain if the fully qualified name did return results)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fIenable\fP TRUE to enable DNS search, FALSE to disable it\&. 
.RE
.PP

.SS "void linphone_core_enable_dns_srv (\fBLinphoneCore\fP * lc, bool_t enable)"

.PP
Enable or disable DNS SRV resolution\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fIenable\fP TRUE to enable DNS SRV resolution, FALSE to disable it\&. 
.RE
.PP

.SS "void linphone_core_enable_echo_cancellation (\fBLinphoneCore\fP * lc, bool_t val)"

.PP
Enables or disable echo cancellation\&. Value is saved and used for subsequent calls\&. This actually controls software echo cancellation\&. If hardware echo cancellation is available, it will be always used and activated for calls, regardless of the value passed to this function\&. When hardware echo cancellation is available, the software one is of course not activated\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIval\fP A boolean value telling whether echo cancellation is to be enabled or disabled\&. 
.RE
.PP

.SS "void linphone_core_enable_echo_limiter (\fBLinphoneCore\fP * lc, bool_t val)"

.PP
Enables or disable echo limiter\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fIval\fP TRUE to enable echo limiter, FALSE to disable it\&. 
.RE
.PP

.SS "void linphone_core_enable_mic (\fBLinphoneCore\fP * lc, bool_t enable)"

.PP
Enable or disable the microphone\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIenable\fP TRUE to enable the microphone, FALSE to disable it\&. 
.RE
.PP

.SS "LINPHONE_DEPRECATED \fBLinphoneStatus\fP linphone_core_enable_payload_type (\fBLinphoneCore\fP * lc, OrtpPayloadType * pt, bool_t enable)"

.PP
Enable or disable the use of the specified payload type\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fIpt\fP The payload type to enable or disable\&. It can be retrieved using \fBlinphone_core_find_payload_type\fP 
.br
\fIenable\fP TRUE to enable the payload type, FALSE to disable it\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, any other value otherwise\&.
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_payload_type_enable()\fP\&.  
.RE
.PP

.SS "void linphone_core_enable_self_view (\fBLinphoneCore\fP * lc, bool_t val)"

.PP
Enables or disable self view during calls\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIval\fP A boolean value telling whether to enable self view Self-view refers to having local webcam image inserted in corner of the video window during calls\&. This function works at any time, including during calls\&. 
.RE
.PP

.SS "LINPHONE_DEPRECATED void linphone_core_enable_video (\fBLinphoneCore\fP * lc, bool_t vcap_enabled, bool_t display_enabled)"

.PP
Enables video globally\&. This function does not have any effect during calls\&. It just indicates LinphoneCore to initiate future calls with video or not\&. The two boolean parameters indicate in which direction video is enabled\&. Setting both to false disables video entirely\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.br
\fIvcap_enabled\fP indicates whether video capture is enabled 
.br
\fIdisplay_enabled\fP indicates whether video display should be shown
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_core_enable_video_capture\fP and \fBlinphone_core_enable_video_display\fP instead\&.  
.RE
.PP

.SS "void linphone_core_enable_video_adaptive_jittcomp (\fBLinphoneCore\fP * lc, bool_t enable)"

.PP
Enable or disable the video adaptive jitter compensation\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIenable\fP TRUE to enable the video adaptive jitter compensation, FALSE to disable it\&. 
.RE
.PP

.SS "void linphone_core_enable_video_capture (\fBLinphoneCore\fP * lc, bool_t enable)"

.PP
Enable or disable video capture\&. This function does not have any effect during calls\&. It just indicates the \fBLinphoneCore\fP to initiate future calls with video capture or not\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fIenable\fP TRUE to enable video capture, FALSE to disable it\&. 
.RE
.PP

.SS "void linphone_core_enable_video_display (\fBLinphoneCore\fP * lc, bool_t enable)"

.PP
Enable or disable video display\&. This function does not have any effect during calls\&. It just indicates the \fBLinphoneCore\fP to initiate future calls with video display or not\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fIenable\fP TRUE to enable video display, FALSE to disable it\&. 
.RE
.PP

.SS "void linphone_core_enable_video_multicast (\fBLinphoneCore\fP * core, bool_t yesno)"

.PP
Use to enable multicast rtp for video stream\&. If enabled, outgoing calls put a multicast address from \fBlinphone_core_get_video_multicast_addr\fP into video cline\&. In case of outgoing call video stream is sent to this multicast address\&. For incoming calls behavior is unchanged\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcore\fP \fBLinphoneCore\fP 
.br
\fIyesno\fP if yes, subsequent outgoing calls will propose multicast ip set by \fBlinphone_core_set_video_multicast_addr\fP 
.RE
.PP

.SS "void linphone_core_enable_video_preview (\fBLinphoneCore\fP * lc, bool_t val)"

.PP
Controls video preview enablement\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIval\fP A boolean value telling whether the video preview is to be shown Video preview refers to the action of displaying the local webcam image to the user while not in call\&. 
.RE
.PP

.SS "void linphone_core_enable_video_source_reuse (\fBLinphoneCore\fP * lc, bool_t enable)"

.PP
Enable or disable video source reuse when switching from preview to actual video call\&. This source reuse is useful when you always display the preview, even before calls are initiated\&. By keeping the video source for the transition to a real video call, you will smooth out the source close/reopen cycle\&.
.PP
This function does not have any effect durfing calls\&. It just indicates the \fBLinphoneCore\fP to initiate future calls with video source reuse or not\&. Also, at the end of a video call, the source will be closed whatsoever for now\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIenable\fP TRUE to enable video source reuse\&. FALSE to disable it for subsequent calls\&. 
.RE
.PP

.SS "bool_t linphone_core_file_format_supported (\fBLinphoneCore\fP * lc, const char * fmt)"

.PP
Returns whether a specific file format is supported\&. 
.PP
\fBSee also:\fP
.RS 4
\fBlinphone_core_get_supported_file_formats\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP A \fBLinphoneCore\fP object 
.br
\fIfmt\fP The format extension (wav, mkv)\&. 
.RE
.PP

.SS "LINPHONE_DEPRECATED OrtpPayloadType* linphone_core_find_payload_type (\fBLinphoneCore\fP * lc, const char * type, int rate, int channels)"

.PP
Get payload type from mime type and clock rate\&. This function searches in audio and video codecs for the given payload type name and clockrate\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fItype\fP payload mime type (I\&.E SPEEX, PCMU, VP8) 
.br
\fIrate\fP can be \fBLINPHONE_FIND_PAYLOAD_IGNORE_RATE\fP 
.br
\fIchannels\fP number of channels, can be \fBLINPHONE_FIND_PAYLOAD_IGNORE_CHANNELS\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns NULL if not found\&. 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_core_get_payload_type()\fP instead\&.  
.RE
.PP

.SS "const char* linphone_core_get_adaptive_rate_algorithm (const \fBLinphoneCore\fP * lc)"

.PP
Returns which adaptive rate algorithm is currently configured for future calls\&. 
.PP
\fBSee also:\fP
.RS 4
\fBlinphone_core_set_adaptive_rate_algorithm()\fP 
.RE
.PP

.SS "LINPHONE_DEPRECATED const bctbx_list_t* linphone_core_get_audio_codecs (const \fBLinphoneCore\fP * lc)"

.PP
Returns the list of available audio codecs\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
A list of \fBOrtpPayloadType\fP objects\&.
.RE
.PP
This list is unmodifiable\&. The ->data field of the bctbx_list_t points a PayloadType structure holding the codec information\&. It is possible to make copy of the list with bctbx_list_copy() in order to modify it (such as the order of codecs)\&.
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_core_get_audio_payload_types()\fP instead\&.  
.RE
.PP

.SS "int linphone_core_get_audio_jittcomp (\fBLinphoneCore\fP * lc)"

.PP
Returns the nominal audio jitter buffer size in milliseconds\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The nominal audio jitter buffer size in milliseconds 
.RE
.PP

.SS "const char* linphone_core_get_audio_multicast_addr (const \fBLinphoneCore\fP * core)"

.PP
Use to get multicast address to be used for audio stream\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcore\fP \fBLinphoneCore\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
an ipv4/6 multicast address or default value 
.RE
.PP

.SS "int linphone_core_get_audio_multicast_ttl (const \fBLinphoneCore\fP * core)"

.PP
Use to get multicast ttl to be used for audio stream\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcore\fP \fBLinphoneCore\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
a time to leave value 
.RE
.PP

.SS "bctbx_list_t* linphone_core_get_audio_payload_types (\fBLinphoneCore\fP * lc)"

.PP
Return the list of the available audio payload types\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The core\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A list of \fBLinphonePayloadType\fP objects\&. A freshly allocated list of the available payload types\&. The list must be destroyed with bctbx_list_free() after usage\&. The elements of the list haven't to be unref\&. 
.RE
.PP

.SS "\fBLinphoneAVPFMode\fP linphone_core_get_avpf_mode (const \fBLinphoneCore\fP * lc)"

.PP
Return AVPF enablement\&. See \fBlinphone_core_set_avpf_mode()\fP \&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The current AVPF mode 
.RE
.PP

.SS "int linphone_core_get_avpf_rr_interval (const \fBLinphoneCore\fP * lc)"

.PP
Return the avpf report interval in seconds\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The current AVPF report interval in seconds 
.RE
.PP

.SS "const char* linphone_core_get_capture_device (\fBLinphoneCore\fP * lc)"

.PP
Gets the name of the currently assigned sound device for capture\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The name of the currently assigned sound device for capture 
.RE
.PP

.SS "\fBLinphoneVideoDefinition\fP* linphone_core_get_current_preview_video_definition (const \fBLinphoneCore\fP * lc)"

.PP
Get the effective video definition provided by the camera for the captured video\&. When preview is disabled or not yet started this function returns a 0x0 video definition\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The captured LinphoneVideoDefinition
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlinphone_core_set_preview_video_definition()\fP 
.RE
.PP

.SS "LINPHONE_DEPRECATED MSVideoSize linphone_core_get_current_preview_video_size (const \fBLinphoneCore\fP * lc)"

.PP
Returns the effective video size for the captured video as provided by the camera\&. When preview is disabled or not yet started, this function returns a zeroed video size\&. 
.PP
\fBSee also:\fP
.RS 4
\fBlinphone_core_set_preview_video_size()\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the core 
.RE
.PP
\fBReturns:\fP
.RS 4
a MSVideoSize 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_core_get_current_preview_video_definition()\fP instead 
.RE
.PP

.SS "int linphone_core_get_device_rotation (\fBLinphoneCore\fP * lc)"

.PP
Gets the current device orientation\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The current device orientation
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlinphone_core_set_device_rotation()\fP 
.RE
.PP

.SS "int linphone_core_get_download_bandwidth (const \fBLinphoneCore\fP * lc)"

.PP
Retrieve the maximum available download bandwidth\&. This value was set by \fBlinphone_core_set_download_bandwidth()\fP\&. 
.SS "int linphone_core_get_download_ptime (\fBLinphoneCore\fP * lc)"

.PP
Get audio packetization time linphone expects to receive from peer\&. A value of zero means that ptime is not specified\&. 
.SS "const char* linphone_core_get_echo_canceller_filter_name (const \fBLinphoneCore\fP * lc)"

.PP
Get the name of the mediastreamer2 filter used for echo cancelling\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The name of the mediastreamer2 filter used for echo cancelling 
.RE
.PP

.SS "\fBLinphoneMediaEncryption\fP linphone_core_get_media_encryption (\fBLinphoneCore\fP * lc)"

.PP
Get the media encryption policy being used for RTP packets\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The media encryption policy being used\&. 
.RE
.PP

.SS "float linphone_core_get_mic_gain_db (\fBLinphoneCore\fP * lc)"

.PP
Get microphone gain in db\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The current microphone gain 
.RE
.PP

.SS "void* linphone_core_get_native_preview_window_id (const \fBLinphoneCore\fP * lc)"

.PP
Get the native window handle of the video preview window\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The native window handle of the video preview window 
.RE
.PP

.SS "void* linphone_core_get_native_video_window_id (const \fBLinphoneCore\fP * lc)"

.PP
Get the native window handle of the video window\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The native window handle of the video window 
.RE
.PP

.SS "const OrtpNetworkSimulatorParams* linphone_core_get_network_simulator_params (const \fBLinphoneCore\fP * lc)"

.PP
Get the previously set network simulation parameters\&. 
.PP
\fBSee also:\fP
.RS 4
\fBlinphone_core_set_network_simulator_params\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
a OrtpNetworkSimulatorParams structure\&. 
.RE
.PP

.SS "int linphone_core_get_nortp_timeout (const \fBLinphoneCore\fP * lc)"

.PP
Gets the value of the no-rtp timeout\&. When no RTP or RTCP packets have been received for a while LinphoneCore will consider the call is broken (remote end crashed or disconnected from the network), and thus will terminate the call\&. The no-rtp timeout is the duration above which the call is considered broken\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The value of the no-rtp timeout in seconds 
.RE
.PP

.SS "\fBLinphonePayloadType\fP* linphone_core_get_payload_type (\fBLinphoneCore\fP * lc, const char * type, int rate, int channels)"

.PP
Get payload type from mime type and clock rate\&. This function searches in audio and video codecs for the given payload type name and clockrate\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fItype\fP payload mime type (I\&.E SPEEX, PCMU, VP8) 
.br
\fIrate\fP can be \fBLINPHONE_FIND_PAYLOAD_IGNORE_RATE\fP 
.br
\fIchannels\fP number of channels, can be \fBLINPHONE_FIND_PAYLOAD_IGNORE_CHANNELS\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns NULL if not found\&. If a \fBLinphonePayloadType\fP is returned, it must be released with \fBlinphone_payload_type_unref()\fP after using it\&. 
.RE
.PP
\fBWarning:\fP
.RS 4
The returned payload type is allocated as a floating reference i\&.e\&. the reference counter is initialized to 0\&. 
.RE
.PP

.SS "LINPHONE_DEPRECATED int linphone_core_get_payload_type_bitrate (\fBLinphoneCore\fP * lc, const OrtpPayloadType * pt)"

.PP
Get the bitrate explicitely set with \fBlinphone_core_set_payload_type_bitrate()\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the \fBLinphoneCore\fP object 
.br
\fIpt\fP the payload type to modify\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
bitrate the IP bitrate in kbit/s, or -1 if an error occured\&.
.RE
.PP
\fBDeprecated\fP
.RS 4
Use linphone_payload_type_get_bitrate()\&.  
.RE
.PP

.SS "LINPHONE_DEPRECATED int linphone_core_get_payload_type_number (\fBLinphoneCore\fP * lc, const OrtpPayloadType * pt)"

.PP
Returns the payload type number assigned for this codec\&. 
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_payload_type_get_number()\fP instead  
.RE
.PP

.SS "const char* linphone_core_get_play_file (const \fBLinphoneCore\fP * lc)"

.PP
Get the wav file that is played when putting somebody on hold, or when files are used instead of soundcards (see \fBlinphone_core_set_use_files()\fP)\&. The file is a 16 bit linear wav file\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The path to the file that is played when putting somebody on hold\&. 
.RE
.PP

.SS "LINPHONE_DEPRECATED int linphone_core_get_play_level (\fBLinphoneCore\fP * lc)"

.PP
Get playback sound level in 0-100 scale\&. 
.PP
\fBDeprecated\fP
.RS 4
 
.RE
.PP

.SS "const char* linphone_core_get_playback_device (\fBLinphoneCore\fP * lc)"

.PP
Gets the name of the currently assigned sound device for playback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The name of the currently assigned sound device for playback 
.RE
.PP

.SS "float linphone_core_get_playback_gain_db (\fBLinphoneCore\fP * lc)"

.PP
Get playback gain in db before entering sound card\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The current playback gain 
.RE
.PP

.SS "float linphone_core_get_preferred_framerate (\fBLinphoneCore\fP * lc)"

.PP
Returns the preferred video framerate, previously set by \fBlinphone_core_set_preferred_framerate()\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the linphone core 
.RE
.PP
\fBReturns:\fP
.RS 4
frame rate in number of frames per seconds\&. 
.RE
.PP

.SS "const \fBLinphoneVideoDefinition\fP* linphone_core_get_preferred_video_definition (const \fBLinphoneCore\fP * lc)"

.PP
Get the preferred video definition for the stream that is captured and sent to the remote party\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The preferred LinphoneVideoDefinition 
.RE
.PP

.SS "LINPHONE_DEPRECATED MSVideoSize linphone_core_get_preferred_video_size (const \fBLinphoneCore\fP * lc)"

.PP
Returns the current preferred video size for sending\&. 
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_core_get_preferred_video_definition()\fP instead 
.RE
.PP

.SS "const \fBLinphoneVideoDefinition\fP* linphone_core_get_preview_video_definition (const \fBLinphoneCore\fP * lc)"

.PP
Get the definition of the captured video\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The captured LinphoneVideoDefinition if it was previously set by \fBlinphone_core_set_preview_video_definition()\fP, otherwise a 0x0 LinphoneVideoDefinition\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlinphone_core_set_preview_video_definition()\fP 
.RE
.PP

.SS "LINPHONE_DEPRECATED MSVideoSize linphone_core_get_preview_video_size (const \fBLinphoneCore\fP * lc)"

.PP
Returns video size for the captured video if it was previously set by \fBlinphone_core_set_preview_video_size()\fP, otherwise returns a 0,0 size\&. 
.PP
\fBSee also:\fP
.RS 4
\fBlinphone_core_set_preview_video_size()\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the core 
.RE
.PP
\fBReturns:\fP
.RS 4
a MSVideoSize 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_core_get_preview_video_definition()\fP instead 
.RE
.PP

.SS "LINPHONE_DEPRECATED int linphone_core_get_rec_level (\fBLinphoneCore\fP * lc)"

.PP
Get sound capture level in 0-100 scale\&. 
.PP
\fBDeprecated\fP
.RS 4
 
.RE
.PP

.SS "const char* linphone_core_get_record_file (const \fBLinphoneCore\fP * lc)"

.PP
Get the wav file where incoming stream is recorded, when files are used instead of soundcards (see \fBlinphone_core_set_use_files()\fP)\&. This feature is different from call recording (\fBlinphone_call_params_set_record_file()\fP) The file is a 16 bit linear wav file\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The path to the file where incoming stream is recorded\&. 
.RE
.PP

.SS "const char* linphone_core_get_remote_ringback_tone (const \fBLinphoneCore\fP * lc)"

.PP
Get the ring back tone played to far end during incoming calls\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.RE
.PP

.SS "const char* linphone_core_get_ring (const \fBLinphoneCore\fP * lc)"

.PP
Returns the path to the wav file used for ringing\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The path to the wav file used for ringing 
.RE
.PP

.SS "bool_t linphone_core_get_ring_during_incoming_early_media (const \fBLinphoneCore\fP * lc)"

.PP
Tells whether the ring play is enabled during an incoming early media call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.RE
.PP

.SS "LINPHONE_DEPRECATED int linphone_core_get_ring_level (\fBLinphoneCore\fP * lc)"

.PP
Get ring sound level in 0-100 scale\&. 
.PP
\fBDeprecated\fP
.RS 4
 
.RE
.PP

.SS "const char* linphone_core_get_ringback (const \fBLinphoneCore\fP * lc)"

.PP
Returns the path to the wav file used for ringing back\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The path to the wav file used for ringing back 
.RE
.PP

.SS "const char* linphone_core_get_ringer_device (\fBLinphoneCore\fP * lc)"

.PP
Gets the name of the currently assigned sound device for ringing\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The name of the currently assigned sound device for ringing 
.RE
.PP

.SS "int linphone_core_get_sip_transport_timeout (\fBLinphoneCore\fP * lc)"

.PP
Get the SIP transport timeout\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The SIP transport timeout in milliseconds\&. 
.RE
.PP

.SS "const char** linphone_core_get_sound_devices (\fBLinphoneCore\fP * lc)"

.PP
Gets the list of the available sound devices\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
An unmodifiable array of strings contanining the names of the available sound devices that is NULL terminated 
.RE
.PP

.SS "const char* linphone_core_get_static_picture (\fBLinphoneCore\fP * lc)"

.PP
Get the path to the image file streamed when 'Static picture' is set as the video device\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The path to the image file streamed when 'Static picture' is set as the video device\&. 
.RE
.PP

.SS "float linphone_core_get_static_picture_fps (\fBLinphoneCore\fP * lc)"

.PP
Get the frame rate for static picture\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The frame rate used for static picture\&. 
.RE
.PP

.SS "const char** linphone_core_get_supported_file_formats (\fBLinphoneCore\fP * core)"

.PP
Returns a null terminated table of strings containing the file format extension supported for call recording\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcore\fP the core 
.RE
.PP
\fBReturns:\fP
.RS 4
the supported formats, typically 'wav' and 'mkv' 
.RE
.PP

.SS "LINPHONE_DEPRECATED const \fBMSVideoSizeDef\fP* linphone_core_get_supported_video_sizes (\fBLinphoneCore\fP * lc)"

.PP
Returns the zero terminated table of supported video resolutions\&. 
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_factory_get_supported_video_definitions()\fP instead 
.RE
.PP

.SS "LINPHONE_DEPRECATED const bctbx_list_t* linphone_core_get_text_codecs (const \fBLinphoneCore\fP * lc)"

.PP
Returns the list of available text codecs\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
A list of \fBOrtpPayloadType\fP objects\&.
.RE
.PP
This list is unmodifiable\&. The ->data field of the bctbx_list_t points a PayloadType structure holding the codec information\&. It is possible to make copy of the list with bctbx_list_copy() in order to modify it (such as the order of codecs)\&.
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_core_get_text_payload_types()\fP instead\&.  
.RE
.PP

.SS "bctbx_list_t* linphone_core_get_text_payload_types (\fBLinphoneCore\fP * lc)"

.PP
Return the list of the available text payload types\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The core\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A list of \fBLinphonePayloadType\fP objects\&. A freshly allocated list of the available payload types\&. The list must be destroyed with bctbx_list_free() after usage\&. The elements of the list haven't to be unref\&. 
.RE
.PP

.SS "int linphone_core_get_upload_bandwidth (const \fBLinphoneCore\fP * lc)"

.PP
Retrieve the maximum available upload bandwidth\&. This value was set by \fBlinphone_core_set_upload_bandwidth()\fP\&. 
.SS "bool_t linphone_core_get_use_files (\fBLinphoneCore\fP * lc)"

.PP
Gets whether linphone is currently streaming audio from and to files, rather than using the soundcard\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean value representing whether linphone is streaming audio from and to files or not\&. 
.RE
.PP

.SS "bool_t linphone_core_get_use_info_for_dtmf (\fBLinphoneCore\fP * lc)"

.PP
Indicates whether SIP INFO is used to send digits\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean value telling whether SIP INFO is used to send digits 
.RE
.PP

.SS "bool_t linphone_core_get_use_rfc2833_for_dtmf (\fBLinphoneCore\fP * lc)"

.PP
Indicates whether RFC2833 is used to send digits\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean value telling whether RFC2833 is used to send digits 
.RE
.PP

.SS "\fBLinphoneVideoActivationPolicy\fP* linphone_core_get_video_activation_policy (const \fBLinphoneCore\fP * lc)"

.PP
Get the default policy for video\&. See \fBlinphone_core_set_video_activation_policy()\fP for more details\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The video policy being used 
.RE
.PP

.SS "LINPHONE_DEPRECATED const bctbx_list_t* linphone_core_get_video_codecs (const \fBLinphoneCore\fP * lc)"

.PP
Returns the list of available video codecs\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
A list of \fBOrtpPayloadType\fP objects\&.
.RE
.PP
This list is unmodifiable\&. The ->data field of the bctbx_list_t points a PayloadType structure holding the codec information\&. It is possible to make copy of the list with bctbx_list_copy() in order to modify it (such as the order of codecs)\&.
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_core_get_video_payload_types()\fP instead\&.  
.RE
.PP

.SS "const char* linphone_core_get_video_device (const \fBLinphoneCore\fP * lc)"

.PP
Returns the name of the currently active video device\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The name of the currently active video device 
.RE
.PP

.SS "const char** linphone_core_get_video_devices (const \fBLinphoneCore\fP * lc)"

.PP
Gets the list of the available video capture devices\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
An unmodifiable array of strings contanining the names of the available video capture devices that is NULL terminated 
.RE
.PP

.SS "int linphone_core_get_video_jittcomp (\fBLinphoneCore\fP * lc)"

.PP
Returns the nominal video jitter buffer size in milliseconds\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The nominal video jitter buffer size in milliseconds 
.RE
.PP

.SS "const char* linphone_core_get_video_multicast_addr (const \fBLinphoneCore\fP * core)"

.PP
Use to get multicast address to be used for video stream\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcore\fP \fBLinphoneCore\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
an ipv4/6 multicast address, or default value 
.RE
.PP

.SS "int linphone_core_get_video_multicast_ttl (const \fBLinphoneCore\fP * core)"

.PP
Use to get multicast ttl to be used for video stream\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcore\fP \fBLinphoneCore\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
a time to leave value 
.RE
.PP

.SS "bctbx_list_t* linphone_core_get_video_payload_types (\fBLinphoneCore\fP * lc)"

.PP
Return the list of the available video payload types\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The core\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A list of \fBLinphonePayloadType\fP objects\&. A freshly allocated list of the available payload types\&. The list must be destroyed with bctbx_list_free() after usage\&. The elements of the list haven't to be unref\&. 
.RE
.PP

.SS "LINPHONE_DEPRECATED const \fBLinphoneVideoPolicy\fP* linphone_core_get_video_policy (const \fBLinphoneCore\fP * lc)"

.PP
Get the default policy for video\&. See \fBlinphone_core_set_video_policy()\fP for more details\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The video policy being used
.RE
.PP
\fBDeprecated\fP
.RS 4
.RE
.PP

.SS "const char* linphone_core_get_video_preset (const \fBLinphoneCore\fP * lc)"

.PP
Get the video preset used for video calls\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
The name of the video preset used for video calls (can be NULL if the default video preset is used)\&. 
.RE
.PP

.SS "bool_t linphone_core_is_media_encryption_mandatory (\fBLinphoneCore\fP * lc)"

.PP
Get behaviour when encryption parameters negociation fails on outgoing call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE means the call will fail; FALSE means an INVITE will be resent with encryption disabled\&. 
.RE
.PP

.SS "bool_t linphone_core_mic_enabled (\fBLinphoneCore\fP * lc)"

.PP
Tells whether the microphone is enabled\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if the microphone is enabled, FALSE if disabled\&. 
.RE
.PP

.SS "LINPHONE_DEPRECATED bool_t linphone_core_payload_type_enabled (const \fBLinphoneCore\fP * lc, const OrtpPayloadType * pt)"

.PP
Tells whether the specified payload type is enabled\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fIpt\fP The payload type to check\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if the payload type is enabled, FALSE if disabled\&.
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_payload_type_enabled()\fP instead\&.  
.RE
.PP

.SS "LINPHONE_DEPRECATED bool_t linphone_core_payload_type_is_vbr (const \fBLinphoneCore\fP * lc, const OrtpPayloadType * pt)"

.PP
Tells whether the specified payload type represents a variable bitrate codec\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fIpt\fP The payload type to check\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if the payload type represents a VBR codec, FALSE if disabled\&.
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_payload_type_is_vbr()\fP instead\&.  
.RE
.PP

.SS "void linphone_core_play_dtmf (\fBLinphoneCore\fP * lc, char dtmf, int duration_ms)"

.PP
Plays a dtmf sound to the local user\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIdtmf\fP DTMF to play ['0'\&.\&.'16'] | '#' | '#' 
.br
\fIduration_ms\fP Duration in ms, -1 means play until next further call to \fBlinphone_core_stop_dtmf()\fP 
.RE
.PP

.SS "void linphone_core_preview_ogl_render (const \fBLinphoneCore\fP * lc)"

.PP
Call generic OpenGL render for a given core\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The core\&. 
.RE
.PP

.SS "bool_t linphone_core_realtime_text_enabled (\fBLinphoneCore\fP * lc)"

.PP
Gets if realtime text is enabled or not\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
true if realtime text is enabled, false otherwise 
.RE
.PP

.SS "void linphone_core_reload_sound_devices (\fBLinphoneCore\fP * lc)"

.PP
Update detection of sound devices\&. Use this function when the application is notified of USB plug events, so that list of available hardwares for sound playback and capture is updated\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.RE
.PP

.SS "void linphone_core_reload_video_devices (\fBLinphoneCore\fP * lc)"

.PP
Update detection of camera devices\&. Use this function when the application is notified of USB plug events, so that list of available hardwares for video capture is updated\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.RE
.PP

.SS "bool_t linphone_core_self_view_enabled (const \fBLinphoneCore\fP * lc)"

.PP
Tells whether video self view during call is enabled or not\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean value telling whether self view is enabled 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlinphone_core_enable_self_view()\fP for details\&. 
.RE
.PP

.SS "LINPHONE_DEPRECATED void linphone_core_send_dtmf (\fBLinphoneCore\fP * lc, char dtmf)"

.PP
Send the specified dtmf\&. 
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_call_send_dtmf\fP instead\&. This function only works during calls\&. The dtmf is automatically played to the user\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.br
\fIdtmf\fP The dtmf name specified as a char, such as '0', '#' etc\&.\&.\&.  
.RE
.PP

.SS "void linphone_core_set_adaptive_rate_algorithm (\fBLinphoneCore\fP * lc, const char * algorithm)"

.PP
Sets adaptive rate algorithm\&. It will be used for each new calls starting from now\&. Calls already started will not be updated\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the core 
.br
\fIalgorithm\fP the adaptive rate control algorithm\&. Currently two values are supported: 'advanced', which is the default value, or 'basic'\&. 
.RE
.PP

.SS "LINPHONE_DEPRECATED \fBLinphoneStatus\fP linphone_core_set_audio_codecs (\fBLinphoneCore\fP * lc, bctbx_list_t * codecs)"

.PP
Sets the list of audio codecs\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.br
\fIcodecs\fP A list of \fBOrtpPayloadType\fP objects\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 The list is taken by the LinphoneCore thus the application should not free it\&. This list is made of struct PayloadType describing the codec parameters\&.
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_core_set_audio_payload_types()\fP instead\&.  
.RE
.PP

.SS "void linphone_core_set_audio_jittcomp (\fBLinphoneCore\fP * lc, int milliseconds)"

.PP
Sets the nominal audio jitter buffer size in milliseconds\&. The value takes effect immediately for all running and pending calls, if any\&. A value of 0 disables the jitter buffer\&. 
.SS "\fBLinphoneStatus\fP linphone_core_set_audio_multicast_addr (\fBLinphoneCore\fP * lc, const char * ip)"

.PP
Use to set multicast address to be used for audio stream\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcore\fP \fBLinphoneCore\fP 
.br
\fIip\fP an ipv4/6 multicast address 
.RE
.PP
\fBReturns:\fP
.RS 4
0 in case of success 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_core_set_audio_multicast_ttl (\fBLinphoneCore\fP * core, int ttl)"

.PP
Use to set multicast ttl to be used for audio stream\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcore\fP \fBLinphoneCore\fP 
.br
\fIttl\fP value or -1 if not used\&. [0\&.\&.255] default value is 1 
.RE
.PP
\fBReturns:\fP
.RS 4
0 in case of success 
.RE
.PP

.SS "void linphone_core_set_audio_payload_types (\fBLinphoneCore\fP * lc, const bctbx_list_t * payload_types)"

.PP
Redefine the list of the available payload types\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The core\&. 
.br
\fIpayload_types\fP A list of \fBLinphonePayloadType\fP objects\&. The new list of payload types\&. The core does not take ownership on it\&. 
.RE
.PP

.SS "void linphone_core_set_audio_port_range (\fBLinphoneCore\fP * lc, int min_port, int max_port)"

.PP
Sets the UDP port range from which to randomly select the port used for audio streaming\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fImin_port\fP The lower bound of the audio port range to use 
.br
\fImax_port\fP The upper bound of the audio port range to use 
.RE
.PP

.SS "void linphone_core_set_avpf_mode (\fBLinphoneCore\fP * lc, \fBLinphoneAVPFMode\fP mode)"

.PP
Enable RTCP feedback (also known as RTP/AVPF profile)\&. Setting LinphoneAVPFDefault is equivalent to LinphoneAVPFDisabled\&. This setting can be overriden per LinphoneProxyConfig with \fBlinphone_proxy_config_set_avpf_mode()\fP\&. The value set here is used for calls placed or received out of any proxy configured, or if the proxy config is configured with LinphoneAVPFDefault\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fImode\fP The AVPF mode to use\&. 
.RE
.PP

.SS "void linphone_core_set_avpf_rr_interval (\fBLinphoneCore\fP * lc, int interval)"

.PP
Set the avpf report interval in seconds\&. This value can be overriden by the proxy config using \fBlinphone_proxy_config_set_avpf_rr_interval()\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIinterval\fP The report interval in seconds 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_core_set_capture_device (\fBLinphoneCore\fP * lc, const char * devid)"

.PP
Sets the sound device used for capture\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIdevid\fP The device name as returned by \fBlinphone_core_get_sound_devices()\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
0 
.RE
.PP

.SS "void linphone_core_set_device_rotation (\fBLinphoneCore\fP * lc, int rotation)"

.PP
Tells the core the device current orientation\&. This can be used by capture filters on mobile devices to select between portrait/landscape mode and to produce properly oriented images\&. The exact meaning of the value in rotation if left to each device specific implementations\&. IOS supported values are 0 for UIInterfaceOrientationPortrait and 270 for UIInterfaceOrientationLandscapeRight\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIrotation\fP The orientation to use 
.RE
.PP

.SS "void linphone_core_set_dns_servers (\fBLinphoneCore\fP * lc, const bctbx_list_t * servers)"

.PP
Forces liblinphone to use the supplied list of dns servers, instead of system's ones\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fIservers\fP A list of \fBconst\fP char * objects\&. A list of strings containing the IP addresses of DNS servers to be used\&. Setting to NULL restores default behaviour, which is to use the DNS server list provided by the system\&. The list is copied internally\&. 
.RE
.PP

.SS "void linphone_core_set_download_bandwidth (\fBLinphoneCore\fP * lc, int bw)"

.PP
Sets maximum available download bandwidth This is IP bandwidth, in kbit/s\&. This information is used signaled to other parties during calls (within SDP messages) so that the remote end can have sufficient knowledge to properly configure its audio & video codec output bitrate to not overflow available bandwidth\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the LinphoneCore object 
.br
\fIbw\fP the bandwidth in kbits/s, 0 for infinite 
.RE
.PP

.SS "void linphone_core_set_download_ptime (\fBLinphoneCore\fP * lc, int ptime)"

.PP
Set audio packetization time linphone expects to receive from peer\&. A value of zero means that ptime is not specified\&. 
.SS "void linphone_core_set_echo_canceller_filter_name (\fBLinphoneCore\fP * lc, const char * filtername)"

.PP
Set the name of the mediastreamer2 filter to be used for echo cancelling\&. This is for advanced users of the library\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIfiltername\fP The name of the mediastreamer2 filter to be used for echo cancelling 
.RE
.PP

.SS "void linphone_core_set_expected_bandwidth (\fBLinphoneCore\fP * lc, int bw)"

.PP
Sets expected available upload bandwidth This is IP bandwidth, in kbit/s\&. This information is used by liblinphone together with remote side available bandwidth signaled in SDP messages to properly configure audio & video codec's output bitrate\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the LinphoneCore object 
.br
\fIbw\fP the bandwidth in kbits/s, 0 for infinite 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_core_set_media_encryption (\fBLinphoneCore\fP * lc, \fBLinphoneMediaEncryption\fP menc)"

.PP
Choose the media encryption policy to be used for RTP packets\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fImenc\fP The media encryption policy to be used\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, any other value otherwise\&. 
.RE
.PP

.SS "void linphone_core_set_media_encryption_mandatory (\fBLinphoneCore\fP * lc, bool_t m)"

.PP
Define behaviour when encryption parameters negociation fails on outgoing call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fIm\fP If set to TRUE call will fail; if set to FALSE will resend an INVITE with encryption disabled\&. 
.RE
.PP

.SS "void linphone_core_set_mic_gain_db (\fBLinphoneCore\fP * lc, float level)"

.PP
Allow to control microphone level: gain in db\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIlevel\fP The new microphone level 
.RE
.PP

.SS "void linphone_core_set_mtu (\fBLinphoneCore\fP * lc, int mtu)"

.PP
Sets the maximum transmission unit size in bytes\&. This information is useful for sending RTP packets\&. Default value is 1500\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fImtu\fP The MTU in bytes 
.RE
.PP

.SS "void linphone_core_set_native_preview_window_id (\fBLinphoneCore\fP * lc, void * id)"

.PP
Set the native window id where the preview video (local camera) is to be displayed\&. This has to be used in conjonction with \fBlinphone_core_use_preview_window()\fP\&. MacOS, Linux, Windows: if not set or zero the core will create its own window, unless the special id -1 is given\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIid\fP The native window id where the preview video is to be displayed 
.RE
.PP

.SS "void linphone_core_set_native_video_window_id (\fBLinphoneCore\fP * lc, void * id)"

.PP
Set the native video window id where the video is to be displayed\&. For MacOS, Linux, Windows: if not set or LINPHONE_VIDEO_DISPLAY_AUTO the core will create its own window, unless the special id LINPHONE_VIDEO_DISPLAY_NONE is given\&. 
.SS "\fBLinphoneStatus\fP linphone_core_set_network_simulator_params (\fBLinphoneCore\fP * lc, const OrtpNetworkSimulatorParams * params)"

.PP
Set the network simulator parameters\&. Liblinphone has the capabability of simulating the effects of a network (latency, lost packets, jitter, max bandwidth)\&. Please refer to the oRTP documentation for the meaning of the parameters of the OrtpNetworkSimulatorParams structure\&. This function has effect for future calls, but not for currently running calls, though this behavior may be changed in future versions\&. 
.PP
\fBWarning:\fP
.RS 4
Due to design of network simulation in oRTP, simulation is applied independently for audio and video stream\&. This means for example that a bandwidth limit of 250kbit/s will have no effect on an audio stream running at 40kbit/s while a videostream targetting 400kbit/s will be highly affected\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the LinphoneCore 
.br
\fIparams\fP the parameters used for the network simulation\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, -1 otherwise\&. 
.RE
.PP

.SS "void linphone_core_set_nortp_timeout (\fBLinphoneCore\fP * lc, int seconds)"

.PP
Sets the no-rtp timeout value in seconds\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIseconds\fP The no-rtp timeout value to use in seconds
.RE
.PP
\fBSee also:\fP
.RS 4
\fBlinphone_core_get_nortp_timeout()\fP for details\&. 
.RE
.PP

.SS "LINPHONE_DEPRECATED void linphone_core_set_payload_type_bitrate (\fBLinphoneCore\fP * lc, OrtpPayloadType * pt, int bitrate)"

.PP
Set an explicit bitrate (IP bitrate, not codec bitrate) for a given codec, in kbit/s\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the \fBLinphoneCore\fP object 
.br
\fIpt\fP the payload type to modify\&. 
.br
\fIbitrate\fP the IP bitrate in kbit/s\&.
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_payload_type_set_normal_bitrate()\fP instead\&.  
.RE
.PP

.SS "LINPHONE_DEPRECATED void linphone_core_set_payload_type_number (\fBLinphoneCore\fP * lc, OrtpPayloadType * pt, int number)"

.PP
Force a number for a payload type\&. The LinphoneCore does payload type number assignment automatically\&. THis function is to be used mainly for tests, in order to override the automatic assignment mechanism\&.
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_payload_type_set_number()\fP instead  
.RE
.PP

.SS "void linphone_core_set_play_file (\fBLinphoneCore\fP * lc, const char * file)"

.PP
Sets a wav file to be played when putting somebody on hold, or when files are used instead of soundcards (see \fBlinphone_core_set_use_files()\fP)\&. The file must be a 16 bit linear wav file\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIfile\fP The path to the file to be played when putting somebody on hold\&. 
.RE
.PP

.SS "LINPHONE_DEPRECATED void linphone_core_set_play_level (\fBLinphoneCore\fP * lc, int level)"

.PP
Set sound playback level in 0-100 scale\&. 
.PP
\fBDeprecated\fP
.RS 4
 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_core_set_playback_device (\fBLinphoneCore\fP * lc, const char * devid)"

.PP
Sets the sound device used for playback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIdevid\fP The device name as returned by \fBlinphone_core_get_sound_devices()\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
0 
.RE
.PP

.SS "void linphone_core_set_playback_gain_db (\fBLinphoneCore\fP * lc, float level)"

.PP
Allow to control play level before entering sound card: gain in db\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIlevel\fP The new play level 
.RE
.PP

.SS "void linphone_core_set_preferred_framerate (\fBLinphoneCore\fP * lc, float fps)"

.PP
Set the preferred frame rate for video\&. Based on the available bandwidth constraints and network conditions, the video encoder remains free to lower the framerate\&. There is no warranty that the preferred frame rate be the actual framerate\&. used during a call\&. Default value is 0, which means 'use encoder's default fps value'\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the LinphoneCore 
.br
\fIfps\fP the target frame rate in number of frames per seconds\&. 
.RE
.PP

.SS "void linphone_core_set_preferred_video_definition (\fBLinphoneCore\fP * lc, \fBLinphoneVideoDefinition\fP * vdef)"

.PP
Set the preferred video definition for the stream that is captured and sent to the remote party\&. All standard video definitions are accepted on the receive path\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIvdef\fP LinphoneVideoDefinition object 
.RE
.PP

.SS "LINPHONE_DEPRECATED void linphone_core_set_preferred_video_size (\fBLinphoneCore\fP * lc, MSVideoSize vsize)"

.PP
Sets the preferred video size\&. This applies only to the stream that is captured and sent to the remote party, since we accept all standard video size on the receive path\&.
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_core_set_preferred_video_definition()\fP instead 
.RE
.PP

.SS "void linphone_core_set_preferred_video_size_by_name (\fBLinphoneCore\fP * lc, const char * name)"

.PP
Sets the preferred video size by its name\&. This is identical to \fBlinphone_core_set_preferred_video_size()\fP except that it takes the name of the video resolution as input\&. Video resolution names are: qcif, svga, cif, vga, 4cif, svga \&.\&.\&.
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_factory_create_video_definition_from_name()\fP and \fBlinphone_core_set_preferred_video_definition()\fP instead 
.RE
.PP

.SS "void linphone_core_set_preview_video_definition (\fBLinphoneCore\fP * lc, \fBLinphoneVideoDefinition\fP * vdef)"

.PP
Set the video definition for the captured (preview) video\&. This method is for advanced usage where a video capture must be set independently of the definition of the stream actually sent through the call\&. This allows for example to have the preview window in High Definition even if due to bandwidth constraint the sent video definition is small\&. Using this feature increases the CPU consumption, since a rescaling will be done internally\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIvdef\fP LinphoneVideoDefinition object 
.RE
.PP

.SS "LINPHONE_DEPRECATED void linphone_core_set_preview_video_size (\fBLinphoneCore\fP * lc, MSVideoSize vsize)"

.PP
Sets the video size for the captured (preview) video\&. This method is for advanced usage where a video capture must be set independently of the size of the stream actually sent through the call\&. This allows for example to have the preview window with HD resolution even if due to bandwidth constraint the sent video size is small\&. Using this feature increases the CPU consumption, since a rescaling will be done internally\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the linphone core 
.br
\fIvsize\fP the video resolution choosed for capuring and previewing\&. It can be (0,0) to not request any specific preview size and let the core optimize the processing\&. 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_core_set_preview_video_definition()\fP instead 
.RE
.PP

.SS "void linphone_core_set_preview_video_size_by_name (\fBLinphoneCore\fP * lc, const char * name)"

.PP
Sets the preview video size by its name\&. See \fBlinphone_core_set_preview_video_size()\fP for more information about this feature\&.
.PP
Video resolution names are: qcif, svga, cif, vga, 4cif, svga \&.\&.\&.
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_factory_create_video_definition_from_name()\fP and \fBlinphone_core_set_preview_video_definition()\fP instead 
.RE
.PP

.SS "LINPHONE_DEPRECATED void linphone_core_set_rec_level (\fBLinphoneCore\fP * lc, int level)"

.PP
Set sound capture level in 0-100 scale\&. 
.PP
\fBDeprecated\fP
.RS 4
 
.RE
.PP

.SS "void linphone_core_set_record_file (\fBLinphoneCore\fP * lc, const char * file)"

.PP
Sets a wav file where incoming stream is to be recorded, when files are used instead of soundcards (see \fBlinphone_core_set_use_files()\fP)\&. This feature is different from call recording (\fBlinphone_call_params_set_record_file()\fP) The file will be a 16 bit linear wav file\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIfile\fP The path to the file where incoming stream is to be recorded\&. 
.RE
.PP

.SS "void linphone_core_set_remote_ringback_tone (\fBLinphoneCore\fP * lc, const char * ring)"

.PP
Specify a ring back tone to be played to far end during incoming calls\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIring\fP The path to the ring back tone to be played\&. 
.RE
.PP

.SS "void linphone_core_set_ring (\fBLinphoneCore\fP * lc, const char * path)"

.PP
Sets the path to a wav file used for ringing\&. The file must be a wav 16bit linear\&. Local ring is disabled if null\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIpath\fP The path to a wav file to be used for ringing 
.RE
.PP

.SS "void linphone_core_set_ring_during_incoming_early_media (\fBLinphoneCore\fP * lc, bool_t enable)"

.PP
Enable or disable the ring play during an incoming early media call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIenable\fP A boolean value telling whether to enable ringing during an incoming early media call\&. 
.RE
.PP

.SS "LINPHONE_DEPRECATED void linphone_core_set_ring_level (\fBLinphoneCore\fP * lc, int level)"

.PP
Set sound ring level in 0-100 scale\&. 
.PP
\fBDeprecated\fP
.RS 4
 
.RE
.PP

.SS "void linphone_core_set_ringback (\fBLinphoneCore\fP * lc, const char * path)"

.PP
Sets the path to a wav file used for ringing back\&. Ringback means the ring that is heard when it's ringing at the remote party\&. The file must be a wav 16bit linear\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIpath\fP The path to a wav file to be used for ringing back 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_core_set_ringer_device (\fBLinphoneCore\fP * lc, const char * devid)"

.PP
Sets the sound device used for ringing\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIdevid\fP The device name as returned by \fBlinphone_core_get_sound_devices()\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
0 
.RE
.PP

.SS "void linphone_core_set_sip_transport_timeout (\fBLinphoneCore\fP * lc, int timeout_ms)"

.PP
Set the SIP transport timeout\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fItimeout_ms\fP The SIP transport timeout in milliseconds\&. 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_core_set_static_picture (\fBLinphoneCore\fP * lc, const char * path)"

.PP
Set the path to the image file to stream when 'Static picture' is set as the video device\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fIpath\fP The path to the image file to use\&. 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_core_set_static_picture_fps (\fBLinphoneCore\fP * lc, float fps)"

.PP
Set the frame rate for static picture\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fIfps\fP The new frame rate to use for static picture\&. 
.RE
.PP

.SS "LINPHONE_DEPRECATED \fBLinphoneStatus\fP linphone_core_set_text_codecs (\fBLinphoneCore\fP * lc, bctbx_list_t * codecs)"

.PP
Sets the list of text codecs\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.br
\fIcodecs\fP A list of \fBLinphonePayloadType\fP objects\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0
.RE
.PP
The list is taken by the LinphoneCore thus the application should not free it\&. This list is made of struct PayloadType describing the codec parameters\&.
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_core_set_text_payload_types()\fP instead\&.  
.RE
.PP

.SS "void linphone_core_set_text_payload_types (\fBLinphoneCore\fP * lc, const bctbx_list_t * payload_types)"

.PP
Redefine the list of the available payload types\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The core\&. 
.br
\fIpayload_types\fP A list of \fBLinphonePayloadType\fP objects\&. The new list of payload types\&. The core does not take ownership on it\&. 
.RE
.PP

.SS "void linphone_core_set_text_port_range (\fBLinphoneCore\fP * lc, int min_port, int max_port)"

.PP
Sets the UDP port range from which to randomly select the port used for text streaming\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fImin_port\fP The lower bound of the text port range to use 
.br
\fImax_port\fP The upper bound of the text port range to use 
.RE
.PP

.SS "void linphone_core_set_upload_bandwidth (\fBLinphoneCore\fP * lc, int bw)"

.PP
Sets maximum available upload bandwidth This is IP bandwidth, in kbit/s\&. This information is used by liblinphone together with remote side available bandwidth signaled in SDP messages to properly configure audio & video codec's output bitrate\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the LinphoneCore object 
.br
\fIbw\fP the bandwidth in kbits/s, 0 for infinite 
.RE
.PP

.SS "void linphone_core_set_use_files (\fBLinphoneCore\fP * lc, bool_t yesno)"

.PP
Ask the core to stream audio from and to files, instead of using the soundcard\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIyesno\fP A boolean value asking to stream audio from and to files or not\&. 
.RE
.PP

.SS "void linphone_core_set_use_info_for_dtmf (\fBLinphoneCore\fP * lc, bool_t use_info)"

.PP
Sets whether SIP INFO is to be used to send digits\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIuse_info\fP A boolean value telling whether to use SIP INFO to send digits 
.RE
.PP

.SS "void linphone_core_set_use_rfc2833_for_dtmf (\fBLinphoneCore\fP * lc, bool_t use_rfc2833)"

.PP
Sets whether RFC2833 is to be used to send digits\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIuse_rfc2833\fP A boolean value telling whether to use RFC2833 to send digits 
.RE
.PP

.SS "void linphone_core_set_video_activation_policy (\fBLinphoneCore\fP * lc, const \fBLinphoneVideoActivationPolicy\fP * policy)"

.PP
Sets the default policy for video\&. This policy defines whether:
.IP "\(bu" 2
video shall be initiated by default for outgoing calls
.IP "\(bu" 2
video shall be accepted by default for incoming calls 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIpolicy\fP The video policy to use 
.RE
.PP

.PP

.SS "LINPHONE_DEPRECATED \fBLinphoneStatus\fP linphone_core_set_video_codecs (\fBLinphoneCore\fP * lc, bctbx_list_t * codecs)"

.PP
Sets the list of video codecs\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.br
\fIcodecs\fP A list of \fBOrtpPayloadType\fP objects\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0
.RE
.PP
The list is taken by the LinphoneCore thus the application should not free it\&. This list is made of struct PayloadType describing the codec parameters\&.
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_core_set_video_payload_types()\fP instead\&.  
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_core_set_video_device (\fBLinphoneCore\fP * lc, const char * id)"

.PP
Sets the active video device\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIid\fP The name of the video device to use as returned by \fBlinphone_core_get_video_devices()\fP 
.RE
.PP

.SS "void linphone_core_set_video_display_filter (\fBLinphoneCore\fP * lc, const char * filtername)"

.PP
Set the name of the mediastreamer2 filter to be used for rendering video\&. This is for advanced users of the library, mainly to workaround hardware/driver bugs\&. 
.SS "void linphone_core_set_video_jittcomp (\fBLinphoneCore\fP * lc, int milliseconds)"

.PP
Sets the nominal video jitter buffer size in milliseconds\&. The value takes effect immediately for all running and pending calls, if any\&. A value of 0 disables the jitter buffer\&. 
.SS "\fBLinphoneStatus\fP linphone_core_set_video_multicast_addr (\fBLinphoneCore\fP * lc, const char * ip)"

.PP
Use to set multicast address to be used for video stream\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP 
.br
\fIip\fP an ipv4/6 multicast address 
.RE
.PP
\fBReturns:\fP
.RS 4
0 in case of success 
.RE
.PP

.SS "\fBLinphoneStatus\fP linphone_core_set_video_multicast_ttl (\fBLinphoneCore\fP * lc, int ttl)"

.PP
Use to set multicast ttl to be used for video stream\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP 
.br
\fIttl\fP value or -1 if not used\&. [0\&.\&.255] default value is 1 
.RE
.PP
\fBReturns:\fP
.RS 4
0 in case of success 
.RE
.PP

.SS "void linphone_core_set_video_payload_types (\fBLinphoneCore\fP * lc, const bctbx_list_t * payload_types)"

.PP
Redefine the list of the available video payload types\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The core\&. 
.br
\fIpayload_types\fP A list of \fBLinphonePayloadType\fP objects\&. The new list of codecs\&. The core does not take ownership on it\&. 
.RE
.PP

.SS "LINPHONE_DEPRECATED void linphone_core_set_video_policy (\fBLinphoneCore\fP * lc, const \fBLinphoneVideoPolicy\fP * policy)"

.PP
Sets the default policy for video\&. This policy defines whether:
.IP "\(bu" 2
video shall be initiated by default for outgoing calls
.IP "\(bu" 2
video shall be accepter by default for incoming calls
.PP
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIpolicy\fP The video policy to use
.RE
.PP
\fBDeprecated\fP
.RS 4
.RE
.PP

.SS "void linphone_core_set_video_port_range (\fBLinphoneCore\fP * lc, int min_port, int max_port)"

.PP
Sets the UDP port range from which to randomly select the port used for video streaming\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fImin_port\fP The lower bound of the video port range to use 
.br
\fImax_port\fP The upper bound of the video port range to use 
.RE
.PP

.SS "void linphone_core_set_video_preset (\fBLinphoneCore\fP * lc, const char * preset)"

.PP
Set the video preset to be used for video calls\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIpreset\fP The name of the video preset to be used (can be NULL to use the default video preset)\&. 
.RE
.PP

.SS "bool_t linphone_core_sound_device_can_capture (\fBLinphoneCore\fP * lc, const char * device)"

.PP
Tells whether a specified sound device can capture sound\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIdevice\fP the device name as returned by \fBlinphone_core_get_sound_devices()\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean value telling whether the specified sound device can capture sound 
.RE
.PP

.SS "bool_t linphone_core_sound_device_can_playback (\fBLinphoneCore\fP * lc, const char * device)"

.PP
Tells whether a specified sound device can play sound\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.br
\fIdevice\fP the device name as returned by \fBlinphone_core_get_sound_devices()\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean value telling whether the specified sound device can play sound 
.RE
.PP

.SS "void linphone_core_stop_dtmf (\fBLinphoneCore\fP * lc)"

.PP
Stops playing a dtmf started by \fBlinphone_core_play_dtmf()\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP

.SS "void linphone_core_stop_ringing (\fBLinphoneCore\fP * lc)"

.PP
Whenever the liblinphone is playing a ring to advertise an incoming call or ringback of an outgoing call, this function stops the ringing\&. Typical use is to stop ringing when the user requests to ignore the call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP

.SS "void linphone_core_use_preview_window (\fBLinphoneCore\fP * lc, bool_t yesno)"

.PP
Tells the core to use a separate window for local camera preview video, instead of inserting local view within the remote video window\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fIyesno\fP TRUE to use a separate window, FALSE to insert the preview in the remote video window\&. 
.RE
.PP

.SS "bool_t linphone_core_video_adaptive_jittcomp_enabled (\fBLinphoneCore\fP * lc)"

.PP
Tells whether the video adaptive jitter compensation is enabled\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if the video adaptive jitter compensation is enabled, FALSE otherwise\&. 
.RE
.PP

.SS "bool_t linphone_core_video_capture_enabled (\fBLinphoneCore\fP * lc)"

.PP
Tells whether video capture is enabled\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if video capture is enabled, FALSE if disabled\&. 
.RE
.PP

.SS "bool_t linphone_core_video_display_enabled (\fBLinphoneCore\fP * lc)"

.PP
Tells whether video display is enabled\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if video display is enabled, FALSE if disabled\&. 
.RE
.PP

.SS "bool_t linphone_core_video_enabled (\fBLinphoneCore\fP * lc)"

.PP
Returns TRUE if either capture or display is enabled, FALSE otherwise\&. same as ( \fBlinphone_core_video_capture_enabled\fP | \fBlinphone_core_video_display_enabled\fP ) 
.SS "bool_t linphone_core_video_multicast_enabled (const \fBLinphoneCore\fP * core)"

.PP
Use to get multicast state of video stream\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcore\fP \fBLinphoneCore\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
true if subsequent calls will propose multicast ip set by \fBlinphone_core_set_video_multicast_addr\fP 
.RE
.PP

.SS "bool_t linphone_core_video_preview_enabled (const \fBLinphoneCore\fP * lc)"

.PP
Tells whether video preview is enabled\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP LinphoneCore object 
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean value telling whether video preview is enabled 
.RE
.PP

.SS "int linphone_payload_type_enable (\fBLinphonePayloadType\fP * pt, bool_t enabled)"

.PP
Enable/disable a payload type\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpt\fP The payload type to enable/disable\&. 
.br
\fIenabled\fP Set TRUE for enabling and FALSE for disabling\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 for success, -1 for failure\&. 
.RE
.PP

.SS "bool_t linphone_payload_type_enabled (const \fBLinphonePayloadType\fP * pt)"

.PP
Check whether a palyoad type is enabled\&. 
.PP
\fBReturns:\fP
.RS 4
TRUE if enabled, FALSE if disabled\&. 
.RE
.PP

.SS "int linphone_payload_type_get_channels (const \fBLinphonePayloadType\fP * pt)"

.PP
Get the number of channels\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpt\fP The payload type\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of channels\&. 
.RE
.PP

.SS "int linphone_payload_type_get_clock_rate (const \fBLinphonePayloadType\fP * pt)"

.PP
Get the clock rate of a payload type\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpt\fP The payload type\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
[in] The clock rate in Hz\&. 
.RE
.PP

.SS "char* linphone_payload_type_get_description (const \fBLinphonePayloadType\fP * pt)"

.PP
Return a string describing a payload type\&. The format of the string is <mime_type>/<clock_rate>/<channels>\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpt\fP The payload type\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The description of the payload type\&. Must be release after use\&. 
.RE
.PP

.SS "const char* linphone_payload_type_get_encoder_description (const \fBLinphonePayloadType\fP * pt)"

.PP
Get a description of the encoder used to provide a payload type\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpt\fP The payload type\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The description of the encoder\&. Can be NULL if the payload type is not supported by Mediastreamer2\&. 
.RE
.PP

.SS "const char* linphone_payload_type_get_mime_type (const \fBLinphonePayloadType\fP * pt)"

.PP
Get the mime type\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpt\fP The payload type\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The mime type\&. 
.RE
.PP

.SS "int linphone_payload_type_get_normal_bitrate (const \fBLinphonePayloadType\fP * pt)"

.PP
Get the normal bitrate in bits/s\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpt\fP The payload type\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The normal bitrate in bits/s or -1 if an error has occured\&. 
.RE
.PP

.SS "int linphone_payload_type_get_number (const \fBLinphonePayloadType\fP * pt)"

.PP
Returns the payload type number assigned for this codec\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpt\fP The payload type\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of the payload type\&. 
.RE
.PP

.SS "const char* linphone_payload_type_get_recv_fmtp (const \fBLinphonePayloadType\fP * pt)"

.PP
Get the format parameters for incoming streams\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpt\fP The payload type\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The format parameters as string\&. 
.RE
.PP

.SS "const char* linphone_payload_type_get_send_fmtp (const \fBLinphonePayloadType\fP * pt)"

.PP
Get the format parameters for outgoing streams\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpt\fP The payload type\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The format parameters as string\&. 
.RE
.PP

.SS "int linphone_payload_type_get_type (const \fBLinphonePayloadType\fP * pt)"

.PP
Get the type of a payload type\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpt\fP The payload type\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The type of the payload e\&.g\&. PAYLOAD_AUDIO_CONTINUOUS or PAYLOAD_VIDEO\&. 
.RE
.PP

.SS "bool_t linphone_payload_type_is_usable (const \fBLinphonePayloadType\fP * pt)"

.PP
Check whether the payload is usable according the bandwidth targets set in the core\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpt\fP The payload type to test\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if the payload type is usable\&. 
.RE
.PP

.SS "bool_t linphone_payload_type_is_vbr (const \fBLinphonePayloadType\fP * pt)"

.PP
Tells whether the specified payload type represents a variable bitrate codec\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpt\fP The payload type\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if the payload type represents a VBR codec, FALSE instead\&. 
.RE
.PP

.SS "void linphone_payload_type_set_normal_bitrate (\fBLinphonePayloadType\fP * pt, int bitrate)"

.PP
Change the normal bitrate of a payload type\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpt\fP The payload type to change\&. 
.br
\fIbitrate\fP The new bitrate in bits/s\&. 
.RE
.PP

.SS "void linphone_payload_type_set_number (\fBLinphonePayloadType\fP * pt, int number)"

.PP
Force a number for a payload type\&. The LinphoneCore does payload type number assignment automatically\&. This function is mainly to be used for tests, in order to override the automatic assignment mechanism\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpt\fP The payload type\&. 
.br
\fInumber\fP The number to assign to the payload type\&. 
.RE
.PP

.SS "void linphone_payload_type_set_recv_fmtp (\fBLinphonePayloadType\fP * pt, const char * recv_fmtp)"

.PP
Set the format parameters for incoming streams\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpt\fP The payload type\&. 
.br
\fIrecv_fmtp\fP The new format parameters as string\&. The string will be copied\&. 
.RE
.PP

.SS "void linphone_payload_type_set_send_fmtp (\fBLinphonePayloadType\fP * pt, const char * send_fmtp)"

.PP
Set the format parameters for outgoing streams\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpt\fP The payload type\&. 
.br
\fIsend_fmtp\fP The new format parameters as string\&. The string will be copied\&. 
.RE
.PP

.SS "bool_t linphone_video_activation_policy_get_automatically_accept (const \fBLinphoneVideoActivationPolicy\fP * policy)"

.PP
Gets the value for the automatically accept video policy\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpolicy\fP the LinphoneVideoActivationPolicy object 
.RE
.PP
\fBReturns:\fP
.RS 4
whether or not to automatically accept video requests is enabled 
.RE
.PP

.SS "bool_t linphone_video_activation_policy_get_automatically_initiate (const \fBLinphoneVideoActivationPolicy\fP * policy)"

.PP
Gets the value for the automatically initiate video policy\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpolicy\fP the LinphoneVideoActivationPolicy object 
.RE
.PP
\fBReturns:\fP
.RS 4
whether or not to automatically initiate video calls is enabled 
.RE
.PP

.SS "void* linphone_video_activation_policy_get_user_data (const \fBLinphoneVideoActivationPolicy\fP * policy)"

.PP
Gets the user data in the LinphoneVideoActivationPolicy object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpolicy\fP the LinphoneVideoActivationPolicy 
.RE
.PP
\fBReturns:\fP
.RS 4
the user data 
.RE
.PP

.SS "\fBLinphoneVideoActivationPolicy\fP* linphone_video_activation_policy_ref (\fBLinphoneVideoActivationPolicy\fP * policy)"

.PP
Increment refcount\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpolicy\fP LinphoneVideoActivationPolicy object 
.RE
.PP

.SS "void linphone_video_activation_policy_set_automatically_accept (\fBLinphoneVideoActivationPolicy\fP * policy, bool_t enable)"

.PP
Sets the value for the automatically accept video policy\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpolicy\fP the LinphoneVideoActivationPolicy object 
.br
\fIenable\fP whether or not to enable automatically accept video requests 
.RE
.PP

.SS "void linphone_video_activation_policy_set_automatically_initiate (\fBLinphoneVideoActivationPolicy\fP * policy, bool_t enable)"

.PP
Sets the value for the automatically initiate video policy\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpolicy\fP the LinphoneVideoActivationPolicy object 
.br
\fIenable\fP whether or not to enable automatically initiate video calls 
.RE
.PP

.SS "void linphone_video_activation_policy_set_user_data (\fBLinphoneVideoActivationPolicy\fP * policy, void * data)"

.PP
Sets the user data in the LinphoneVideoActivationPolicy object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpolicy\fP the LinphoneVideoActivationPolicy object 
.br
\fIdata\fP the user data 
.RE
.PP

.SS "void linphone_video_activation_policy_unref (\fBLinphoneVideoActivationPolicy\fP * policy)"

.PP
Decrement refcount and possibly free the object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpolicy\fP LinphoneVideoActivationPolicy object 
.RE
.PP

.SS "\fBLinphoneVideoDefinition\fP* linphone_video_definition_clone (const \fBLinphoneVideoDefinition\fP * vdef)"

.PP
Clone a video definition\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvdef\fP LinphoneVideoDefinition object to be cloned 
.RE
.PP
\fBReturns:\fP
.RS 4
The new clone of the video definition 
.RE
.PP

.SS "bool_t linphone_video_definition_equals (const \fBLinphoneVideoDefinition\fP * vdef1, const \fBLinphoneVideoDefinition\fP * vdef2)"

.PP
Tells whether two LinphoneVideoDefinition objects are equal (the widths and the heights are the same but can be switched)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvdef1\fP LinphoneVideoDefinition object 
.br
\fIvdef2\fP LinphoneVideoDefinition object 
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean value telling whether the two LinphoneVideoDefinition objects are equal\&. 
.RE
.PP

.SS "unsigned int linphone_video_definition_get_height (const \fBLinphoneVideoDefinition\fP * vdef)"

.PP
Get the height of the video definition\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvdef\fP LinphoneVideoDefinition object 
.RE
.PP
\fBReturns:\fP
.RS 4
The height of the video definition 
.RE
.PP

.SS "const char* linphone_video_definition_get_name (const \fBLinphoneVideoDefinition\fP * vdef)"

.PP
Get the name of the video definition\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvdef\fP LinphoneVideoDefinition object 
.RE
.PP
\fBReturns:\fP
.RS 4
The name of the video definition 
.RE
.PP

.SS "void* linphone_video_definition_get_user_data (const \fBLinphoneVideoDefinition\fP * vdef)"

.PP
Retrieve the user pointer associated with the video definition\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvdef\fP LinphoneVideoDefinition object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The user pointer associated with the video definition\&. 
.RE
.PP

.SS "unsigned int linphone_video_definition_get_width (const \fBLinphoneVideoDefinition\fP * vdef)"

.PP
Get the width of the video definition\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvdef\fP LinphoneVideoDefinition object 
.RE
.PP
\fBReturns:\fP
.RS 4
The width of the video definition 
.RE
.PP

.SS "bool_t linphone_video_definition_is_undefined (const \fBLinphoneVideoDefinition\fP * vdef)"

.PP
Tells whether a LinphoneVideoDefinition is undefined\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvdef\fP LinphoneVideoDefinition object 
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean value telling whether the LinphoneVideoDefinition is undefined\&. 
.RE
.PP

.SS "\fBLinphoneVideoDefinition\fP* linphone_video_definition_ref (\fBLinphoneVideoDefinition\fP * vdef)"

.PP
Acquire a reference to the video definition\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvdef\fP LinphoneVideoDefinition object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The same LinphoneVideoDefinition object\&. 
.RE
.PP

.SS "void linphone_video_definition_set_definition (\fBLinphoneVideoDefinition\fP * vdef, unsigned int width, unsigned int height)"

.PP
Set the width and the height of the video definition\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvdef\fP LinphoneVideoDefinition object 
.br
\fIwidth\fP The width of the video definition 
.br
\fIheight\fP The height of the video definition 
.RE
.PP

.SS "void linphone_video_definition_set_height (\fBLinphoneVideoDefinition\fP * vdef, unsigned int height)"

.PP
Set the height of the video definition\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvdef\fP LinphoneVideoDefinition object 
.br
\fIheight\fP The height of the video definition 
.RE
.PP

.SS "void linphone_video_definition_set_name (\fBLinphoneVideoDefinition\fP * vdef, const char * name)"

.PP
Set the name of the video definition\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvdef\fP LinphoneVideoDefinition object 
.br
\fIname\fP The name of the video definition 
.RE
.PP

.SS "void linphone_video_definition_set_user_data (\fBLinphoneVideoDefinition\fP * vdef, void * ud)"

.PP
Assign a user pointer to the video definition\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvdef\fP LinphoneVideoDefinition object\&. 
.br
\fIud\fP The user pointer to associate with the video definition\&. 
.RE
.PP

.SS "void linphone_video_definition_set_width (\fBLinphoneVideoDefinition\fP * vdef, unsigned int width)"

.PP
Set the width of the video definition\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvdef\fP LinphoneVideoDefinition object 
.br
\fIwidth\fP The width of the video definition 
.RE
.PP

.SS "bool_t linphone_video_definition_strict_equals (const \fBLinphoneVideoDefinition\fP * vdef1, const \fBLinphoneVideoDefinition\fP * vdef2)"

.PP
Tells whether two LinphoneVideoDefinition objects are strictly equal (the widths are the same and the heights are the same)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvdef1\fP LinphoneVideoDefinition object 
.br
\fIvdef2\fP LinphoneVideoDefinition object 
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean value telling whether the two LinphoneVideoDefinition objects are strictly equal\&. 
.RE
.PP

.SS "void linphone_video_definition_unref (\fBLinphoneVideoDefinition\fP * vdef)"

.PP
Release reference to the video definition\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvdef\fP LinphoneVideoDefinition object\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Liblinphone from the source code\&.
