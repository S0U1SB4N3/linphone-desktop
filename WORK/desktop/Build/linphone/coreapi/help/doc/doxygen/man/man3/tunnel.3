.TH "tunnel" 3 "Fri Dec 15 2017" "Version 3.12.0" "Liblinphone" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tunnel
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBLINPHONE_TUNNEL\fP(obj)   BELLE_SIP_CAST(obj, \fBLinphoneTunnel\fP)"
.br
.RI "Linphone tunnel aims is to bypass IP traffic blocking due to aggressive firewalls which typically only authorize TCP traffic with destination port 443\&. "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct _LinphoneTunnel \fBLinphoneTunnel\fP"
.br
.RI "Linphone tunnel object\&. "
.ti -1c
.RI "typedef enum \fB_LinphoneTunnelMode\fP \fBLinphoneTunnelMode\fP"
.br
.RI "Enum describing the tunnel modes\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fB_LinphoneTunnelMode\fP { \fBLinphoneTunnelModeDisable\fP, \fBLinphoneTunnelModeEnable\fP, \fBLinphoneTunnelModeAuto\fP }
.RI "Enum describing the tunnel modes\&. ""
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "bool_t \fBlinphone_core_tunnel_available\fP (void)"
.br
.RI "True if tunnel support was compiled\&. "
.ti -1c
.RI "\fBLinphoneTunnel\fP * \fBlinphone_core_get_tunnel\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "get tunnel instance if available "
.ti -1c
.RI "LinphoneTunnelConfig * \fBlinphone_tunnel_config_new\fP (void)"
.br
.RI "Create a new tunnel configuration\&. "
.ti -1c
.RI "\fBLinphoneTunnel\fP * \fBlinphone_tunnel_ref\fP (\fBLinphoneTunnel\fP *tunnel)"
.br
.RI "Take a reference on a \fBLinphoneTunnel\fP\&. "
.ti -1c
.RI "void \fBlinphone_tunnel_unref\fP (\fBLinphoneTunnel\fP *tunnel)"
.br
.RI "Release a reference on a \fBLinphoneTunnel\fP\&. "
.ti -1c
.RI "void \fBlinphone_tunnel_config_set_host\fP (LinphoneTunnelConfig *tunnel, const char *host)"
.br
.RI "Set the IP address or hostname of the tunnel server\&. "
.ti -1c
.RI "const char * \fBlinphone_tunnel_config_get_host\fP (const LinphoneTunnelConfig *tunnel)"
.br
.RI "Get the IP address or hostname of the tunnel server\&. "
.ti -1c
.RI "void \fBlinphone_tunnel_config_set_port\fP (LinphoneTunnelConfig *tunnel, int port)"
.br
.RI "Set tls port of server\&. "
.ti -1c
.RI "int \fBlinphone_tunnel_config_get_port\fP (const LinphoneTunnelConfig *tunnel)"
.br
.RI "Get the TLS port of the tunnel server\&. "
.ti -1c
.RI "void \fBlinphone_tunnel_config_set_host2\fP (LinphoneTunnelConfig *tunnel, const char *host)"
.br
.RI "Set the IP address or hostname of the second tunnel server when using dual tunnel client\&. "
.ti -1c
.RI "const char * \fBlinphone_tunnel_config_get_host2\fP (const LinphoneTunnelConfig *tunnel)"
.br
.RI "Get the IP address or hostname of the second tunnel server when using dual tunnel client\&. "
.ti -1c
.RI "void \fBlinphone_tunnel_config_set_port2\fP (LinphoneTunnelConfig *tunnel, int port)"
.br
.RI "Set tls port of the second server when using dual tunnel client\&. "
.ti -1c
.RI "int \fBlinphone_tunnel_config_get_port2\fP (const LinphoneTunnelConfig *tunnel)"
.br
.RI "Get the TLS port of the second tunnel server when using dual tunnel client\&. "
.ti -1c
.RI "void \fBlinphone_tunnel_config_set_remote_udp_mirror_port\fP (LinphoneTunnelConfig *tunnel, int remote_udp_mirror_port)"
.br
.RI "Set the remote port on the tunnel server side used to test UDP reachability\&. "
.ti -1c
.RI "int \fBlinphone_tunnel_config_get_remote_udp_mirror_port\fP (const LinphoneTunnelConfig *tunnel)"
.br
.RI "Get the remote port on the tunnel server side used to test UDP reachability\&. "
.ti -1c
.RI "void \fBlinphone_tunnel_config_set_delay\fP (LinphoneTunnelConfig *tunnel, int delay)"
.br
.RI "Set the UDP packet round trip delay in ms for a tunnel configuration\&. "
.ti -1c
.RI "int \fBlinphone_tunnel_config_get_delay\fP (const LinphoneTunnelConfig *tunnel)"
.br
.RI "Get the UDP packet round trip delay in ms for a tunnel configuration\&. "
.ti -1c
.RI "LinphoneTunnelConfig * \fBlinphone_tunnel_config_ref\fP (LinphoneTunnelConfig *cfg)"
.br
.RI "Increment the refcount of LinphoneTunnelConfig object\&. "
.ti -1c
.RI "void \fBlinphone_tunnel_config_unref\fP (LinphoneTunnelConfig *cfg)"
.br
.RI "Decrement the refcount of LinphoneTunnelConfig object\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED void \fBlinphone_tunnel_config_destroy\fP (LinphoneTunnelConfig *tunnel)"
.br
.RI "Destroy a tunnel configuration\&. "
.ti -1c
.RI "void \fBlinphone_tunnel_config_set_user_data\fP (LinphoneTunnelConfig *cfg, void *ud)"
.br
.RI "Store a user data in the tunnel config object\&. "
.ti -1c
.RI "void * \fBlinphone_tunnel_config_get_user_data\fP (LinphoneTunnelConfig *cfg)"
.br
.RI "Retrieve user data from the tunnel config\&. "
.ti -1c
.RI "void \fBlinphone_tunnel_add_server\fP (\fBLinphoneTunnel\fP *tunnel, LinphoneTunnelConfig *tunnel_config)"
.br
.RI "Add a tunnel server configuration\&. "
.ti -1c
.RI "void \fBlinphone_tunnel_remove_server\fP (\fBLinphoneTunnel\fP *tunnel, LinphoneTunnelConfig *tunnel_config)"
.br
.RI "Remove a tunnel server configuration\&. "
.ti -1c
.RI "const bctbx_list_t * \fBlinphone_tunnel_get_servers\fP (const \fBLinphoneTunnel\fP *tunnel)"
.br
.RI "Get added servers\&. "
.ti -1c
.RI "void \fBlinphone_tunnel_clean_servers\fP (\fBLinphoneTunnel\fP *tunnel)"
.br
.RI "Remove all tunnel server addresses previously entered with \fBlinphone_tunnel_add_server()\fP "
.ti -1c
.RI "void \fBlinphone_tunnel_set_mode\fP (\fBLinphoneTunnel\fP *tunnel, \fBLinphoneTunnelMode\fP mode)"
.br
.RI "Set the tunnel mode\&. "
.ti -1c
.RI "\fBLinphoneTunnelMode\fP \fBlinphone_tunnel_get_mode\fP (const \fBLinphoneTunnel\fP *tunnel)"
.br
.RI "Get the tunnel mode\&. "
.ti -1c
.RI "void \fBlinphone_tunnel_enable_dual_mode\fP (\fBLinphoneTunnel\fP *tunnel, bool_t dual_mode_enabled)"
.br
.RI "Sets whether or not to use the dual tunnel client mode\&. "
.ti -1c
.RI "bool_t \fBlinphone_tunnel_dual_mode_enabled\fP (const \fBLinphoneTunnel\fP *tunnel)"
.br
.RI "Get the dual tunnel client mode\&. "
.ti -1c
.RI "bool_t \fBlinphone_tunnel_get_activated\fP (const \fBLinphoneTunnel\fP *tunnel)"
.br
.RI "Returns whether the tunnel is activated\&. "
.ti -1c
.RI "bool_t \fBlinphone_tunnel_connected\fP (const \fBLinphoneTunnel\fP *tunnel)"
.br
.RI "Check whether the tunnel is connected\&. "
.ti -1c
.RI "void \fBlinphone_tunnel_reconnect\fP (\fBLinphoneTunnel\fP *tunnel)"
.br
.RI "Force reconnection to the tunnel server\&. "
.ti -1c
.RI "void \fBlinphone_tunnel_enable_sip\fP (\fBLinphoneTunnel\fP *tunnel, bool_t enable)"
.br
.RI "Set whether SIP packets must be directly sent to a UA or pass through the tunnel\&. "
.ti -1c
.RI "bool_t \fBlinphone_tunnel_sip_enabled\fP (const \fBLinphoneTunnel\fP *tunnel)"
.br
.RI "Check whether tunnel is set to transport SIP packets\&. "
.ti -1c
.RI "void \fBlinphone_tunnel_set_http_proxy\fP (\fBLinphoneTunnel\fP *tunnel, const char *host, int port, const char *username, const char *passwd)"
.br
.RI "Set an optional http proxy to go through when connecting to tunnel server\&. "
.ti -1c
.RI "void \fBlinphone_tunnel_get_http_proxy\fP (\fBLinphoneTunnel\fP *tunnel, const char **host, int *port, const char **username, const char **passwd)"
.br
.RI "Retrieve optional http proxy configuration previously set with \fBlinphone_tunnel_set_http_proxy()\fP\&. "
.ti -1c
.RI "void \fBlinphone_tunnel_set_http_proxy_auth_info\fP (\fBLinphoneTunnel\fP *tunnel, const char *username, const char *passwd)"
.br
.RI "Set authentication info for the http proxy\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED void \fBlinphone_tunnel_enable\fP (\fBLinphoneTunnel\fP *tunnel, bool_t enabled)"
.br
.RI "Sets whether tunneling of SIP and RTP is required\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED bool_t \fBlinphone_tunnel_enabled\fP (const \fBLinphoneTunnel\fP *tunnel)"
.br
.RI "Check whether tunnel is enabled\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED void \fBlinphone_tunnel_auto_detect\fP (\fBLinphoneTunnel\fP *tunnel)"
.br
.RI "Start tunnel need detection\&. "
.ti -1c
.RI "LINPHONE_DEPRECATED bool_t \fBlinphone_tunnel_auto_detect_enabled\fP (\fBLinphoneTunnel\fP *tunnel)"
.br
.RI "Tell whether tunnel auto detection is enabled\&. "
.ti -1c
.RI "void \fBlinphone_tunnel_simulate_udp_loss\fP (\fBLinphoneTunnel\fP *tunnel, bool_t enabled)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Macro Definition Documentation"
.PP 
.SS "#define LINPHONE_TUNNEL(obj)   BELLE_SIP_CAST(obj, \fBLinphoneTunnel\fP)"

.PP
Linphone tunnel aims is to bypass IP traffic blocking due to aggressive firewalls which typically only authorize TCP traffic with destination port 443\&. 
.br
 Its principle is tunneling all SIP and/or RTP traffic through a single secure https connection up to a detunnelizer server\&. 
.br
 This set of methods enhance LinphoneCore functionalities in order to provide an easy to use API to 
.PD 0

.IP "\(bu" 2
provision tunnel servers IP addresses and ports\&. This functionality is an option not implemented under GPL\&. Availability can be check at runtime using function \fBlinphone_core_tunnel_available\fP 
.IP "\(bu" 2
start/stop the tunneling service 
.IP "\(bu" 2
perform auto-detection whether tunneling is required, based on a test of sending/receiving a flow of UDP packets\&.
.PP
It takes in charge automatically the SIP registration procedure when connecting or disconnecting to a tunnel server\&. No other action on LinphoneCore is required to enable full operation in tunnel mode\&.
.PP

.br
 Provision is done using object #LinphoneTunnelConfig created by function \fBlinphone_tunnel_config_new()\fP\&. Functions \fBlinphone_tunnel_config_set_host\fP and \fBlinphone_tunnel_config_set_port\fP allow to point to tunnel server IP/port\&. Once set, use function \fBlinphone_tunnel_add_server\fP to provision a tunnel server\&. 
.br
 Finally tunnel mode configuration is achieved by function \fBlinphone_tunnel_set_mode\fP\&. 
.br
 Tunnel connection status can be checked using function \fBlinphone_tunnel_connected\fP\&.
.PP
Bellow pseudo code that can be use to configure, enable, check state and disable tunnel functionality:
.PP
.PP
.nf
LinphoneTunnel *tunnel = linphone_core_get_tunnel(linphone_core);
LinphoneTunnelConfig *config=linphone_tunnel_config_new(); //instantiate tunnel configuration
linphone_tunnel_config_set_host(config, "tunnel\&.linphone\&.org"); //set tunnel server host address
linphone_tunnel_config_set_port(config, 443); //set tunnel server port
linphone_tunnel_add_server(tunnel, config); //provision tunnel config
linphone_tunnel_set_mode(tunnel, LinphoneTunnelModeEnable); //activate the tunnel unconditional

while (!linphone_tunnel_connected(tunnel)) { //wait for tunnel to be ready
   linphone_core_iterate(linphone_core); //schedule core main loop
   ms_sleep(100); //wait 100ms
}

LinphoneCall *call = linphone_core_invite(linphone_core,"sip:foo@example\&.org"); //place an outgoing call
linphone_call_ref(call); //acquire a reference on the call to avoid deletion after completion
//\&.\&.\&.
linphone_core_terminate_call(linphone_core,call);

while (linphone_call_get_state(call) != LinphoneCallReleased) { //wait for call to be in release state
   linphone_core_iterate(linphone_core); //schedule core main loop
   ms_sleep(100); //wait 100ms
}

linphone_tunnel_set_mode(tunnel, LinphoneTunnelModeDisable); //deactivate tunnel
linphone_call_unref(call); //release reference on the call
.fi
.PP
 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fB_LinphoneTunnelMode\fP"

.PP
Enum describing the tunnel modes\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILinphoneTunnelModeDisable \fP\fP
The tunnel is disabled\&. 
.TP
\fB\fILinphoneTunnelModeEnable \fP\fP
The tunnel is enabled\&. 
.TP
\fB\fILinphoneTunnelModeAuto \fP\fP
The tunnel is enabled automatically if it is required\&. 
.SH "Function Documentation"
.PP 
.SS "\fBLinphoneTunnel\fP* linphone_core_get_tunnel (const \fBLinphoneCore\fP * lc)"

.PP
get tunnel instance if available 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP core object 
.RE
.PP
\fBReturns:\fP
.RS 4
LinphoneTunnel or NULL if not available 
.RE
.PP

.SS "void linphone_tunnel_add_server (\fBLinphoneTunnel\fP * tunnel, LinphoneTunnelConfig * tunnel_config)"

.PP
Add a tunnel server configuration\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnel object 
.br
\fItunnel_config\fP LinphoneTunnelConfig object 
.RE
.PP

.SS "LINPHONE_DEPRECATED void linphone_tunnel_auto_detect (\fBLinphoneTunnel\fP * tunnel)"

.PP
Start tunnel need detection\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP object In auto detect mode, the tunnel manager try to establish a real time rtp communication with the tunnel server on specified port\&. 
.br
In case of success, the tunnel is automatically turned off\&. Otherwise, if no udp communication is feasible, tunnel mode is turned on\&. 
.br
 Call this method each time to run the auto detection algorithm 
.RE
.PP
\fBDeprecated\fP
.RS 4
Replaced by linphone_tunnel_set_mode(LinphoneTunnelModeAuto)  
.RE
.PP

.SS "LINPHONE_DEPRECATED bool_t linphone_tunnel_auto_detect_enabled (\fBLinphoneTunnel\fP * tunnel)"

.PP
Tell whether tunnel auto detection is enabled\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnel object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if auto detection is enabled, FALSE otherwise\&. 
.RE
.PP
\fBDeprecated\fP
.RS 4
Replaced by \fBlinphone_tunnel_get_mode()\fP  
.RE
.PP

.SS "void linphone_tunnel_clean_servers (\fBLinphoneTunnel\fP * tunnel)"

.PP
Remove all tunnel server addresses previously entered with \fBlinphone_tunnel_add_server()\fP 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnel object 
.RE
.PP

.SS "LINPHONE_DEPRECATED void linphone_tunnel_config_destroy (LinphoneTunnelConfig * tunnel)"

.PP
Destroy a tunnel configuration\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnelConfig object 
.RE
.PP
\fBDeprecated\fP
.RS 4
use \fBlinphone_tunnel_config_unref()\fP\&.  
.RE
.PP

.SS "int linphone_tunnel_config_get_delay (const LinphoneTunnelConfig * tunnel)"

.PP
Get the UDP packet round trip delay in ms for a tunnel configuration\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnelConfig object 
.RE
.PP
\fBReturns:\fP
.RS 4
The UDP packet round trip delay in ms\&. 
.RE
.PP

.SS "const char* linphone_tunnel_config_get_host (const LinphoneTunnelConfig * tunnel)"

.PP
Get the IP address or hostname of the tunnel server\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnelConfig object 
.RE
.PP
\fBReturns:\fP
.RS 4
The tunnel server IP address or hostname 
.RE
.PP

.SS "const char* linphone_tunnel_config_get_host2 (const LinphoneTunnelConfig * tunnel)"

.PP
Get the IP address or hostname of the second tunnel server when using dual tunnel client\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnelConfig object 
.RE
.PP
\fBReturns:\fP
.RS 4
The tunnel server IP address or hostname 
.RE
.PP

.SS "int linphone_tunnel_config_get_port (const LinphoneTunnelConfig * tunnel)"

.PP
Get the TLS port of the tunnel server\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnelConfig object 
.RE
.PP
\fBReturns:\fP
.RS 4
The TLS port of the tunnel server 
.RE
.PP

.SS "int linphone_tunnel_config_get_port2 (const LinphoneTunnelConfig * tunnel)"

.PP
Get the TLS port of the second tunnel server when using dual tunnel client\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnelConfig object 
.RE
.PP
\fBReturns:\fP
.RS 4
The TLS port of the tunnel server 
.RE
.PP

.SS "int linphone_tunnel_config_get_remote_udp_mirror_port (const LinphoneTunnelConfig * tunnel)"

.PP
Get the remote port on the tunnel server side used to test UDP reachability\&. This is used when the mode is set auto, to detect whether the tunnel has to be enabled or not\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnelConfig object 
.RE
.PP
\fBReturns:\fP
.RS 4
The remote port on the tunnel server side used to test UDP reachability 
.RE
.PP

.SS "void* linphone_tunnel_config_get_user_data (LinphoneTunnelConfig * cfg)"

.PP
Retrieve user data from the tunnel config\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcfg\fP the tunnel config 
.RE
.PP
\fBReturns:\fP
.RS 4
the user data 
.RE
.PP

.SS "LinphoneTunnelConfig* linphone_tunnel_config_ref (LinphoneTunnelConfig * cfg)"

.PP
Increment the refcount of LinphoneTunnelConfig object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcfg\fP the LinphoneTunnelConfig object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the same cfg object\&. 
.RE
.PP

.SS "void linphone_tunnel_config_set_delay (LinphoneTunnelConfig * tunnel, int delay)"

.PP
Set the UDP packet round trip delay in ms for a tunnel configuration\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnelConfig object 
.br
\fIdelay\fP The UDP packet round trip delay in ms considered as acceptable (recommended value is 1000 ms)\&. 
.RE
.PP

.SS "void linphone_tunnel_config_set_host (LinphoneTunnelConfig * tunnel, const char * host)"

.PP
Set the IP address or hostname of the tunnel server\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnelConfig object 
.br
\fIhost\fP The tunnel server IP address or hostname 
.RE
.PP

.SS "void linphone_tunnel_config_set_host2 (LinphoneTunnelConfig * tunnel, const char * host)"

.PP
Set the IP address or hostname of the second tunnel server when using dual tunnel client\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnelConfig object 
.br
\fIhost\fP The tunnel server IP address or hostname 
.RE
.PP

.SS "void linphone_tunnel_config_set_port (LinphoneTunnelConfig * tunnel, int port)"

.PP
Set tls port of server\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnelConfig object 
.br
\fIport\fP The tunnel server TLS port, recommended value is 443 
.RE
.PP

.SS "void linphone_tunnel_config_set_port2 (LinphoneTunnelConfig * tunnel, int port)"

.PP
Set tls port of the second server when using dual tunnel client\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnelConfig object 
.br
\fIport\fP The tunnel server TLS port, recommended value is 443 
.RE
.PP

.SS "void linphone_tunnel_config_set_remote_udp_mirror_port (LinphoneTunnelConfig * tunnel, int remote_udp_mirror_port)"

.PP
Set the remote port on the tunnel server side used to test UDP reachability\&. This is used when the mode is set auto, to detect whether the tunnel has to be enabled or not\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnelConfig object 
.br
\fIremote_udp_mirror_port\fP The remote port on the tunnel server side used to test UDP reachability, set to -1 to disable the feature 
.RE
.PP

.SS "void linphone_tunnel_config_set_user_data (LinphoneTunnelConfig * cfg, void * ud)"

.PP
Store a user data in the tunnel config object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcfg\fP the tunnel config 
.br
\fIud\fP the user data 
.RE
.PP

.SS "void linphone_tunnel_config_unref (LinphoneTunnelConfig * cfg)"

.PP
Decrement the refcount of LinphoneTunnelConfig object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcfg\fP the LinphoneTunnelConfig object\&. 
.RE
.PP

.SS "bool_t linphone_tunnel_connected (const \fBLinphoneTunnel\fP * tunnel)"

.PP
Check whether the tunnel is connected\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnel object 
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean value telling if the tunnel is connected 
.RE
.PP

.SS "bool_t linphone_tunnel_dual_mode_enabled (const \fBLinphoneTunnel\fP * tunnel)"

.PP
Get the dual tunnel client mode\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnel object 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if dual tunnel client mode is enabled, FALSE otherwise 
.RE
.PP

.SS "LINPHONE_DEPRECATED void linphone_tunnel_enable (\fBLinphoneTunnel\fP * tunnel, bool_t enabled)"

.PP
Sets whether tunneling of SIP and RTP is required\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP object 
.br
\fIenabled\fP If true enter in tunneled mode, if false exits from tunneled mode\&. The TunnelManager takes care of refreshing SIP registration when switching on or off the tunneled mode\&. 
.RE
.PP
\fBDeprecated\fP
.RS 4
Replaced by \fBlinphone_tunnel_set_mode()\fP  
.RE
.PP

.SS "void linphone_tunnel_enable_dual_mode (\fBLinphoneTunnel\fP * tunnel, bool_t dual_mode_enabled)"

.PP
Sets whether or not to use the dual tunnel client mode\&. By default this feature is disabled\&. After enabling it, add a server with 2 hosts and 2 ports for the feature to work\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnel object 
.br
\fIdual_mode_enabled\fP TRUE to enable it, FALSE to disable it 
.RE
.PP

.SS "void linphone_tunnel_enable_sip (\fBLinphoneTunnel\fP * tunnel, bool_t enable)"

.PP
Set whether SIP packets must be directly sent to a UA or pass through the tunnel\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnel object 
.br
\fIenable\fP If true, SIP packets shall pass through the tunnel 
.RE
.PP

.SS "LINPHONE_DEPRECATED bool_t linphone_tunnel_enabled (const \fBLinphoneTunnel\fP * tunnel)"

.PP
Check whether tunnel is enabled\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP Tunnel object 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns a boolean indicating whether tunneled operation is enabled\&. 
.RE
.PP
\fBDeprecated\fP
.RS 4
Replaced by \fBlinphone_tunnel_get_mode()\fP  
.RE
.PP

.SS "bool_t linphone_tunnel_get_activated (const \fBLinphoneTunnel\fP * tunnel)"

.PP
Returns whether the tunnel is activated\&. If mode is set to auto, this gives indication whether the automatic detection determined that tunnel was necessary or not\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP the tunnel 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if tunnel is in use, FALSE otherwise\&. 
.RE
.PP

.SS "void linphone_tunnel_get_http_proxy (\fBLinphoneTunnel\fP * tunnel, const char ** host, int * port, const char ** username, const char ** passwd)"

.PP
Retrieve optional http proxy configuration previously set with \fBlinphone_tunnel_set_http_proxy()\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnel object 
.br
\fIhost\fP http proxy host 
.br
\fIport\fP http proxy port 
.br
\fIusername\fP Optional http proxy username if the proxy request authentication\&. Currently only basic authentication is supported\&. Use NULL if not needed\&. 
.br
\fIpasswd\fP Optional http proxy password\&. Use NULL if not needed\&.  
.RE
.PP

.SS "\fBLinphoneTunnelMode\fP linphone_tunnel_get_mode (const \fBLinphoneTunnel\fP * tunnel)"

.PP
Get the tunnel mode\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnel object 
.RE
.PP
\fBReturns:\fP
.RS 4
The current LinphoneTunnelMode 
.RE
.PP

.SS "const bctbx_list_t* linphone_tunnel_get_servers (const \fBLinphoneTunnel\fP * tunnel)"

.PP
Get added servers\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnel object 
.RE
.PP
\fBReturns:\fP
.RS 4
A list of \fBLinphoneTunnelConfig\fP objects\&. 
.RE
.PP

.SS "void linphone_tunnel_reconnect (\fBLinphoneTunnel\fP * tunnel)"

.PP
Force reconnection to the tunnel server\&. This method is useful when the device switches from wifi to Edge/3G or vice versa\&. In most cases the tunnel client socket won't be notified promptly that its connection is now zombie, so it is recommended to call this method that will cause the lost connection to be closed and new connection to be issued\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnel object 
.RE
.PP

.SS "\fBLinphoneTunnel\fP* linphone_tunnel_ref (\fBLinphoneTunnel\fP * tunnel)"

.PP
Take a reference on a \fBLinphoneTunnel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP The \fBLinphoneTunnel\fP whose the ref counter will be increased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Pointer on the freshly refed \fBLinphoneTunnel\fP\&. 
.RE
.PP

.SS "void linphone_tunnel_remove_server (\fBLinphoneTunnel\fP * tunnel, LinphoneTunnelConfig * tunnel_config)"

.PP
Remove a tunnel server configuration\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnel object 
.br
\fItunnel_config\fP LinphoneTunnelConfig object 
.RE
.PP

.SS "void linphone_tunnel_set_http_proxy (\fBLinphoneTunnel\fP * tunnel, const char * host, int port, const char * username, const char * passwd)"

.PP
Set an optional http proxy to go through when connecting to tunnel server\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnel object 
.br
\fIhost\fP http proxy host 
.br
\fIport\fP http proxy port 
.br
\fIusername\fP Optional http proxy username if the proxy request authentication\&. Currently only basic authentication is supported\&. Use NULL if not needed\&. 
.br
\fIpasswd\fP Optional http proxy password\&. Use NULL if not needed\&. 
.RE
.PP

.SS "void linphone_tunnel_set_http_proxy_auth_info (\fBLinphoneTunnel\fP * tunnel, const char * username, const char * passwd)"

.PP
Set authentication info for the http proxy\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnel object 
.br
\fIusername\fP User name 
.br
\fIpasswd\fP Password 
.RE
.PP

.SS "void linphone_tunnel_set_mode (\fBLinphoneTunnel\fP * tunnel, \fBLinphoneTunnelMode\fP mode)"

.PP
Set the tunnel mode\&. The tunnel mode can be 'enable', 'disable' or 'auto' If the mode is set to 'auto', the tunnel manager will try to established an RTP session with the tunnel server on the UdpMirrorPort\&. If the connection fail, the tunnel is automatically activated whereas the tunnel is automatically disabled if the connection succeed\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnel object 
.br
\fImode\fP The desired LinphoneTunnelMode 
.RE
.PP

.SS "bool_t linphone_tunnel_sip_enabled (const \fBLinphoneTunnel\fP * tunnel)"

.PP
Check whether tunnel is set to transport SIP packets\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP LinphoneTunnel object 
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean value telling whether SIP packets shall pass through the tunnel 
.RE
.PP

.SS "void linphone_tunnel_unref (\fBLinphoneTunnel\fP * tunnel)"

.PP
Release a reference on a \fBLinphoneTunnel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fItunnel\fP The \fBLinphoneTunnel\fP whose the ref counter will be decreased\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Liblinphone from the source code\&.
