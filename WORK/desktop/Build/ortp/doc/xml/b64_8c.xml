<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="b64_8c" kind="file" language="C++">
    <compoundname>b64.c</compoundname>
    <includes refid="port_8h" local="yes">ortp/port.h</includes>
    <includes refid="b64_8h" local="yes">ortp/b64.h</includes>
    <includes local="no">bctoolbox/defs.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">string.h</includes>
    <incdepgraph>
      <node id="15">
        <label>bctoolbox/defs.h</label>
      </node>
      <node id="12">
        <label>b64.c</label>
        <link refid="b64_8c"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>assert.h</label>
      </node>
      <node id="14">
        <label>stddef.h</label>
      </node>
      <node id="13">
        <label>ortp/b64.h</label>
        <link refid="b64_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structb64ErrorString__t__" prot="public">b64ErrorString_t_</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="b64_8c_1abb02ef9c156eb61724e43f329a04c9bd" prot="public" static="no">
        <name>B64_VER_C_B64_MAJOR</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" line="49" column="10" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="b64_8c_1a3942b4aad9c6babe73035f988ee8f897" prot="public" static="no">
        <name>B64_VER_C_B64_MINOR</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" line="50" column="10" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="b64_8c_1ad18448a1555a2b386ca78978eab02526" prot="public" static="no">
        <name>B64_VER_C_B64_REVISION</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" line="51" column="10" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="b64_8c_1a2e70643ce49a47b41b640cab45e705e3" prot="public" static="no">
        <name>B64_VER_C_B64_EDIT</name>
        <initializer>17</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" line="52" column="10" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="b64_8c_1ad7a5728d96878819b0dacf5554bb4a6e" prot="public" static="no">
        <name>NUM_PLAIN_DATA_BYTES</name>
        <initializer>(3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" line="71" column="10" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="b64_8c_1ab04dac0a4446dc3fc45f4c42c5be2103" prot="public" static="no">
        <name>NUM_ENCODED_DATA_BYTES</name>
        <initializer>(4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" line="72" column="10" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="b64_8c_1a0bf05373027b4f63e6a275eb4c3da931" prot="public" static="no">
        <name>NUM_ELEMENTS</name>
        <param><defname>x</defname></param>
        <initializer>(sizeof(x) / sizeof(x[0]))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" line="80" column="10" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="b64_8c_1aede330f4e9a5a2b3c2995f7afc2b4546" prot="public" static="no">
        <name>SEVERITY_STR_DECL</name>
        <param><defname>rc</defname></param>
        <param><defname>desc</defname></param>
        <initializer>\
    static const char               s_str##rc[] =   desc;                                   \
    static const <ref refid="structb64ErrorString__t__" kindref="compound">b64ErrorString_t_</ref>  s_rct##rc = { rc, s_str##rc, NUM_ELEMENTS(s_str##rc) - 1 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" line="532" column="9" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" bodystart="532" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="b64_8c_1a8af0337317f4ae55ed9c30c352e7416b" prot="public" static="no">
        <name>SEVERITY_STR_ENTRY</name>
        <param><defname>rc</defname></param>
        <initializer>\
    &amp;s_rct##rc</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" line="538" column="9" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" bodystart="538" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="b64_8c_1aac1b6d81700849f88a1acf5d994eaa0b" prot="public" static="no">
        <type>struct <ref refid="structb64ErrorString__t__" kindref="compound">b64ErrorString_t_</ref></type>
        <definition>typedef struct b64ErrorString_t_ b64ErrorString_t_</definition>
        <argsstring></argsstring>
        <name>b64ErrorString_t_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" line="490" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" bodystart="521" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="b64_8c_1a9c782056203d85ad854a1b39f1c5cebf" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char b64_chars[]</definition>
        <argsstring>[]</argsstring>
        <name>b64_chars</name>
        <initializer>=   &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" line="96" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="b64_8c_1a81455890112ee89b735a2f2aaa5d795a" prot="public" static="yes" mutable="no">
        <type>const signed char</type>
        <definition>const signed char b64_indexes[]</definition>
        <argsstring>[]</argsstring>
        <name>b64_indexes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" line="98" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" bodystart="98" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="b64_8c_1a34da5206e1d696c272af264304c0f864" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t b64_encode_</definition>
        <argsstring>(unsigned char const *src, size_t srcSize, char *const dest, size_t destLen, unsigned lineLen, B64_RC *rc)</argsstring>
        <name>b64_encode_</name>
        <param>
          <type>unsigned char const *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>srcSize</declname>
        </param>
        <param>
          <type>char *const</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>destLen</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>lineLen</declname>
        </param>
        <param>
          <type><ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9" kindref="member">B64_RC</ref> *</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function reads in 3 bytes at a time, and translates them into 4 characters. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" line="149" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" bodystart="149" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="b64_8c_1ae134c0c88db2d1844ea7ae7f4fcd0921" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t b64_decode_</definition>
        <argsstring>(char const *src, size_t srcLen, unsigned char *dest, size_t destSize, unsigned flags, char const **badChar, B64_RC *rc)</argsstring>
        <name>b64_decode_</name>
        <param>
          <type>char const *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>srcLen</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>destSize</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>char const **</type>
          <declname>badChar</declname>
        </param>
        <param>
          <type><ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9" kindref="member">B64_RC</ref> *</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function reads in a character string in 4-character chunks, and writes out the converted form in 3-byte chunks to the destination. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" line="282" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" bodystart="282" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="b64_8c_1aa518340c8e76af0cf0753c15bebfc2af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t b64_encode</definition>
        <argsstring>(void const *src, size_t srcSize, char *dest, size_t destLen)</argsstring>
        <name>b64_encode</name>
        <param>
          <type>void const *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>srcSize</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>destLen</declname>
        </param>
        <briefdescription>
<para>Encodes a block of binary data into Base-64. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the block to be encoded. May not be NULL, except when <computeroutput>dest</computeroutput> is NULL, in which case it is ignored. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of block to be encoded </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer into which the result is to be written. May be NULL, in which case the function returns the required length </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the buffer into which the result is to be written. Must be at least as large as that indicated by the return value from <ref refid="b64_8h_1aa518340c8e76af0cf0753c15bebfc2af" kindref="member">b64_encode(NULL, srcSize, NULL, 0)</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the size of the buffer was insufficient, or the length of the converted buffer was longer than <computeroutput>destLen</computeroutput> </para></simplesect>
<simplesect kind="note"><para>The function returns the required length if <computeroutput>dest</computeroutput> is NULL</para></simplesect>
<simplesect kind="note"><para>The function returns the required length if <computeroutput>dest</computeroutput> is NULL. The returned size might be larger than the actual required size, but will never be smaller.</para></simplesect>
<simplesect kind="note"><para>Threading: The function is fully re-entrant.</para></simplesect>
<simplesect kind="see"><para>b64::encode() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" line="425" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" bodystart="425" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="b64_8c_1ab08b80124c4db4bf423feff5f7ffa5f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t b64_encode2</definition>
        <argsstring>(void const *src, size_t srcSize, char *dest, size_t destLen, unsigned flags, int lineLen, B64_RC *rc)</argsstring>
        <name>b64_encode2</name>
        <param>
          <type>void const *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>srcSize</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>destLen</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lineLen</declname>
        </param>
        <param>
          <type><ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9" kindref="member">B64_RC</ref> *</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
<para>Encodes a block of binary data into Base-64. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the block to be encoded. May not be NULL, except when <computeroutput>dest</computeroutput> is NULL, in which case it is ignored. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of block to be encoded </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer into which the result is to be written. May be NULL, in which case the function returns the required length </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the buffer into which the result is to be written. Must be at least as large as that indicated by the return value from <ref refid="b64_8h_1ab08b80124c4db4bf423feff5f7ffa5f2" kindref="member">b64_encode2(NULL, srcSize, NULL, 0, flags, lineLen, rc)</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>A combination of the B64_FLAGS enumeration, that moderate the behaviour of the function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lineLen</parametername>
</parameternamelist>
<parameterdescription>
<para>If the flags parameter contains B64_F_LINE_LEN_USE_PARAM, then this parameter represents the length of the lines into which the encoded form is split, with a hard line break (&apos;\r\n&apos;). If this value is 0, then the line is not split. If it is &lt;0, then the RFC-1113 recommended line length of 64 is used </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rc</parametername>
</parameternamelist>
<parameterdescription>
<para>The return code representing the status of the operation. May be NULL.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the size of the buffer was insufficient, or the length of the converted buffer was longer than <computeroutput>destLen</computeroutput> </para></simplesect>
<simplesect kind="note"><para>The function returns the required length if <computeroutput>dest</computeroutput> is NULL. The returned size might be larger than the actual required size, but will never be smaller.</para></simplesect>
<simplesect kind="note"><para>Threading: The function is fully re-entrant.</para></simplesect>
<simplesect kind="see"><para>b64::encode() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" line="435" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" bodystart="435" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="b64_8c_1af0a580e1694f2addb2fec740214f959a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t b64_decode</definition>
        <argsstring>(char const *src, size_t srcLen, void *dest, size_t destSize)</argsstring>
        <name>b64_decode</name>
        <param>
          <type>char const *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>srcLen</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>destSize</declname>
        </param>
        <briefdescription>
<para>Decodes a sequence of Base-64 into a block of binary data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the Base-64 block to be decoded. May not be NULL, except when <computeroutput>dest</computeroutput> is NULL, in which case it is ignored. If <computeroutput>dest</computeroutput> is NULL, and <computeroutput>src</computeroutput> is <bold>not</bold> NULL, then the returned value is calculated exactly, otherwise a value is returned that is guaranteed to be large enough to hold the decoded block.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of block to be encoded. Must be an integral of 4, the Base-64 encoding quantum, otherwise the Base-64 block is assumed to be invalid </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer into which the result is to be written. May be NULL, in which case the function returns the required length </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the buffer into which the result is to be written. Must be at least as large as that indicated by the return value from <computeroutput>b64_decode(src, srcSize, NULL, 0)</computeroutput>, even in the case where the encoded form contains a number of characters that will be ignored, resulting in a lower total length of converted form.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the size of the buffer was insufficient, or the length of the converted buffer was longer than <computeroutput>destSize</computeroutput> </para></simplesect>
<simplesect kind="note"><para>The function returns the required length if <computeroutput>dest</computeroutput> is NULL. The returned size might be larger than the actual required size, but will never be smaller.</para></simplesect>
<simplesect kind="note"><para><anchor id="b64_8h_1anchor__4_characters"/>The behaviour of both <ref refid="b64_8h_1ab08b80124c4db4bf423feff5f7ffa5f2" kindref="member">b64_encode2()</ref> and <ref refid="b64_8h_1a50a93e4f6a922c5314a9cb50befc2d13" kindref="member">b64_decode2()</ref> are undefined if the line length is not a multiple of 4.</para></simplesect>
<simplesect kind="note"><para>Threading: The function is fully re-entrant.</para></simplesect>
<simplesect kind="see"><para>b64::decode() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" line="479" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" bodystart="479" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="b64_8c_1a50a93e4f6a922c5314a9cb50befc2d13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t b64_decode2</definition>
        <argsstring>(char const *src, size_t srcLen, void *dest, size_t destSize, unsigned flags, char const **badChar, B64_RC *rc)</argsstring>
        <name>b64_decode2</name>
        <param>
          <type>char const *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>srcLen</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>destSize</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>char const **</type>
          <declname>badChar</declname>
        </param>
        <param>
          <type><ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9" kindref="member">B64_RC</ref> *</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
<para>Decodes a sequence of Base-64 into a block of binary data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the Base-64 block to be decoded. May not be NULL, except when <computeroutput>dest</computeroutput> is NULL, in which case it is ignored. If <computeroutput>dest</computeroutput> is NULL, and <computeroutput>src</computeroutput> is <bold>not</bold> NULL, then the returned value is calculated exactly, otherwise a value is returned that is guaranteed to be large enough to hold the decoded block.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of block to be encoded. Must be an integral of 4, the Base-64 encoding quantum, otherwise the Base-64 block is assumed to be invalid </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer into which the result is to be written. May be NULL, in which case the function returns the required length </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the buffer into which the result is to be written. Must be at least as large as that indicated by the return value from <computeroutput>b64_decode(src, srcSize, NULL, 0)</computeroutput>, even in the case where the encoded form contains a number of characters that will be ignored, resulting in a lower total length of converted form. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>A combination of the B64_FLAGS enumeration, that moderate the behaviour of the function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rc</parametername>
</parameternamelist>
<parameterdescription>
<para>The return code representing the status of the operation. May be NULL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>badChar</parametername>
</parameternamelist>
<parameterdescription>
<para>If the flags parameter does not contain B64_F_STOP_ON_NOTHING, this parameter specifies the address of a pointer that will be set to point to any character in the sequence that stops the parsing, as dictated by the flags parameter. May be NULL.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the size of the buffer was insufficient, or the length of the converted buffer was longer than <computeroutput>destSize</computeroutput>, or a bad character stopped parsing.</para></simplesect>
<simplesect kind="note"><para>The function returns the required length if <computeroutput>dest</computeroutput> is NULL. The returned size might be larger than the actual required size, but will never be smaller.</para></simplesect>
<simplesect kind="note"><para>The behaviour of both <ref refid="b64_8h_1ab08b80124c4db4bf423feff5f7ffa5f2" kindref="member">b64_encode2()</ref> and <ref refid="b64_8h_1a50a93e4f6a922c5314a9cb50befc2d13" kindref="member">b64_decode2()</ref> are undefined if the line length is not a multiple of 4.</para></simplesect>
<simplesect kind="note"><para>Threading: The function is fully re-entrant.</para></simplesect>
<simplesect kind="see"><para>b64::decode() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" line="490" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" bodystart="490" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="b64_8c_1ac4617177e6d4345340fbc7fae5885f8c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char const  *</type>
        <definition>static char const* b64_LookupCodeA_</definition>
        <argsstring>(int code, b64ErrorString_t_ const **mappings, size_t cMappings, size_t *len)</argsstring>
        <name>b64_LookupCodeA_</name>
        <param>
          <type>int</type>
          <declname>code</declname>
        </param>
        <param>
          <type><ref refid="structb64ErrorString__t__" kindref="compound">b64ErrorString_t_</ref> const **</type>
          <declname>mappings</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cMappings</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" line="543" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" bodystart="543" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="b64_8c_1a52c3c02216e9f402dec6995f91158033" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char const  *</type>
        <definition>static char const* b64_LookupErrorStringA_</definition>
        <argsstring>(int error, size_t *len)</argsstring>
        <name>b64_LookupErrorStringA_</name>
        <param>
          <type>int</type>
          <declname>error</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" line="579" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" bodystart="579" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="b64_8c_1a84adc01b9c5028eee501d2fb2bef9a11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char const  *</type>
        <definition>char const* b64_getErrorString</definition>
        <argsstring>(B64_RC code)</argsstring>
        <name>b64_getErrorString</name>
        <param>
          <type><ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9" kindref="member">B64_RC</ref></type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Returns the textual description of the error. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9" kindref="member">error code</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" line="597" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" bodystart="597" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="b64_8c_1a48c61d4785f8b1f8122a5a9f778a9f20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t b64_getErrorStringLength</definition>
        <argsstring>(B64_RC code)</argsstring>
        <name>b64_getErrorStringLength</name>
        <param>
          <type><ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9" kindref="member">B64_RC</ref></type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Returns the length of the textual description of the error. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="b64_8h_1a84adc01b9c5028eee501d2fb2bef9a11" kindref="member">b64_getErrorString()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9" kindref="member">error code</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" line="602" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c" bodystart="602" bodyend="607"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Implementation file for the b64 library </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>/////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>File:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b64.c</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Purpose:<sp/><sp/><sp/><sp/><sp/>Implementation<sp/>file<sp/>for<sp/>the<sp/>b64<sp/>library</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Created:<sp/><sp/><sp/><sp/><sp/>18th<sp/>October<sp/>2004</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Updated:<sp/><sp/><sp/><sp/><sp/>3rd<sp/>May<sp/>2008</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>Home:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http://synesis.com.au/software/</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2004-2008,<sp/>Matthew<sp/>Wilson<sp/>and<sp/>Synesis<sp/>Software</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>-<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>-<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/><sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>-<sp/>Neither<sp/>the<sp/>name(s)<sp/>of<sp/>Matthew<sp/>Wilson<sp/>and<sp/>Synesis<sp/>Software<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/><sp/><sp/>any<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/><sp/><sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="comment">/*<sp/>/////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>Version<sp/>information</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>B64_DOCUMENTATION_SKIP_SECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>B64_VER_C_B64_MAJOR<sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>B64_VER_C_B64_MINOR<sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>B64_VER_C_B64_REVISION<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>B64_VER_C_B64_EDIT<sp/><sp/><sp/><sp/><sp/>17</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!B64_DOCUMENTATION_SKIP_SECTION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>/////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>Includes</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ortp/port.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="b64_8h" kindref="compound">ortp/b64.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;bctoolbox/defs.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>/////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>Constants<sp/>and<sp/>definitions</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>B64_DOCUMENTATION_SKIP_SECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>NUM_PLAIN_DATA_BYTES<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>NUM_ENCODED_DATA_BYTES<sp/><sp/><sp/><sp/><sp/><sp/>(4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!B64_DOCUMENTATION_SKIP_SECTION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>/////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>Macros</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NUM_ELEMENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>NUM_ELEMENTS(x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(sizeof(x)<sp/>/<sp/>sizeof(x[0]))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!NUM_ELEMENTS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>/////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>Warnings</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_MSC_VER<sp/>&lt;<sp/>1000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>warning(disable<sp/>:<sp/>4705)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_MSC_VER<sp/>&lt;<sp/>1000<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>/////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>Data</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b64_chars[]<sp/>=<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>b64_indexes[]<sp/><sp/><sp/>=</highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>0<sp/>-<sp/>31<sp/>/<sp/>0x00<sp/>-<sp/>0x1f<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>32<sp/>-<sp/>63<sp/>/<sp/>0x20<sp/>-<sp/>0x3f<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>62,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>63<sp/><sp/></highlight><highlight class="comment">/*<sp/>...<sp/>,<sp/>&apos;+&apos;,<sp/>...<sp/>&apos;/&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>52,<sp/>53,<sp/>54,<sp/>55,<sp/>56,<sp/>57,<sp/>58,<sp/>59<sp/><sp/></highlight><highlight class="comment">/*<sp/>&apos;0&apos;<sp/>-<sp/>&apos;7&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>60,<sp/>61,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1<sp/><sp/></highlight><highlight class="comment">/*<sp/>&apos;8&apos;,<sp/>&apos;9&apos;,<sp/>...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>64<sp/>-<sp/>95<sp/>/<sp/>0x40<sp/>-<sp/>0x5f<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>-1,<sp/>0,<sp/><sp/>1,<sp/><sp/>2,<sp/><sp/>3,<sp/><sp/>4,<sp/><sp/>5,<sp/><sp/>6<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>...,<sp/>&apos;A&apos;<sp/>-<sp/>&apos;G&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>7,<sp/><sp/>8,<sp/><sp/>9,<sp/><sp/>10,<sp/>11,<sp/>12,<sp/>13,<sp/>14<sp/><sp/></highlight><highlight class="comment">/*<sp/>&apos;H&apos;<sp/>-<sp/>&apos;O&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>15,<sp/>16,<sp/>17,<sp/>18,<sp/>19,<sp/>20,<sp/>21,<sp/>22<sp/><sp/></highlight><highlight class="comment">/*<sp/>&apos;P&apos;<sp/>-<sp/>&apos;W&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>23,<sp/>24,<sp/>25,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1<sp/><sp/></highlight><highlight class="comment">/*<sp/>&apos;X&apos;,<sp/>&apos;Y&apos;,<sp/>&apos;Z&apos;,<sp/>...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>96<sp/>-<sp/>127<sp/>/<sp/>0x60<sp/>-<sp/>0x7f<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>-1,<sp/>26,<sp/>27,<sp/>28,<sp/>29,<sp/>30,<sp/>31,<sp/>32<sp/><sp/></highlight><highlight class="comment">/*<sp/>...,<sp/>&apos;a&apos;<sp/>-<sp/>&apos;g&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>33,<sp/>34,<sp/>35,<sp/>36,<sp/>37,<sp/>38,<sp/>39,<sp/>40<sp/><sp/></highlight><highlight class="comment">/*<sp/>&apos;h&apos;<sp/>-<sp/>&apos;o&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>41,<sp/>42,<sp/>43,<sp/>44,<sp/>45,<sp/>46,<sp/>47,<sp/>48<sp/><sp/></highlight><highlight class="comment">/*<sp/>&apos;p&apos;<sp/>-<sp/>&apos;w&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>49,<sp/>50,<sp/>51,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1<sp/><sp/></highlight><highlight class="comment">/*<sp/>&apos;x&apos;,<sp/>&apos;y&apos;,<sp/>&apos;z&apos;,<sp/>...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1</highlight></codeline>
<codeline lineno="140"><highlight class="normal">};</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>/////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/>Helper<sp/>functions</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>b64_encode_(<sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*src</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcSize</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destLen</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineLen</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/><ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9" kindref="member">B64_RC</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*rc)</highlight></codeline>
<codeline lineno="155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>total<sp/>=<sp/>((srcSize<sp/>+<sp/>(NUM_PLAIN_DATA_BYTES<sp/>-<sp/>1))<sp/>/<sp/>NUM_PLAIN_DATA_BYTES)<sp/>*<sp/>NUM_ENCODED_DATA_BYTES;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(NULL<sp/>!=<sp/>rc);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>*rc<sp/>=<sp/><ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9a093d40a7c78e12094da606fbe9633e36" kindref="member">B64_RC_OK</ref>;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lineLen<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numLines<sp/>=<sp/>(total<sp/>+<sp/>(lineLen<sp/>-<sp/>1))<sp/>/<sp/>lineLen;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>2<sp/>*<sp/>(numLines<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NULL<sp/>==<sp/>dest)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(destLen<sp/>&lt;<sp/>total)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*rc<sp/>=<sp/><ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9abfeaa32948d5a8b9afe5314a4e5f4ce3" kindref="member">B64_RC_INSUFFICIENT_BUFFER</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*p<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/><sp/>dest;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*end<sp/><sp/><sp/><sp/>=<sp/><sp/><sp/>dest<sp/>+<sp/>destLen;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/>len<sp/><sp/><sp/><sp/><sp/>=<sp/><sp/><sp/>0;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>NUM_PLAIN_DATA_BYTES<sp/>&lt;=<sp/>srcSize;<sp/>srcSize<sp/>-=<sp/>NUM_PLAIN_DATA_BYTES)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>characters[NUM_ENCODED_DATA_BYTES];</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>|<sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/>2<sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/>3<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>characters[0]<sp/>is<sp/>the<sp/>6<sp/>left-most<sp/>bits<sp/>of<sp/>src[0]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>characters[0]<sp/>=<sp/>((src[0]<sp/>&amp;<sp/>0xfc)<sp/>&gt;&gt;<sp/>2);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>characters[0]<sp/>is<sp/>the<sp/>right-most<sp/>2<sp/>bits<sp/>of<sp/>src[0]<sp/>and<sp/>the<sp/>left-most<sp/>4<sp/>bits<sp/>of<sp/>src[1]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>characters[1]<sp/>=<sp/>(((src[0]<sp/>&amp;<sp/>0x03)<sp/>&lt;&lt;<sp/>4)<sp/>+<sp/>((src[1]<sp/>&amp;<sp/>0xf0)<sp/>&gt;&gt;<sp/>4));</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>characters[0]<sp/>is<sp/>the<sp/>right-most<sp/>4<sp/>bits<sp/>of<sp/>src[1]<sp/>and<sp/>the<sp/>2<sp/>left-most<sp/>bits<sp/>of<sp/>src[2]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>characters[2]<sp/>=<sp/>(((src[1]<sp/>&amp;<sp/>0x0f)<sp/>&lt;&lt;<sp/>2)<sp/>+<sp/>((src[2]<sp/>&amp;<sp/>0xc0)<sp/>&gt;&gt;<sp/>6));</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>characters[3]<sp/>is<sp/>the<sp/>right-most<sp/>6<sp/>bits<sp/>of<sp/>src[2]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>characters[3]<sp/>=<sp/>(src[2]<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__WATCOMC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(characters[0]<sp/>&lt;<sp/>64);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(characters[1]<sp/>&lt;<sp/>64);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(characters[2]<sp/>&lt;<sp/>64);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(characters[3]<sp/>&lt;<sp/>64);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__WATCOMC__<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src<sp/>+=<sp/>NUM_PLAIN_DATA_BYTES;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>b64_chars[characters[0]];</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(NULL<sp/>!=<sp/>strchr(b64_chars,<sp/>*(p-1)));</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++len;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(len<sp/>!=<sp/>lineLen);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>b64_chars[characters[1]];</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(NULL<sp/>!=<sp/>strchr(b64_chars,<sp/>*(p-1)));</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++len;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(len<sp/>!=<sp/>lineLen);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>b64_chars[characters[2]];</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(NULL<sp/>!=<sp/>strchr(b64_chars,<sp/>*(p-1)));</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++len;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(len<sp/>!=<sp/>lineLen);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>b64_chars[characters[3]];</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(NULL<sp/>!=<sp/>strchr(b64_chars,<sp/>*(p-1)));</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>++len<sp/>==<sp/>lineLen<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>!=<sp/>end)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(0<sp/>!=<sp/>srcSize)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Deal<sp/>with<sp/>the<sp/>overspill,<sp/>by<sp/>boosting<sp/>it<sp/>up<sp/>to<sp/>three<sp/>bytes<sp/>(using<sp/>0s)</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>then<sp/>appending<sp/>&apos;=&apos;<sp/>for<sp/>any<sp/>missing<sp/>characters.</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>is<sp/>done<sp/>into<sp/>a<sp/>temporary<sp/>buffer,<sp/>so<sp/>we<sp/>can<sp/>call<sp/>ourselves<sp/>and</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>have<sp/>the<sp/>output<sp/>continue<sp/>to<sp/>be<sp/>written<sp/>direct<sp/>to<sp/>the<sp/>destination.</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/>dummy[NUM_PLAIN_DATA_BYTES];</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>srcSize;<sp/>++i)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummy[i]<sp/>=<sp/>*src++;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>i<sp/>&lt;<sp/>NUM_PLAIN_DATA_BYTES;<sp/>++i)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummy[i]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b64_encode_(&amp;dummy[0],<sp/>NUM_PLAIN_DATA_BYTES,<sp/>p,<sp/>NUM_ENCODED_DATA_BYTES<sp/>*<sp/>(1<sp/>+<sp/>2),<sp/>0,<sp/>rc);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(p<sp/>+=<sp/>1<sp/>+<sp/>srcSize;<sp/>srcSize++<sp/>&lt;<sp/>NUM_PLAIN_DATA_BYTES;<sp/>)</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>b64_decode_(<sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*src</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcLen</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/>*dest</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destSize</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>**badChar</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/><ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9" kindref="member">B64_RC</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*rc)</highlight></codeline>
<codeline lineno="289"><highlight class="normal">{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>wholeChunks<sp/><sp/><sp/><sp/><sp/>=<sp/><sp/><sp/>(srcLen<sp/>/<sp/>NUM_ENCODED_DATA_BYTES);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>remainderBytes<sp/><sp/>=<sp/><sp/><sp/>(srcLen<sp/>%<sp/>NUM_ENCODED_DATA_BYTES);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxTotal<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/><sp/>(wholeChunks<sp/>+<sp/>(0<sp/>!=<sp/>remainderBytes))<sp/>*<sp/>NUM_PLAIN_DATA_BYTES;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/>*dest_<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/><sp/>dest;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>((void)remainderBytes);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(NULL<sp/>!=<sp/>badChar);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(NULL<sp/>!=<sp/>rc);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>*badChar<sp/><sp/><sp/><sp/>=<sp/><sp/><sp/>NULL;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>*rc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/><sp/><ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9a093d40a7c78e12094da606fbe9633e36" kindref="member">B64_RC_OK</ref>;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NULL<sp/>==<sp/>dest)</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>maxTotal;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(destSize<sp/>&lt;<sp/>maxTotal)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*rc<sp/>=<sp/><ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9abfeaa32948d5a8b9afe5314a4e5f4ce3" kindref="member">B64_RC_INSUFFICIENT_BUFFER</ref>;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>we<sp/>iterate<sp/>through<sp/>the<sp/>src,<sp/>collecting<sp/>together<sp/>four<sp/>characters</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>at<sp/>a<sp/>time<sp/>from<sp/>the<sp/>Base-64<sp/>alphabet,<sp/>until<sp/>the<sp/>end-point<sp/>is<sp/>reached.</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*begin<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/><sp/>src;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/>end<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/><sp/>begin<sp/>+<sp/>srcLen;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currIndex<sp/><sp/><sp/>=<sp/><sp/><sp/>0;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numPads<sp/><sp/><sp/><sp/><sp/>=<sp/><sp/><sp/>0;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexes[NUM_ENCODED_DATA_BYTES];<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>4<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>begin<sp/>!=<sp/>end;<sp/>++begin)</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>ch<sp/><sp/>=<sp/><sp/><sp/>*begin;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal"><sp/>==<sp/>ch)</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(currIndex<sp/>&lt;<sp/>NUM_ENCODED_DATA_BYTES);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexes[currIndex++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++numPads;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>NOTE:<sp/>Had<sp/>to<sp/>rename<sp/>&apos;index&apos;<sp/>to<sp/>&apos;ix&apos;,<sp/>due<sp/>to<sp/>name<sp/>clash<sp/>with<sp/>GCC<sp/>on<sp/>64-bit<sp/>Linux.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ix<sp/><sp/><sp/>=<sp/><sp/><sp/>b64_indexes[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)ch];</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(-1<sp/>==<sp/>ix)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(ch)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">:BCTBX_NO_BREAK;<sp/></highlight><highlight class="comment">/*intentionally<sp/>no<sp/>break*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">:BCTBX_NO_BREAK;<sp/></highlight><highlight class="comment">/*intentionally<sp/>no<sp/>break*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="charliteral">&apos;\b&apos;</highlight><highlight class="normal">:BCTBX_NO_BREAK;<sp/></highlight><highlight class="comment">/*intentionally<sp/>no<sp/>break*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="charliteral">&apos;\v&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="b64_8h_1a5768c3ae7453e1fa71cd7c737fc7413caad4bc3f40b605d9364692a04cf198fa2" kindref="member">B64_F_STOP_ON_UNEXPECTED_WS</ref><sp/>&amp;<sp/>flags)</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*rc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/><sp/><ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9a0d7d5feca8db186e00437c4c7b6aeb41" kindref="member">B64_RC_DATA_ERROR</ref>;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*badChar<sp/><sp/><sp/><sp/>=<sp/><sp/><sp/>begin;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BCTBX_NO_BREAK;<sp/></highlight><highlight class="comment">/*<sp/>Fall<sp/>through<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">:BCTBX_NO_BREAK;<sp/></highlight><highlight class="comment">/*intentionally<sp/>no<sp/>break*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="b64_8h_1a5768c3ae7453e1fa71cd7c737fc7413caa020e250cf72194c76df9a241b4ec454" kindref="member">B64_F_STOP_ON_UNKNOWN_CHAR</ref><sp/>&amp;<sp/>flags)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*rc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/><sp/><ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9a0d7d5feca8db186e00437c4c7b6aeb41" kindref="member">B64_RC_DATA_ERROR</ref>;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*badChar<sp/><sp/><sp/><sp/>=<sp/><sp/><sp/>begin;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numPads<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(currIndex<sp/>&lt;<sp/>NUM_ENCODED_DATA_BYTES);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexes[currIndex++]<sp/>=<sp/>ix;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NUM_ENCODED_DATA_BYTES<sp/>==<sp/>currIndex)</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/>bytes[NUM_PLAIN_DATA_BYTES];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>3<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes[0]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)((indexes[0]<sp/>&lt;&lt;<sp/>2)<sp/>+<sp/>((indexes[1]<sp/>&amp;<sp/>0x30)<sp/>&gt;&gt;<sp/>4));</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest++<sp/>=<sp/>bytes[0];</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(2<sp/>!=<sp/>numPads)</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes[1]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(((indexes[1]<sp/>&amp;<sp/>0xf)<sp/>&lt;&lt;<sp/>4)<sp/>+<sp/>((indexes[2]<sp/>&amp;<sp/>0x3c)<sp/>&gt;&gt;<sp/>2));</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest++<sp/>=<sp/>bytes[1];</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(1<sp/>!=<sp/>numPads)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes[2]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(((indexes[2]<sp/>&amp;<sp/>0x3)<sp/>&lt;&lt;<sp/>6)<sp/>+<sp/>indexes[3]);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest++<sp/>=<sp/>bytes[2];</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(0<sp/>!=<sp/>numPads)</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(dest<sp/>-<sp/>dest_);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>/////////////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/>*<sp/>API<sp/>functions</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="b64_8c_1aa518340c8e76af0cf0753c15bebfc2af" kindref="member">b64_encode</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>srcSize,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>destLen)</highlight></codeline>
<codeline lineno="426"><highlight class="normal">{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Use<sp/>Null<sp/>Object<sp/>(Variable)<sp/>here<sp/>for<sp/>rc,<sp/>so<sp/>do<sp/>not<sp/>need<sp/>to<sp/>check</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>elsewhere.</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9" kindref="member">B64_RC</ref><sp/><sp/>rc_;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b64_encode_((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*)src,<sp/>srcSize,<sp/>dest,<sp/>destLen,<sp/>0,<sp/>&amp;rc_);</highlight></codeline>
<codeline lineno="433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="b64_8c_1ab08b80124c4db4bf423feff5f7ffa5f2" kindref="member">b64_encode2</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/>*src</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>srcSize</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>destLen</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>flags</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineLen<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>-1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/><ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9" kindref="member">B64_RC</ref><sp/><sp/><sp/><sp/><sp/><sp/>*rc<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>=<sp/>NULL<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="442"><highlight class="normal">{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Use<sp/>Null<sp/>Object<sp/>(Variable)<sp/>here<sp/>for<sp/>rc,<sp/>so<sp/>do<sp/>not<sp/>need<sp/>to<sp/>check</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>elsewhere</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9" kindref="member">B64_RC</ref><sp/><sp/>rc_;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NULL<sp/>==<sp/>rc)</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>&amp;rc_;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<ref refid="b64_8h_1a5768c3ae7453e1fa71cd7c737fc7413cacc8694fc21ea7aa55739e129ab004571" kindref="member">B64_F_LINE_LEN_MASK</ref><sp/>&amp;<sp/>flags)</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="b64_8h_1a5768c3ae7453e1fa71cd7c737fc7413cae413e3e84255c3eae6ad13c5fa98ecca" kindref="member">B64_F_LINE_LEN_USE_PARAM</ref>:</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lineLen<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BCTBX_NO_BREAK;<sp/></highlight><highlight class="comment">/*<sp/>Fall<sp/>through<sp/>to<sp/>64<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="b64_8h_1a5768c3ae7453e1fa71cd7c737fc7413ca816f1c78e0a6f47a5bfad5ff1fcf0b72" kindref="member">B64_F_LINE_LEN_64</ref>:</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineLen<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="b64_8h_1a5768c3ae7453e1fa71cd7c737fc7413ca96b853d392c2cdce0c8019a89a1d4a0b" kindref="member">B64_F_LINE_LEN_76</ref>:</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineLen<sp/>=<sp/>76;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*the<sp/>following<sp/>assert<sp/>makes<sp/>a<sp/>compiler<sp/>error<sp/>with<sp/>icc*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*assert(!&quot;Bad<sp/>line<sp/>length<sp/>flag<sp/>specified<sp/>to<sp/>b64_encode2()&quot;);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="b64_8h_1a5768c3ae7453e1fa71cd7c737fc7413cadd6af461896c070fa3db1bd33921e379" kindref="member">B64_F_LINE_LEN_INFINITE</ref>:</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(0<sp/>==<sp/>(lineLen<sp/>%<sp/>4));</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b64_encode_((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*)src,<sp/>srcSize,<sp/>dest,<sp/>destLen,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)lineLen,<sp/>rc);</highlight></codeline>
<codeline lineno="477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="b64_8c_1af0a580e1694f2addb2fec740214f959a" kindref="member">b64_decode</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>srcLen,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>destSize)</highlight></codeline>
<codeline lineno="480"><highlight class="normal">{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Use<sp/>Null<sp/>Object<sp/>(Variable)<sp/>here<sp/>for<sp/>rc<sp/>and<sp/>badChar,<sp/>so<sp/>do<sp/>not<sp/>need<sp/>to</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>check<sp/>elsewhere.</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/>*badChar_;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9" kindref="member">B64_RC</ref><sp/><sp/><sp/><sp/><sp/><sp/>rc_;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b64_decode_(src,<sp/>srcLen,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)dest,<sp/>destSize,<sp/><ref refid="b64_8h_1a5768c3ae7453e1fa71cd7c737fc7413cac9103a00218a3d5888e0e40123104340" kindref="member">B64_F_STOP_ON_NOTHING</ref>,<sp/>&amp;badChar_,<sp/>&amp;rc_);</highlight></codeline>
<codeline lineno="488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="b64_8c_1a50a93e4f6a922c5314a9cb50befc2d13" kindref="member">b64_decode2</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/>*src</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>srcLen</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>destSize</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>flags</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/>**badChar<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>=<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/><ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9" kindref="member">B64_RC</ref><sp/><sp/><sp/><sp/><sp/><sp/>*rc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>=<sp/>NULL<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="497"><highlight class="normal">{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*badChar_;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9" kindref="member">B64_RC</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc_;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Use<sp/>Null<sp/>Object<sp/>(Variable)<sp/>here<sp/>for<sp/>rc<sp/>and<sp/>badChar,<sp/>so<sp/>do<sp/>not<sp/>need<sp/>to</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>check<sp/>elsewhere.</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NULL<sp/>==<sp/>badChar)</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>badChar<sp/>=<sp/>&amp;badChar_;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NULL<sp/>==<sp/>rc)</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>&amp;rc_;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b64_decode_(src,<sp/>srcLen,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)dest,<sp/>destSize,<sp/>flags,<sp/>badChar,<sp/>rc);</highlight></codeline>
<codeline lineno="514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>B64_DOCUMENTATION_SKIP_SECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structb64ErrorString__t__" kindref="compound">b64ErrorString_t_</ref></highlight></codeline>
<codeline lineno="520"><highlight class="normal">#else<sp/></highlight><highlight class="comment">/*<sp/>!B64_DOCUMENTATION_SKIP_SECTION<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal">typedef<sp/>struct<sp/><ref refid="structb64ErrorString__t__" kindref="compound">b64ErrorString_t_</ref><sp/><sp/><sp/><sp/><ref refid="structb64ErrorString__t__" kindref="compound">b64ErrorString_t_</ref>;</highlight></codeline>
<codeline lineno="522" refid="structb64ErrorString__t__" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structb64ErrorString__t__" kindref="compound">b64ErrorString_t_</ref></highlight></codeline>
<codeline lineno="523"><highlight class="normal">#endif<sp/></highlight><highlight class="comment">/*<sp/>!B64_DOCUMENTATION_SKIP_SECTION<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal">{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb64ErrorString__t___1abc14a7cbc65d71311340950a9b300944" kindref="member">code</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/>*<ref refid="structb64ErrorString__t___1aa6eecf23d29debb42e999c6909a056e6" kindref="member">str</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb64ErrorString__t___1a2c99a921d225217da271a97114ce2658" kindref="member">len</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="528"><highlight class="normal">};</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SEVERITY_STR_DECL(rc,<sp/>desc)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="533"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="534"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>const<sp/>char<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_str##rc[]<sp/>=<sp/><sp/><sp/>desc;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="535"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>const<sp/>b64ErrorString_t_<sp/><sp/>s_rct##rc<sp/>=<sp/>{<sp/>rc,<sp/>s_str##rc,<sp/>NUM_ELEMENTS(s_str##rc)<sp/>-<sp/>1<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SEVERITY_STR_ENTRY(rc)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="539"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="540"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&amp;s_rct##rc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*b64_LookupCodeA_(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structb64ErrorString__t___1abc14a7cbc65d71311340950a9b300944" kindref="member">code</ref>,<sp/><ref refid="structb64ErrorString__t__" kindref="compound">b64ErrorString_t_</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>**mappings,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cMappings,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*len)</highlight></codeline>
<codeline lineno="544"><highlight class="normal">{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Use<sp/>Null<sp/>Object<sp/>(Variable)<sp/>here<sp/>for<sp/>len,<sp/>so<sp/>do<sp/>not<sp/>need<sp/>to<sp/>check</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>elsewhere.</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/>len_;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NULL<sp/>==<sp/>len)</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>&amp;len_;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Checked,<sp/>indexed<sp/>search.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>code<sp/>&gt;=<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/>&lt;<sp/>B64_max_RC_value)</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(code<sp/>==<sp/>mappings[code]-&gt;code)</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*len<sp/>=<sp/>mappings[code]-&gt;len,<sp/>mappings[code]-&gt;<ref refid="structb64ErrorString__t___1aa6eecf23d29debb42e999c6909a056e6" kindref="member">str</ref>);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Linear<sp/>search.<sp/>Should<sp/>only<sp/>be<sp/>needed<sp/>if<sp/>order<sp/>in</highlight></codeline>
<codeline lineno="566"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>b64_LookupErrorStringA_()<sp/>messed<sp/>up.</highlight></codeline>
<codeline lineno="567"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cMappings;<sp/>++i)</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(code<sp/>==<sp/>mappings[i]-&gt;code)</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*len<sp/>=<sp/>mappings[i]-&gt;len,<sp/>mappings[i]-&gt;<ref refid="structb64ErrorString__t___1aa6eecf23d29debb42e999c6909a056e6" kindref="member">str</ref>);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>}}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*len<sp/>=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*b64_LookupErrorStringA_(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*len)</highlight></codeline>
<codeline lineno="580"><highlight class="normal">{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>SEVERITY_STR_DECL(<ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9a093d40a7c78e12094da606fbe9633e36" kindref="member">B64_RC_OK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Operation<sp/>was<sp/>successful&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>SEVERITY_STR_DECL(<ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9abfeaa32948d5a8b9afe5314a4e5f4ce3" kindref="member">B64_RC_INSUFFICIENT_BUFFER</ref><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>given<sp/>translation<sp/>buffer<sp/>was<sp/>not<sp/>of<sp/>sufficient<sp/>size&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>SEVERITY_STR_DECL(<ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9a207599c81a925353d57267f0a878147c" kindref="member">B64_RC_TRUNCATED_INPUT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>input<sp/>did<sp/>not<sp/>represent<sp/>a<sp/>fully<sp/>formed<sp/>stream<sp/>of<sp/>octet<sp/>couplings&quot;</highlight><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>SEVERITY_STR_DECL(<ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9a0d7d5feca8db186e00437c4c7b6aeb41" kindref="member">B64_RC_DATA_ERROR</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>data&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb64ErrorString__t__" kindref="compound">b64ErrorString_t_</ref><sp/><sp/><sp/><sp/>*s_strings[]<sp/>=</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEVERITY_STR_ENTRY(<ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9a093d40a7c78e12094da606fbe9633e36" kindref="member">B64_RC_OK</ref>),</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEVERITY_STR_ENTRY(<ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9abfeaa32948d5a8b9afe5314a4e5f4ce3" kindref="member">B64_RC_INSUFFICIENT_BUFFER</ref>),</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEVERITY_STR_ENTRY(<ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9a207599c81a925353d57267f0a878147c" kindref="member">B64_RC_TRUNCATED_INPUT</ref>),</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEVERITY_STR_ENTRY(<ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9a0d7d5feca8db186e00437c4c7b6aeb41" kindref="member">B64_RC_DATA_ERROR</ref>),</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b64_LookupCodeA_(error,<sp/>s_strings,<sp/>NUM_ELEMENTS(s_strings),<sp/>len);</highlight></codeline>
<codeline lineno="595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="b64_8c_1a84adc01b9c5028eee501d2fb2bef9a11" kindref="member">b64_getErrorString</ref>(<ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9" kindref="member">B64_RC</ref><sp/>code)</highlight></codeline>
<codeline lineno="598"><highlight class="normal">{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b64_LookupErrorStringA_((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)code,<sp/>NULL);</highlight></codeline>
<codeline lineno="600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="b64_8c_1a48c61d4785f8b1f8122a5a9f778a9f20" kindref="member">b64_getErrorStringLength</ref>(<ref refid="b64_8h_1a432f620157f14714e209d99a20f523d9" kindref="member">B64_RC</ref><sp/>code)</highlight></codeline>
<codeline lineno="603"><highlight class="normal">{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><ref refid="structb64ErrorString__t___1a2c99a921d225217da271a97114ce2658" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(b64_LookupErrorStringA_((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)code,<sp/>&amp;len),<sp/>len);</highlight></codeline>
<codeline lineno="607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//////////////////////////////////////////////////////////////////////////<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/b64.c"/>
  </compounddef>
</doxygen>
