<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="rtcpparse_8c" kind="file" language="C++">
    <compoundname>rtcpparse.c</compoundname>
    <includes refid="ortp_8h" local="yes">ortp/ortp.h</includes>
    <includes refid="src_2utils_8h" local="yes">utils.h</includes>
    <incdepgraph>
      <node id="244">
        <label>ortp/payloadtype.h</label>
        <link refid="payloadtype_8h"/>
      </node>
      <node id="245">
        <label>ortp/rtpprofile.h</label>
        <link refid="rtpprofile_8h"/>
      </node>
      <node id="240">
        <label>ortp/ortp.h</label>
        <link refid="ortp_8h"/>
        <childnode refid="241" relation="include">
        </childnode>
        <childnode refid="242" relation="include">
        </childnode>
        <childnode refid="246" relation="include">
        </childnode>
      </node>
      <node id="242">
        <label>ortp/rtpsession.h</label>
        <link refid="rtpsession_8h"/>
        <childnode refid="243" relation="include">
        </childnode>
        <childnode refid="244" relation="include">
        </childnode>
        <childnode refid="245" relation="include">
        </childnode>
        <childnode refid="246" relation="include">
        </childnode>
      </node>
      <node id="246">
        <label>ortp/sessionset.h</label>
        <link refid="sessionset_8h"/>
        <childnode refid="242" relation="include">
        </childnode>
        <childnode refid="247" relation="include">
        </childnode>
        <childnode refid="248" relation="include">
        </childnode>
        <childnode refid="249" relation="include">
        </childnode>
      </node>
      <node id="248">
        <label>sys/types.h</label>
      </node>
      <node id="249">
        <label>unistd.h</label>
      </node>
      <node id="241">
        <label>ortp/logging.h</label>
        <link refid="logging_8h"/>
      </node>
      <node id="243">
        <label>bctoolbox/list.h</label>
      </node>
      <node id="247">
        <label>sys/time.h</label>
      </node>
      <node id="239">
        <label>rtcpparse.c</label>
        <link refid="rtcpparse_8c"/>
        <childnode refid="240" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="rtcpparse_8c_1a57d0f9bc3b45e9b33e8d00caa46ba97e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t rtcp_get_size</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_get_size</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="24" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="24" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1ad6dd7740b996ca8200ddd6042bca54c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool_t</type>
        <definition>bool_t rtcp_next_packet</definition>
        <argsstring>(mblk_t *m)</argsstring>
        <name>rtcp_next_packet</name>
        <param>
          <type><ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="32" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="32" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a150f1127cb25fda345c4ffb6f8d1195c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rtcp_rewind</definition>
        <argsstring>(mblk_t *m)</argsstring>
        <name>rtcp_rewind</name>
        <param>
          <type><ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="41" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="41" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a13579b69f12c4310e1a2b5a4c00ad747" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref> *</type>
        <definition>const rtcp_common_header_t* rtcp_get_common_header</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_get_common_header</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="46" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="46" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1adc666d907af1922ce5624638a06d4da1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool_t</type>
        <definition>bool_t rtcp_is_SR</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_is_SR</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="61" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="61" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1af3b871e1b9caf9861bdc0be4397e1a66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t rtcp_SR_get_ssrc</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_SR_get_ssrc</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="74" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a990318fd1c8b38787ebcfb401bd6eb16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structsender__info" kindref="compound">sender_info_t</ref> *</type>
        <definition>const sender_info_t* rtcp_SR_get_sender_info</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_SR_get_sender_info</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="79" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1ac4db0f76ef5471c4581b6a414a9abc9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structreport__block" kindref="compound">report_block_t</ref> *</type>
        <definition>const report_block_t* rtcp_SR_get_report_block</definition>
        <argsstring>(const mblk_t *m, int idx)</argsstring>
        <name>rtcp_SR_get_report_block</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="84" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="84" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a8444fcc20455eec42415a5658317e3d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool_t</type>
        <definition>bool_t rtcp_is_RR</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_is_RR</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="99" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="99" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a7c0ac4fc43426cfb2b6abce8a8e3f701" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t rtcp_RR_get_ssrc</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_RR_get_ssrc</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="111" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="111" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1ad6d738017095115b07b3c2676c25ee48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structreport__block" kindref="compound">report_block_t</ref> *</type>
        <definition>const report_block_t* rtcp_RR_get_report_block</definition>
        <argsstring>(const mblk_t *m, int idx)</argsstring>
        <name>rtcp_RR_get_report_block</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="116" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="116" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1ad17b9dacfd5879517bf8bf1943746b50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool_t</type>
        <definition>bool_t rtcp_is_SDES</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_is_SDES</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="131" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="131" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a2ff2752cb9dcd272009f10ec6e48e8dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rtcp_sdes_parse</definition>
        <argsstring>(const mblk_t *m, SdesItemFoundCallback cb, void *user_data)</argsstring>
        <name>rtcp_sdes_parse</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>SdesItemFoundCallback</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="143" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="143" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a776eb2d4accfaec3376ffac54acf7e0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool_t</type>
        <definition>bool_t rtcp_is_BYE</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_is_BYE</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="194" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="194" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a2b8960904ea61a0e45ce8aee1a2669c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool_t</type>
        <definition>bool_t rtcp_BYE_get_ssrc</definition>
        <argsstring>(const mblk_t *m, int idx, uint32_t *ssrc)</argsstring>
        <name>rtcp_BYE_get_ssrc</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>ssrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="206" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="206" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a3c6b0a77fa647f831debe4f2a069efde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool_t</type>
        <definition>bool_t rtcp_BYE_get_reason</definition>
        <argsstring>(const mblk_t *m, const char **reason, int *reason_len)</argsstring>
        <name>rtcp_BYE_get_reason</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>reason</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>reason_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="221" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="221" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1ad3c1a8a96abd11b339f786175d2e1ec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool_t</type>
        <definition>bool_t rtcp_is_APP</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_is_APP</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="241" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="241" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a14d56df2d5aacaefd46534d1c7defb96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rtcp_APP_get_subtype</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_APP_get_subtype</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="258" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="258" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1aaa836986b841f7a75033f28290621644" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t rtcp_APP_get_ssrc</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_APP_get_ssrc</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="263" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="263" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1ad6bc765f981a256644d875b6951c9fce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rtcp_APP_get_name</definition>
        <argsstring>(const mblk_t *m, char *name)</argsstring>
        <name>rtcp_APP_get_name</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="268" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="268" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1ac7a673ee0f9056dbcc0fb6dbf33685c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rtcp_APP_get_data</definition>
        <argsstring>(const mblk_t *m, uint8_t **data, int *len)</argsstring>
        <name>rtcp_APP_get_data</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uint8_t **</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="273" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="273" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a0fc2fc0d362a6ddf52a017ec7a101afa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool_t</type>
        <definition>bool_t rtcp_is_XR</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_is_XR</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="286" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="286" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a16512c4de25f6f06286fc3e9b6dfb829" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>rtcp_xr_block_type_t</type>
        <definition>rtcp_xr_block_type_t rtcp_XR_get_block_type</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_get_block_type</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="298" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="298" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1ab090de2307c9ad63b281690fea3769f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t rtcp_XR_get_ssrc</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_get_ssrc</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="303" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="303" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1ae511938ba0db6a2d1341321a1feaf3f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t rtcp_XR_rcvr_rtt_get_ntp_timestamp</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_rcvr_rtt_get_ntp_timestamp</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="308" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="308" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1acecad612130a126836d60eaf9024941c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t rtcp_XR_dlrr_get_ssrc</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_dlrr_get_ssrc</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="317" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="317" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a375a8bfc0e3abadb5336f23f11b92ff5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t rtcp_XR_dlrr_get_lrr</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_dlrr_get_lrr</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="322" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="322" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1aef0e99388e4c9a503d9bef6f518765f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t rtcp_XR_dlrr_get_dlrr</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_dlrr_get_dlrr</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="327" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="327" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a6657dacb047b6b6d7e030b54dd9e9129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t rtcp_XR_stat_summary_get_flags</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_stat_summary_get_flags</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="332" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="332" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1ace00848b72ace178fe7ef2ad42ed7fb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t rtcp_XR_stat_summary_get_ssrc</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_stat_summary_get_ssrc</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="337" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="337" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a94ce1122fda1708d409d433b79e4bb46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t rtcp_XR_stat_summary_get_begin_seq</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_stat_summary_get_begin_seq</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="342" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="342" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a7ca6eb529dfefb08eac987f683c4194b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t rtcp_XR_stat_summary_get_end_seq</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_stat_summary_get_end_seq</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="347" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="347" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a33d32822988e3e38763fb23cf3a96037" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t rtcp_XR_stat_summary_get_lost_packets</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_stat_summary_get_lost_packets</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="352" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="352" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a3a697a332436308d9fa5686fcbc79b70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t rtcp_XR_stat_summary_get_dup_packets</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_stat_summary_get_dup_packets</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="357" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="357" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a953abbb9db76e3c1e6897ce1763195b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t rtcp_XR_stat_summary_get_min_jitter</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_stat_summary_get_min_jitter</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="362" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="362" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a7beabaeb16214fb1d8f2570631b4f1a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t rtcp_XR_stat_summary_get_max_jitter</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_stat_summary_get_max_jitter</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="367" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="367" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a02a6b2fec96ffc0bf82f577d2492e8fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t rtcp_XR_stat_summary_get_mean_jitter</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_stat_summary_get_mean_jitter</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="372" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="372" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a13edd58dd6c742ceff2f600396a0b428" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t rtcp_XR_stat_summary_get_dev_jitter</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_stat_summary_get_dev_jitter</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="377" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="377" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1ab58700d471895320fd6e2cba789b07b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t rtcp_XR_stat_summary_get_min_ttl_or_hl</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_stat_summary_get_min_ttl_or_hl</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="382" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="382" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1aab768b39e8f19b622893876a89b454e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t rtcp_XR_stat_summary_get_max_ttl_or_hl</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_stat_summary_get_max_ttl_or_hl</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="387" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="387" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a7808b984d9077503e33208ee313e0a7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t rtcp_XR_stat_summary_get_mean_ttl_or_hl</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_stat_summary_get_mean_ttl_or_hl</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="392" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="392" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a137541461899d784b176162437116ef7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t rtcp_XR_stat_summary_get_dev_ttl_or_hl</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_stat_summary_get_dev_ttl_or_hl</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="397" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="397" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1ab6d11b901eb5282ce0e5cc7bac721820" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t rtcp_XR_voip_metrics_get_ssrc</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_voip_metrics_get_ssrc</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="402" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="402" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1ae365bdf65ebac316d0e866ff09e55261" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t rtcp_XR_voip_metrics_get_loss_rate</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_voip_metrics_get_loss_rate</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="407" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="407" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a3aefbd7436489476b337276d74fc5c62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t rtcp_XR_voip_metrics_get_discard_rate</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_voip_metrics_get_discard_rate</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="412" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="412" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1aa2fbb1a54f47695f5dee030b3d96d44c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t rtcp_XR_voip_metrics_get_burst_density</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_voip_metrics_get_burst_density</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="417" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="417" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a491e971c4251569278c2a47b140ad53b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t rtcp_XR_voip_metrics_get_gap_density</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_voip_metrics_get_gap_density</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="422" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="422" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a1cde3c123c1c400b9062c1712ec21062" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t rtcp_XR_voip_metrics_get_burst_duration</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_voip_metrics_get_burst_duration</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="427" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="427" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a25b11d69f3af33c0af9ccee82cd5cba2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t rtcp_XR_voip_metrics_get_gap_duration</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_voip_metrics_get_gap_duration</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="432" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="432" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a5cc1c47b261cd12a36a6125b20a25098" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t rtcp_XR_voip_metrics_get_round_trip_delay</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_voip_metrics_get_round_trip_delay</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="437" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="437" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1aa04f9b4e945ddbc979e49f719a2038f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t rtcp_XR_voip_metrics_get_end_system_delay</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_voip_metrics_get_end_system_delay</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="442" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="442" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1ac614999c43a5476b5ad935b860a14d4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t rtcp_XR_voip_metrics_get_signal_level</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_voip_metrics_get_signal_level</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="447" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="447" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a339d72bfd92838b05f48fc8828fe1603" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t rtcp_XR_voip_metrics_get_noise_level</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_voip_metrics_get_noise_level</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="452" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="452" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1afd60dacf7b3478855d81c653e78599c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t rtcp_XR_voip_metrics_get_rerl</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_voip_metrics_get_rerl</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="457" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="457" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1aa00f11caeea1345375a6ec7e48083988" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t rtcp_XR_voip_metrics_get_gmin</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_voip_metrics_get_gmin</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="462" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="462" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a98c9a00106da682683e183652f601ef7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t rtcp_XR_voip_metrics_get_r_factor</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_voip_metrics_get_r_factor</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="467" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="467" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1aba7e9638de4d667b1c2c8c5cf9c6c623" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t rtcp_XR_voip_metrics_get_ext_r_factor</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_voip_metrics_get_ext_r_factor</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="472" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="472" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a59f49ffee2933339c82e9da36162c733" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t rtcp_XR_voip_metrics_get_mos_lq</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_voip_metrics_get_mos_lq</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="477" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="477" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1afaa6ef4301805159aefc72f638b93468" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t rtcp_XR_voip_metrics_get_mos_cq</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_voip_metrics_get_mos_cq</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="482" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="482" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1aa1e148678c8416ab22b987d8fdde96d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t rtcp_XR_voip_metrics_get_rx_config</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_voip_metrics_get_rx_config</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="487" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="487" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a02daea24a7a757626e566caa5b490f85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t rtcp_XR_voip_metrics_get_jb_nominal</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_voip_metrics_get_jb_nominal</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="492" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="492" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a557c3d543fbb95c4ee507575e88c0859" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t rtcp_XR_voip_metrics_get_jb_maximum</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_voip_metrics_get_jb_maximum</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="497" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="497" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a6eb3d28fa207823ffbddbd12adf8e0a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t rtcp_XR_voip_metrics_get_jb_abs_max</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_XR_voip_metrics_get_jb_abs_max</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="502" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="502" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a878f81fbf1512f1ac828e01e5e4fe933" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool_t</type>
        <definition>bool_t rtcp_is_RTPFB</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_is_RTPFB</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="509" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="509" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1ac2f2bb639dfd721b5e47614b142698ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool_t</type>
        <definition>bool_t rtcp_is_RTPFB_internal</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_is_RTPFB_internal</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="522" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="522" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a9b944d3fdb83dea22b025e838e9ce845" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>rtcp_rtpfb_type_t</type>
        <definition>rtcp_rtpfb_type_t rtcp_RTPFB_get_type</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_RTPFB_get_type</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="527" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="527" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1aaf74e771a6bb69dac3c8c292e020e7f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t rtcp_RTPFB_get_packet_sender_ssrc</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_RTPFB_get_packet_sender_ssrc</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="532" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="532" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1ab5637230ae7cbb64db24a8414c8241df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t rtcp_RTPFB_get_media_source_ssrc</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_RTPFB_get_media_source_ssrc</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="537" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="537" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a1507d5d467f0620e2721ae5ccef340a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrtcp__fb__generic__nack__fci" kindref="compound">rtcp_fb_generic_nack_fci_t</ref> *</type>
        <definition>rtcp_fb_generic_nack_fci_t* rtcp_RTPFB_generic_nack_get_fci</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_RTPFB_generic_nack_get_fci</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="542" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="542" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a490c22b8ed9fd573ccd99c543fc429f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrtcp__fb__tmmbr__fci" kindref="compound">rtcp_fb_tmmbr_fci_t</ref> *</type>
        <definition>rtcp_fb_tmmbr_fci_t* rtcp_RTPFB_tmmbr_get_fci</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_RTPFB_tmmbr_get_fci</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="551" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="551" bodyend="558"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a159074d29c2e1ad8d3ca12bd1c8e9d2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t rtcp_RTPFB_tmmbr_get_max_bitrate</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_RTPFB_tmmbr_get_max_bitrate</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the maximum bitrate in bits / sec contained in the packet.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>RTCP TMMBR packet to read </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>maximum bitrate in bits / sec. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="560" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="560" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1abaf81caa5eaad18b881a1275345aa562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool_t</type>
        <definition>bool_t rtcp_is_PSFB</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_is_PSFB</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="567" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="567" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1aa9fe8ab099a4b64184ff297c32d09d70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool_t</type>
        <definition>bool_t rtcp_is_PSFB_internal</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_is_PSFB_internal</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="580" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="580" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a6236ddce2add78edc7900be68874cfd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>rtcp_psfb_type_t</type>
        <definition>rtcp_psfb_type_t rtcp_PSFB_get_type</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_PSFB_get_type</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="585" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="585" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a7397ce2bd3c68d8735ea06da9c0a5a30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t rtcp_PSFB_get_packet_sender_ssrc</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_PSFB_get_packet_sender_ssrc</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="590" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="590" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a2cde24af70007fe4dcf24679b65e78a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t rtcp_PSFB_get_media_source_ssrc</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_PSFB_get_media_source_ssrc</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="595" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="595" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1af142435f0b5aeb9db445db63e96d4dfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrtcp__fb__fir__fci" kindref="compound">rtcp_fb_fir_fci_t</ref> *</type>
        <definition>rtcp_fb_fir_fci_t* rtcp_PSFB_fir_get_fci</definition>
        <argsstring>(const mblk_t *m, unsigned int idx)</argsstring>
        <name>rtcp_PSFB_fir_get_fci</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="600" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="600" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a1580b157860d825c0299ea65b8b470cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrtcp__fb__sli__fci" kindref="compound">rtcp_fb_sli_fci_t</ref> *</type>
        <definition>rtcp_fb_sli_fci_t* rtcp_PSFB_sli_get_fci</definition>
        <argsstring>(const mblk_t *m, unsigned int idx)</argsstring>
        <name>rtcp_PSFB_sli_get_fci</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="609" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="609" bodyend="616"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1ae0549cb00efc69335b30f31bd6d11370" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrtcp__fb__rpsi__fci" kindref="compound">rtcp_fb_rpsi_fci_t</ref> *</type>
        <definition>rtcp_fb_rpsi_fci_t* rtcp_PSFB_rpsi_get_fci</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_PSFB_rpsi_get_fci</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="618" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="618" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="rtcpparse_8c_1a0cc180b6b02f48d3c4346e097d84a2bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t rtcp_PSFB_rpsi_get_fci_bit_string_len</definition>
        <argsstring>(const mblk_t *m)</argsstring>
        <name>rtcp_PSFB_rpsi_get_fci_bit_string_len</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" line="622" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c" bodystart="622" bodyend="626"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>The<sp/>oRTP<sp/>library<sp/>is<sp/>an<sp/>RTP<sp/>(Realtime<sp/>Transport<sp/>Protocol<sp/>-<sp/>rfc3550)<sp/>implementation<sp/>with<sp/>additional<sp/>features.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2017<sp/>Belledonne<sp/>Communications<sp/>SARL</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/>along<sp/>with<sp/>this<sp/>program;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/>Foundation,<sp/>Inc.,<sp/>59<sp/>Temple<sp/>Place<sp/>-<sp/>Suite<sp/>330,<sp/>Boston,<sp/>MA<sp/>02111-1307,<sp/>USA.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ortp_8h" kindref="compound">ortp/ortp.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rtcp_get_size(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m){</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref><sp/>*ch=rtcp_get_common_header(m);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch==NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(1+rtcp_common_header_get_length(ch))*4;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*in<sp/>case<sp/>of<sp/>compound<sp/>packet,<sp/>set<sp/>read<sp/>pointer<sp/>of<sp/>m<sp/>to<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>next<sp/>RTCP</highlight></codeline>
<codeline lineno="31"><highlight class="comment">packet<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">bool_t<sp/>rtcp_next_packet(<ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m){</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nextlen=rtcp_get_size(m);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((nextlen<sp/>&gt;<sp/>0)<sp/>&amp;&amp;<sp/>(m-&gt;b_rptr<sp/>+<sp/>nextlen<sp/>&lt;<sp/>m-&gt;b_wptr)){</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;b_rptr+=nextlen;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rtcp_rewind(<ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m){</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;b_rptr=m-&gt;b_datap-&gt;db_base;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>get<sp/>common<sp/>header;<sp/>this<sp/>function<sp/>will<sp/>also<sp/>check<sp/>the<sp/>sanity<sp/>of<sp/>the<sp/>packet*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref><sp/>*<sp/>rtcp_get_common_header(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m){</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size=msgdsize(m);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref><sp/>*ch;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;b_cont!=NULL){</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ortp_fatal(</highlight><highlight class="stringliteral">&quot;RTCP<sp/>parser<sp/>does<sp/>not<sp/>work<sp/>on<sp/>fragmented<sp/>mblk_t.<sp/>Use<sp/>msgpullup()<sp/>before<sp/>to<sp/>re-assemble<sp/>the<sp/>packet.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref>)){</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ortp_warning(</highlight><highlight class="stringliteral">&quot;Bad<sp/>RTCP<sp/>packet,<sp/>too<sp/>short<sp/>[%i<sp/>b].<sp/>on<sp/>block<sp/>[%p]&quot;</highlight><highlight class="normal">,(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)size,m);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ch=(<ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref>*)m-&gt;b_rptr;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">bool_t<sp/>rtcp_is_SR(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m){</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref><sp/>*ch=rtcp_get_common_header(m);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch!=NULL<sp/>&amp;&amp;<sp/>rtcp_common_header_get_packet_type(ch)==RTCP_SR){</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msgdsize(m)&lt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__sr" kindref="compound">rtcp_sr_t</ref>)-</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structreport__block" kindref="compound">report_block_t</ref>))){</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ortp_warning(</highlight><highlight class="stringliteral">&quot;Too<sp/>short<sp/>RTCP<sp/>SR<sp/>packet.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">/*Sender<sp/>Report<sp/>accessors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">uint32_t<sp/>rtcp_SR_get_ssrc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m){</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__sr" kindref="compound">rtcp_sr_t</ref><sp/>*sr=(<ref refid="structrtcp__sr" kindref="compound">rtcp_sr_t</ref>*)m-&gt;b_rptr;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntohl(sr-&gt;ssrc);</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsender__info" kindref="compound">sender_info_t</ref><sp/>*<sp/>rtcp_SR_get_sender_info(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m){</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__sr" kindref="compound">rtcp_sr_t</ref><sp/>*sr=(<ref refid="structrtcp__sr" kindref="compound">rtcp_sr_t</ref>*)m-&gt;b_rptr;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;sr-&gt;si;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structreport__block" kindref="compound">report_block_t</ref><sp/>*<sp/>rtcp_SR_get_report_block(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx){</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__sr" kindref="compound">rtcp_sr_t</ref><sp/>*sr=(<ref refid="structrtcp__sr" kindref="compound">rtcp_sr_t</ref>*)m-&gt;b_rptr;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structreport__block" kindref="compound">report_block_t</ref><sp/>*rb=&amp;sr-&gt;rb[idx];</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size=rtcp_get_size(m);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>(uint8_t*)rb)+</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structreport__block" kindref="compound">report_block_t</ref>)<sp/>&lt;=<sp/>m-&gt;b_rptr<sp/>+<sp/>size<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rb;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx&lt;rtcp_common_header_get_rc(&amp;sr-&gt;ch)){</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ortp_warning(</highlight><highlight class="stringliteral">&quot;RTCP<sp/>packet<sp/>should<sp/>include<sp/>a<sp/>report_block_t<sp/>at<sp/>pos<sp/>%i<sp/>but<sp/>has<sp/>no<sp/>space<sp/>for<sp/>it.&quot;</highlight><highlight class="normal">,idx);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">/*Receiver<sp/>report<sp/>accessors*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">bool_t<sp/>rtcp_is_RR(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m){</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref><sp/>*ch=rtcp_get_common_header(m);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch!=NULL<sp/>&amp;&amp;<sp/>rtcp_common_header_get_packet_type(ch)==RTCP_RR){</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msgdsize(m)&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__rr" kindref="compound">rtcp_rr_t</ref>)){</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ortp_warning(</highlight><highlight class="stringliteral">&quot;Too<sp/>short<sp/>RTCP<sp/>RR<sp/>packet.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">uint32_t<sp/>rtcp_RR_get_ssrc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m){</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__rr" kindref="compound">rtcp_rr_t</ref><sp/>*rr=(<ref refid="structrtcp__rr" kindref="compound">rtcp_rr_t</ref>*)m-&gt;b_rptr;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntohl(rr-&gt;ssrc);</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structreport__block" kindref="compound">report_block_t</ref><sp/>*<sp/>rtcp_RR_get_report_block(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx){</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__rr" kindref="compound">rtcp_rr_t</ref><sp/>*rr=(<ref refid="structrtcp__rr" kindref="compound">rtcp_rr_t</ref>*)m-&gt;b_rptr;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structreport__block" kindref="compound">report_block_t</ref><sp/>*rb=&amp;rr-&gt;rb[idx];</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size=rtcp_get_size(m);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>(uint8_t*)rb)+</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structreport__block" kindref="compound">report_block_t</ref>)<sp/>&lt;=<sp/>(m-&gt;b_rptr<sp/>+<sp/>size<sp/>)<sp/>){</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rb;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx&lt;rtcp_common_header_get_rc(&amp;rr-&gt;ch)){</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ortp_warning(</highlight><highlight class="stringliteral">&quot;RTCP<sp/>packet<sp/>should<sp/>include<sp/>a<sp/>report_block_t<sp/>at<sp/>pos<sp/>%i<sp/>but<sp/>has<sp/>no<sp/>space<sp/>for<sp/>it.&quot;</highlight><highlight class="normal">,idx);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">/*SDES<sp/>accessors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">bool_t<sp/>rtcp_is_SDES(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m){</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref><sp/>*ch=rtcp_get_common_header(m);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>&amp;&amp;<sp/>rtcp_common_header_get_packet_type(ch)==RTCP_SDES){</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msgdsize(m)&lt;rtcp_get_size(m)){</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ortp_warning(</highlight><highlight class="stringliteral">&quot;Too<sp/>short<sp/>RTCP<sp/>SDES<sp/>packet.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rtcp_sdes_parse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m,<sp/>SdesItemFoundCallback<sp/>cb,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user_data){</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*rptr=(uint8_t*)m-&gt;b_rptr+</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref>);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref><sp/>*ch=(<ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref>*)m-&gt;b_rptr;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*end=rptr+(4*(rtcp_common_header_get_length(ch)+1));</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>ssrc=0;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nchunk=0;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool_t<sp/>chunk_start=TRUE;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end&gt;(uint8_t*)m-&gt;b_wptr)<sp/>end=(uint8_t*)m-&gt;b_wptr;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(rptr&lt;end){</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(chunk_start){</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rptr+4&lt;=end){</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssrc=ntohl(*(uint32_t*)rptr);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rptr+=4;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ortp_warning(</highlight><highlight class="stringliteral">&quot;incorrect<sp/>chunk<sp/>start<sp/>in<sp/>RTCP<sp/>SDES&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chunk_start=FALSE;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rptr+2&lt;=end){</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>type=rptr[0];</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>len=rptr[1];</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type==RTCP_SDES_END){</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pad<sp/>to<sp/>next<sp/>32bit<sp/>boundary*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rptr=(uint8_t<sp/>*)((intptr_t)(rptr+4)<sp/>&amp;<sp/>~0x3);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nchunk++;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nchunk&lt;rtcp_common_header_get_rc(ch)){</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chunk_start=TRUE;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rptr+=2;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rptr+len&lt;=end){</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cb(user_data,ssrc,type,(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)rptr,len);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rptr+=len;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ortp_warning(</highlight><highlight class="stringliteral">&quot;bad<sp/>item<sp/>length<sp/>in<sp/>RTCP<sp/>SDES&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*end<sp/>of<sp/>packet<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">/*BYE<sp/>accessors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal">bool_t<sp/>rtcp_is_BYE(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m){</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref><sp/>*ch=rtcp_get_common_header(m);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>&amp;&amp;<sp/>rtcp_common_header_get_packet_type(ch)==RTCP_BYE){</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msgdsize(m)&lt;rtcp_get_size(m)){</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ortp_warning(</highlight><highlight class="stringliteral">&quot;Too<sp/>short<sp/>RTCP<sp/>BYE<sp/>packet.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal">bool_t<sp/>rtcp_BYE_get_ssrc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,<sp/>uint32_t<sp/>*ssrc){</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__bye" kindref="compound">rtcp_bye_t</ref><sp/>*bye=(<ref refid="structrtcp__bye" kindref="compound">rtcp_bye_t</ref>*)m-&gt;b_rptr;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc=rtcp_common_header_get_rc(&amp;bye-&gt;ch);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx&lt;rc){</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((uint8_t*)&amp;bye-&gt;ssrc[idx]&lt;=(m-&gt;b_rptr</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>rtcp_get_size(m)-4))<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ssrc=ntohl(bye-&gt;ssrc[idx]);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ortp_warning(</highlight><highlight class="stringliteral">&quot;RTCP<sp/>BYE<sp/>should<sp/>contain<sp/>%i<sp/>ssrc,<sp/>but<sp/>there<sp/>is<sp/>not<sp/>enough<sp/>room<sp/>for<sp/>it.&quot;</highlight><highlight class="normal">,rc);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal">bool_t<sp/>rtcp_BYE_get_reason(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**reason,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*reason_len){</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__bye" kindref="compound">rtcp_bye_t</ref><sp/>*bye=(<ref refid="structrtcp__bye" kindref="compound">rtcp_bye_t</ref>*)m-&gt;b_rptr;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc=rtcp_common_header_get_rc(&amp;bye-&gt;ch);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*rptr=(uint8_t*)m-&gt;b_rptr+</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref>)+rc*4;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*end=(uint8_t*)(m-&gt;b_rptr+rtcp_get_size(m));</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rptr&lt;end){</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>content_len=rptr[0];</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rptr+1+content_len&lt;=end){</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*reason=(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)rptr+1;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*reason_len=content_len;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ortp_warning(</highlight><highlight class="stringliteral">&quot;RTCP<sp/>BYE<sp/>has<sp/>not<sp/>enough<sp/>space<sp/>for<sp/>reason<sp/>phrase.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">/*APP<sp/>accessors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal">bool_t<sp/>rtcp_is_APP(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m){</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref><sp/>*ch=rtcp_get_common_header(m);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size=rtcp_get_size(m);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch!=NULL<sp/>&amp;&amp;<sp/>rtcp_common_header_get_packet_type(ch)==RTCP_APP){</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msgdsize(m)&lt;size){</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ortp_warning(</highlight><highlight class="stringliteral">&quot;Too<sp/>short<sp/>RTCP<sp/>APP<sp/>packet.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__app" kindref="compound">rtcp_app_t</ref>)){</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ortp_warning(</highlight><highlight class="stringliteral">&quot;Bad<sp/>RTCP<sp/>APP<sp/>packet.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rtcp_APP_get_subtype(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m){</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__app" kindref="compound">rtcp_app_t</ref><sp/>*app=(<ref refid="structrtcp__app" kindref="compound">rtcp_app_t</ref>*)m-&gt;b_rptr;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rtcp_common_header_get_rc(&amp;app-&gt;ch);</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal">uint32_t<sp/>rtcp_APP_get_ssrc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m){</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__app" kindref="compound">rtcp_app_t</ref><sp/>*app=(<ref refid="structrtcp__app" kindref="compound">rtcp_app_t</ref>*)m-&gt;b_rptr;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntohl(app-&gt;ssrc);</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>name<sp/>argument<sp/>is<sp/>supposed<sp/>to<sp/>be<sp/>at<sp/>least<sp/>4<sp/>characters<sp/>(note:<sp/>no<sp/>&apos;\0&apos;<sp/>written)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rtcp_APP_get_name(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name){</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__app" kindref="compound">rtcp_app_t</ref><sp/>*app=(<ref refid="structrtcp__app" kindref="compound">rtcp_app_t</ref>*)m-&gt;b_rptr;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(name,app-&gt;name,4);</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>retrieve<sp/>the<sp/>data.<sp/>when<sp/>returning,<sp/>data<sp/>points<sp/>directly<sp/>into<sp/>the<sp/>mblk_t<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rtcp_APP_get_data(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m,<sp/>uint8_t<sp/>**data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*len){</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>datalen=(int)rtcp_get_size(m)-</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__app" kindref="compound">rtcp_app_t</ref>);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(datalen&gt;0){</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data=(uint8_t*)m-&gt;b_rptr+</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__app" kindref="compound">rtcp_app_t</ref>);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*len=datalen;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*len=0;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data=NULL;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>RTCP<sp/>XR<sp/>accessors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal">bool_t<sp/>rtcp_is_XR(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref><sp/>*ch<sp/>=<sp/>rtcp_get_common_header(m);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ch<sp/>!=<sp/>NULL)<sp/>&amp;&amp;<sp/>(rtcp_common_header_get_packet_type(ch)<sp/>==<sp/>RTCP_XR))<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msgdsize(m)<sp/>&lt;<sp/>MIN_RTCP_XR_PACKET_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ortp_warning(</highlight><highlight class="stringliteral">&quot;Too<sp/>short<sp/>RTCP<sp/>XR<sp/>packet.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal">rtcp_xr_block_type_t<sp/>rtcp_XR_get_block_type(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__generic__block__header" kindref="compound">rtcp_xr_generic_block_header_t</ref><sp/>*bh<sp/>=<sp/>(<ref refid="structrtcp__xr__generic__block__header" kindref="compound">rtcp_xr_generic_block_header_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bh-&gt;bt;</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal">uint32_t<sp/>rtcp_XR_get_ssrc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref><sp/>*xh<sp/>=<sp/>(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref><sp/>*)m-&gt;b_rptr;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntohl(xh-&gt;ssrc);</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal">uint64_t<sp/>rtcp_XR_rcvr_rtt_get_ntp_timestamp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>ts<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__rcvr__rtt__report__block" kindref="compound">rtcp_xr_rcvr_rtt_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__rcvr__rtt__report__block" kindref="compound">rtcp_xr_rcvr_rtt_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ts<sp/>=<sp/>ntohl(b-&gt;ntp_timestamp_msw);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ts<sp/>&lt;&lt;=<sp/>32;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ts<sp/>|=<sp/>ntohl(b-&gt;ntp_timestamp_lsw);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ts;</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal">uint32_t<sp/>rtcp_XR_dlrr_get_ssrc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__dlrr__report__subblock" kindref="compound">rtcp_xr_dlrr_report_subblock_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__dlrr__report__subblock" kindref="compound">rtcp_xr_dlrr_report_subblock_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__generic__block__header" kindref="compound">rtcp_xr_generic_block_header_t</ref>));</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntohl(b-&gt;ssrc);</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal">uint32_t<sp/>rtcp_XR_dlrr_get_lrr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__dlrr__report__subblock" kindref="compound">rtcp_xr_dlrr_report_subblock_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__dlrr__report__subblock" kindref="compound">rtcp_xr_dlrr_report_subblock_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__generic__block__header" kindref="compound">rtcp_xr_generic_block_header_t</ref>));</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntohl(b-&gt;lrr);</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal">uint32_t<sp/>rtcp_XR_dlrr_get_dlrr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__dlrr__report__subblock" kindref="compound">rtcp_xr_dlrr_report_subblock_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__dlrr__report__subblock" kindref="compound">rtcp_xr_dlrr_report_subblock_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__generic__block__header" kindref="compound">rtcp_xr_generic_block_header_t</ref>));</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntohl(b-&gt;dlrr);</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal">uint8_t<sp/>rtcp_XR_stat_summary_get_flags(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__generic__block__header" kindref="compound">rtcp_xr_generic_block_header_t</ref><sp/>*bh<sp/>=<sp/>(<ref refid="structrtcp__xr__generic__block__header" kindref="compound">rtcp_xr_generic_block_header_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bh-&gt;flags;</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal">uint32_t<sp/>rtcp_XR_stat_summary_get_ssrc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__stat__summary__report__block" kindref="compound">rtcp_xr_stat_summary_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__stat__summary__report__block" kindref="compound">rtcp_xr_stat_summary_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntohl(b-&gt;ssrc);</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal">uint16_t<sp/>rtcp_XR_stat_summary_get_begin_seq(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__stat__summary__report__block" kindref="compound">rtcp_xr_stat_summary_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__stat__summary__report__block" kindref="compound">rtcp_xr_stat_summary_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntohs(b-&gt;begin_seq);</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal">uint16_t<sp/>rtcp_XR_stat_summary_get_end_seq(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__stat__summary__report__block" kindref="compound">rtcp_xr_stat_summary_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__stat__summary__report__block" kindref="compound">rtcp_xr_stat_summary_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntohs(b-&gt;end_seq);</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal">uint32_t<sp/>rtcp_XR_stat_summary_get_lost_packets(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__stat__summary__report__block" kindref="compound">rtcp_xr_stat_summary_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__stat__summary__report__block" kindref="compound">rtcp_xr_stat_summary_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntohl(b-&gt;lost_packets);</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal">uint32_t<sp/>rtcp_XR_stat_summary_get_dup_packets(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__stat__summary__report__block" kindref="compound">rtcp_xr_stat_summary_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__stat__summary__report__block" kindref="compound">rtcp_xr_stat_summary_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntohl(b-&gt;dup_packets);</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal">uint32_t<sp/>rtcp_XR_stat_summary_get_min_jitter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__stat__summary__report__block" kindref="compound">rtcp_xr_stat_summary_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__stat__summary__report__block" kindref="compound">rtcp_xr_stat_summary_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntohl(b-&gt;min_jitter);</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal">uint32_t<sp/>rtcp_XR_stat_summary_get_max_jitter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__stat__summary__report__block" kindref="compound">rtcp_xr_stat_summary_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__stat__summary__report__block" kindref="compound">rtcp_xr_stat_summary_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntohl(b-&gt;max_jitter);</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal">uint32_t<sp/>rtcp_XR_stat_summary_get_mean_jitter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__stat__summary__report__block" kindref="compound">rtcp_xr_stat_summary_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__stat__summary__report__block" kindref="compound">rtcp_xr_stat_summary_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntohl(b-&gt;mean_jitter);</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal">uint32_t<sp/>rtcp_XR_stat_summary_get_dev_jitter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__stat__summary__report__block" kindref="compound">rtcp_xr_stat_summary_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__stat__summary__report__block" kindref="compound">rtcp_xr_stat_summary_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntohl(b-&gt;dev_jitter);</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal">uint8_t<sp/>rtcp_XR_stat_summary_get_min_ttl_or_hl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__stat__summary__report__block" kindref="compound">rtcp_xr_stat_summary_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__stat__summary__report__block" kindref="compound">rtcp_xr_stat_summary_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b-&gt;min_ttl_or_hl;</highlight></codeline>
<codeline lineno="385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal">uint8_t<sp/>rtcp_XR_stat_summary_get_max_ttl_or_hl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__stat__summary__report__block" kindref="compound">rtcp_xr_stat_summary_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__stat__summary__report__block" kindref="compound">rtcp_xr_stat_summary_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b-&gt;max_ttl_or_hl;</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal">uint8_t<sp/>rtcp_XR_stat_summary_get_mean_ttl_or_hl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__stat__summary__report__block" kindref="compound">rtcp_xr_stat_summary_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__stat__summary__report__block" kindref="compound">rtcp_xr_stat_summary_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b-&gt;mean_ttl_or_hl;</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal">uint8_t<sp/>rtcp_XR_stat_summary_get_dev_ttl_or_hl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__stat__summary__report__block" kindref="compound">rtcp_xr_stat_summary_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__stat__summary__report__block" kindref="compound">rtcp_xr_stat_summary_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b-&gt;dev_ttl_or_hl;</highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal">uint32_t<sp/>rtcp_XR_voip_metrics_get_ssrc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntohl(b-&gt;ssrc);</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal">uint8_t<sp/>rtcp_XR_voip_metrics_get_loss_rate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b-&gt;loss_rate;</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal">uint8_t<sp/>rtcp_XR_voip_metrics_get_discard_rate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b-&gt;discard_rate;</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal">uint8_t<sp/>rtcp_XR_voip_metrics_get_burst_density(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b-&gt;burst_density;</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal">uint8_t<sp/>rtcp_XR_voip_metrics_get_gap_density(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b-&gt;gap_density;</highlight></codeline>
<codeline lineno="425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal">uint16_t<sp/>rtcp_XR_voip_metrics_get_burst_duration(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntohs(b-&gt;burst_duration);</highlight></codeline>
<codeline lineno="430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal">uint16_t<sp/>rtcp_XR_voip_metrics_get_gap_duration(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntohs(b-&gt;gap_duration);</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal">uint16_t<sp/>rtcp_XR_voip_metrics_get_round_trip_delay(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntohs(b-&gt;round_trip_delay);</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal">uint16_t<sp/>rtcp_XR_voip_metrics_get_end_system_delay(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntohs(b-&gt;end_system_delay);</highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal">uint8_t<sp/>rtcp_XR_voip_metrics_get_signal_level(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b-&gt;signal_level;</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal">uint8_t<sp/>rtcp_XR_voip_metrics_get_noise_level(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b-&gt;noise_level;</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal">uint8_t<sp/>rtcp_XR_voip_metrics_get_rerl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b-&gt;rerl;</highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal">uint8_t<sp/>rtcp_XR_voip_metrics_get_gmin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b-&gt;gmin;</highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal">uint8_t<sp/>rtcp_XR_voip_metrics_get_r_factor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b-&gt;r_factor;</highlight></codeline>
<codeline lineno="470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal">uint8_t<sp/>rtcp_XR_voip_metrics_get_ext_r_factor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b-&gt;ext_r_factor;</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal">uint8_t<sp/>rtcp_XR_voip_metrics_get_mos_lq(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b-&gt;mos_lq;</highlight></codeline>
<codeline lineno="480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal">uint8_t<sp/>rtcp_XR_voip_metrics_get_mos_cq(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b-&gt;mos_cq;</highlight></codeline>
<codeline lineno="485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal">uint8_t<sp/>rtcp_XR_voip_metrics_get_rx_config(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b-&gt;rx_config;</highlight></codeline>
<codeline lineno="490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal">uint16_t<sp/>rtcp_XR_voip_metrics_get_jb_nominal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntohs(b-&gt;jb_nominal);</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal">uint16_t<sp/>rtcp_XR_voip_metrics_get_jb_maximum(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntohs(b-&gt;jb_maximum);</highlight></codeline>
<codeline lineno="500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal">uint16_t<sp/>rtcp_XR_voip_metrics_get_jb_abs_max(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*b<sp/>=<sp/>(<ref refid="structrtcp__xr__voip__metrics__report__block" kindref="compound">rtcp_xr_voip_metrics_report_block_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__xr__header" kindref="compound">rtcp_xr_header_t</ref>));</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntohs(b-&gt;jb_abs_max);</highlight></codeline>
<codeline lineno="505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>RTCP<sp/>RTPFB<sp/>accessors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal">bool_t<sp/>rtcp_is_RTPFB(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref><sp/>*ch<sp/>=<sp/>rtcp_get_common_header(m);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ch<sp/>!=<sp/>NULL)<sp/>&amp;&amp;<sp/>(rtcp_common_header_get_packet_type(ch)<sp/>==<sp/>RTCP_RTPFB))<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msgdsize(m)<sp/>&lt;<sp/>MIN_RTCP_RTPFB_PACKET_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ortp_warning(</highlight><highlight class="stringliteral">&quot;Too<sp/>short<sp/>RTCP<sp/>RTPFB<sp/>packet.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Same<sp/>as<sp/>rtcp_is_RTPFB<sp/>but<sp/>not<sp/>needing<sp/>msgpullup.<sp/>To<sp/>be<sp/>used<sp/>internally<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal">bool_t<sp/>rtcp_is_RTPFB_internal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref><sp/>*ch<sp/>=<sp/>(<ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref><sp/>*)m-&gt;b_rptr;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(rtcp_common_header_get_packet_type(ch)<sp/>==<sp/>RTCP_RTPFB)<sp/>?<sp/>TRUE<sp/>:<sp/>FALSE;</highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal">rtcp_rtpfb_type_t<sp/>rtcp_RTPFB_get_type(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref><sp/>*ch<sp/>=<sp/>(<ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref><sp/>*)m-&gt;b_rptr;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(rtcp_rtpfb_type_t)rtcp_common_header_get_rc(ch);</highlight></codeline>
<codeline lineno="530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal">uint32_t<sp/>rtcp_RTPFB_get_packet_sender_ssrc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__fb__header" kindref="compound">rtcp_fb_header_t</ref><sp/>*fbh<sp/>=<sp/>(<ref refid="structrtcp__fb__header" kindref="compound">rtcp_fb_header_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref>));</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntohl(fbh-&gt;packet_sender_ssrc);</highlight></codeline>
<codeline lineno="535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal">uint32_t<sp/>rtcp_RTPFB_get_media_source_ssrc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__fb__header" kindref="compound">rtcp_fb_header_t</ref><sp/>*fbh<sp/>=<sp/>(<ref refid="structrtcp__fb__header" kindref="compound">rtcp_fb_header_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref>));</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntohl(fbh-&gt;media_source_ssrc);</highlight></codeline>
<codeline lineno="540"><highlight class="normal">}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><ref refid="structrtcp__fb__generic__nack__fci" kindref="compound">rtcp_fb_generic_nack_fci_t</ref><sp/>*<sp/>rtcp_RTPFB_generic_nack_get_fci(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__fb__header" kindref="compound">rtcp_fb_header_t</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__fb__generic__nack__fci" kindref="compound">rtcp_fb_generic_nack_fci_t</ref>);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rtcp_size<sp/>=<sp/>rtcp_get_size(m);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&gt;<sp/>rtcp_size)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structrtcp__fb__generic__nack__fci" kindref="compound">rtcp_fb_generic_nack_fci_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/>size<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__fb__generic__nack__fci" kindref="compound">rtcp_fb_generic_nack_fci_t</ref>));</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><ref refid="structrtcp__fb__tmmbr__fci" kindref="compound">rtcp_fb_tmmbr_fci_t</ref><sp/>*<sp/>rtcp_RTPFB_tmmbr_get_fci(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__fb__header" kindref="compound">rtcp_fb_header_t</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__fb__tmmbr__fci" kindref="compound">rtcp_fb_tmmbr_fci_t</ref>);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rtcp_size<sp/>=<sp/>rtcp_get_size(m);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&gt;<sp/>rtcp_size)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structrtcp__fb__tmmbr__fci" kindref="compound">rtcp_fb_tmmbr_fci_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/>size<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__fb__tmmbr__fci" kindref="compound">rtcp_fb_tmmbr_fci_t</ref>));</highlight></codeline>
<codeline lineno="558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal">uint64_t<sp/>rtcp_RTPFB_tmmbr_get_max_bitrate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__fb__tmmbr__fci" kindref="compound">rtcp_fb_tmmbr_fci_t</ref><sp/>*fci<sp/>=<sp/>rtcp_RTPFB_tmmbr_get_fci(m);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rtcp_fb_tmmbr_fci_get_mxtbr_mantissa(fci)<sp/>*<sp/>(1<sp/>&lt;&lt;<sp/>rtcp_fb_tmmbr_fci_get_mxtbr_exp(fci));</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>RTCP<sp/>PSFB<sp/>accessors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal">bool_t<sp/>rtcp_is_PSFB(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref><sp/>*ch<sp/>=<sp/>rtcp_get_common_header(m);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ch<sp/>!=<sp/>NULL)<sp/>&amp;&amp;<sp/>(rtcp_common_header_get_packet_type(ch)<sp/>==<sp/>RTCP_PSFB))<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msgdsize(m)<sp/>&lt;<sp/>MIN_RTCP_PSFB_PACKET_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ortp_warning(</highlight><highlight class="stringliteral">&quot;Too<sp/>short<sp/>RTCP<sp/>PSFB<sp/>packet.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Same<sp/>as<sp/>rtcp_is_PSFB<sp/>but<sp/>not<sp/>needing<sp/>msgpullup.<sp/>To<sp/>be<sp/>used<sp/>internally<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal">bool_t<sp/>rtcp_is_PSFB_internal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref><sp/>*ch<sp/>=<sp/>(<ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref><sp/>*)m-&gt;b_rptr;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(rtcp_common_header_get_packet_type(ch)<sp/>==<sp/>RTCP_PSFB)<sp/>?<sp/>TRUE<sp/>:<sp/>FALSE;</highlight></codeline>
<codeline lineno="583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal">rtcp_psfb_type_t<sp/>rtcp_PSFB_get_type(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref><sp/>*ch<sp/>=<sp/>(<ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref><sp/>*)m-&gt;b_rptr;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(rtcp_psfb_type_t)rtcp_common_header_get_rc(ch);</highlight></codeline>
<codeline lineno="588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal">uint32_t<sp/>rtcp_PSFB_get_packet_sender_ssrc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__fb__header" kindref="compound">rtcp_fb_header_t</ref><sp/>*fbh<sp/>=<sp/>(<ref refid="structrtcp__fb__header" kindref="compound">rtcp_fb_header_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref>));</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntohl(fbh-&gt;packet_sender_ssrc);</highlight></codeline>
<codeline lineno="593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal">uint32_t<sp/>rtcp_PSFB_get_media_source_ssrc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__fb__header" kindref="compound">rtcp_fb_header_t</ref><sp/>*fbh<sp/>=<sp/>(<ref refid="structrtcp__fb__header" kindref="compound">rtcp_fb_header_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref>));</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntohl(fbh-&gt;media_source_ssrc);</highlight></codeline>
<codeline lineno="598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><ref refid="structrtcp__fb__fir__fci" kindref="compound">rtcp_fb_fir_fci_t</ref><sp/>*<sp/>rtcp_PSFB_fir_get_fci(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__fb__header" kindref="compound">rtcp_fb_header_t</ref>)<sp/>+<sp/>((idx<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__fb__fir__fci" kindref="compound">rtcp_fb_fir_fci_t</ref>));</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rtcp_size<sp/>=<sp/>rtcp_get_size(m);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&gt;<sp/>rtcp_size)<sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structrtcp__fb__fir__fci" kindref="compound">rtcp_fb_fir_fci_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/>size<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__fb__fir__fci" kindref="compound">rtcp_fb_fir_fci_t</ref>));</highlight></codeline>
<codeline lineno="607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><ref refid="structrtcp__fb__sli__fci" kindref="compound">rtcp_fb_sli_fci_t</ref><sp/>*<sp/>rtcp_PSFB_sli_get_fci(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__fb__header" kindref="compound">rtcp_fb_header_t</ref>)<sp/>+<sp/>((idx<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__fb__sli__fci" kindref="compound">rtcp_fb_sli_fci_t</ref>));</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rtcp_size<sp/>=<sp/>rtcp_get_size(m);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&gt;<sp/>rtcp_size)<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structrtcp__fb__sli__fci" kindref="compound">rtcp_fb_sli_fci_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/>size<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__fb__sli__fci" kindref="compound">rtcp_fb_sli_fci_t</ref>));</highlight></codeline>
<codeline lineno="616"><highlight class="normal">}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><ref refid="structrtcp__fb__rpsi__fci" kindref="compound">rtcp_fb_rpsi_fci_t</ref><sp/>*<sp/>rtcp_PSFB_rpsi_get_fci(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structrtcp__fb__rpsi__fci" kindref="compound">rtcp_fb_rpsi_fci_t</ref><sp/>*)(m-&gt;b_rptr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__fb__header" kindref="compound">rtcp_fb_header_t</ref>));</highlight></codeline>
<codeline lineno="620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal">uint16_t<sp/>rtcp_PSFB_rpsi_get_fci_bit_string_len(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m)<sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrtcp__fb__rpsi__fci" kindref="compound">rtcp_fb_rpsi_fci_t</ref><sp/>*fci<sp/>=<sp/>rtcp_PSFB_rpsi_get_fci(m);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>bit_string_len_in_bytes<sp/>=<sp/>(uint16_t)(rtcp_get_size(m)<sp/>-<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__common__header" kindref="compound">rtcp_common_header_t</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrtcp__fb__header" kindref="compound">rtcp_fb_header_t</ref>)<sp/>+<sp/>2));</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((bit_string_len_in_bytes<sp/>*<sp/>8)<sp/>-<sp/>fci-&gt;pb);</highlight></codeline>
<codeline lineno="626"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/rtcpparse.c"/>
  </compounddef>
</doxygen>
