<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="str__utils_8c" kind="file" language="C++">
    <compoundname>str_utils.c</compoundname>
    <includes refid="str__utils_8h" local="yes">ortp/str_utils.h</includes>
    <includes refid="src_2utils_8h" local="yes">utils.h</includes>
      <sectiondef kind="func">
      <memberdef kind="function" id="str__utils_8c_1ac8e34a922a5352c02d2d4699936755bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void qinit</definition>
        <argsstring>(queue_t *q)</argsstring>
        <name>qinit</name>
        <param>
          <type><ref refid="struct__queue" kindref="compound">queue_t</ref> *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="28" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="28" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1a45753b3b81d1a889aff4588a343fc460" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mblk_init</definition>
        <argsstring>(mblk_t *mp)</argsstring>
        <name>mblk_init</name>
        <param>
          <type><ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>mp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="35" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1a5b64d22a6bfed4752145850718cdb7cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mblk_meta_copy</definition>
        <argsstring>(const mblk_t *source, mblk_t *dest)</argsstring>
        <name>mblk_meta_copy</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="40" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="40" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1a12cda8fb52d5f50ccea117f8c7a8df98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdatab" kindref="compound">dblk_t</ref> *</type>
        <definition>dblk_t* datab_alloc</definition>
        <argsstring>(size_t size)</argsstring>
        <name>datab_alloc</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="51" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="51" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1a19ae91ff5d78c69e2ef72bd6e814e27e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dblk_ref</definition>
        <argsstring>(dblk_t *d)</argsstring>
        <name>dblk_ref</name>
        <param>
          <type><ref refid="structdatab" kindref="compound">dblk_t</ref> *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="62" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="62" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1a90fda12ce0568b93dd38af01dde328a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dblk_unref</definition>
        <argsstring>(dblk_t *d)</argsstring>
        <name>dblk_unref</name>
        <param>
          <type><ref refid="structdatab" kindref="compound">dblk_t</ref> *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="70" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="70" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1a670aeda8f805bd50d58388da44c49032" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char *</type>
        <definition>unsigned char* dblk_base</definition>
        <argsstring>(dblk_t *db)</argsstring>
        <name>dblk_base</name>
        <param>
          <type><ref refid="structdatab" kindref="compound">dblk_t</ref> *</type>
          <declname>db</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="83" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1aeb099807c98c5c7280ca059b302f7c1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char *</type>
        <definition>unsigned char* dblk_lim</definition>
        <argsstring>(dblk_t *db)</argsstring>
        <name>dblk_lim</name>
        <param>
          <type><ref refid="structdatab" kindref="compound">dblk_t</ref> *</type>
          <declname>db</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="87" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="87" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1aec969a0db821f354ef3c363781e216a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dblk_ref_value</definition>
        <argsstring>(dblk_t *db)</argsstring>
        <name>dblk_ref_value</name>
        <param>
          <type><ref refid="structdatab" kindref="compound">dblk_t</ref> *</type>
          <declname>db</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="91" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="91" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1aea9d56336e13583ae988872b0abbc2a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
        <definition>mblk_t* allocb</definition>
        <argsstring>(size_t size, int pri)</argsstring>
        <name>allocb</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="95" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="95" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1a4823ab588225806930e05eec69a23103" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
        <definition>mblk_t* esballoc</definition>
        <argsstring>(uint8_t *buf, size_t size, int pri, void(*freefn)(void *))</argsstring>
        <name>esballoc</name>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pri</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>freefn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="109" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="109" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1ad97bedf26e9d85848558d5cb2e44e1b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeb</definition>
        <argsstring>(mblk_t *mp)</argsstring>
        <name>freeb</name>
        <param>
          <type><ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>mp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="129" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="129" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1a61233be67fbdf56e0afc2faf206a5549" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freemsg</definition>
        <argsstring>(mblk_t *mp)</argsstring>
        <name>freemsg</name>
        <param>
          <type><ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>mp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="138" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="138" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1a4249d091e6ae4cf121008379cbd40710" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
        <definition>mblk_t* dupb</definition>
        <argsstring>(mblk_t *mp)</argsstring>
        <name>dupb</name>
        <param>
          <type><ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>mp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="150" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="150" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1a39f09874033ae08d05cccda180bc75c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
        <definition>mblk_t* dupmsg</definition>
        <argsstring>(mblk_t *m)</argsstring>
        <name>dupmsg</name>
        <param>
          <type><ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="166" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="166" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1ab32b8b996e9d63ebb8a10fba13441175" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void putq</definition>
        <argsstring>(queue_t *q, mblk_t *mp)</argsstring>
        <name>putq</name>
        <param>
          <type><ref refid="struct__queue" kindref="compound">queue_t</ref> *</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>mp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="180" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="180" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1a0fc879450470014574ca8a8ce4018657" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
        <definition>mblk_t* getq</definition>
        <argsstring>(queue_t *q)</argsstring>
        <name>getq</name>
        <param>
          <type><ref refid="struct__queue" kindref="compound">queue_t</ref> *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="189" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="189" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1ae657d9064de3eff6c3e7bac9b777d56e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
        <definition>mblk_t* peekq</definition>
        <argsstring>(queue_t *q)</argsstring>
        <name>peekq</name>
        <param>
          <type><ref refid="struct__queue" kindref="compound">queue_t</ref> *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="202" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="202" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1a63a5b131d2669fe357b711d1c32a90fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void insq</definition>
        <argsstring>(queue_t *q, mblk_t *emp, mblk_t *mp)</argsstring>
        <name>insq</name>
        <param>
          <type><ref refid="struct__queue" kindref="compound">queue_t</ref> *</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>emp</declname>
        </param>
        <param>
          <type><ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>mp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="210" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="210" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1a759f982a373794f8fe8effae6b917e7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void remq</definition>
        <argsstring>(queue_t *q, mblk_t *mp)</argsstring>
        <name>remq</name>
        <param>
          <type><ref refid="struct__queue" kindref="compound">queue_t</ref> *</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>mp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="223" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="223" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1a8fa31f04f9bef1edad1360899e87cc57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void flushq</definition>
        <argsstring>(queue_t *q, int how)</argsstring>
        <name>flushq</name>
        <param>
          <type><ref refid="struct__queue" kindref="compound">queue_t</ref> *</type>
          <declname>q</declname>
        </param>
        <param>
          <type>int</type>
          <declname>how</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="232" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="232" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1ab535e3694a8fb3c391c6f34b4b2c792c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t msgdsize</definition>
        <argsstring>(const mblk_t *mp)</argsstring>
        <name>msgdsize</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>mp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="242" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="242" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1a413d7a3e6f1e43c7eb5d3ac2d1afc5c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void msgpullup</definition>
        <argsstring>(mblk_t *mp, size_t len)</argsstring>
        <name>msgpullup</name>
        <param>
          <type><ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>mp</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="252" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="252" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1aef402fc8a83911d38ac56dd14ab1985c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
        <definition>mblk_t* copyb</definition>
        <argsstring>(const mblk_t *mp)</argsstring>
        <name>copyb</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>mp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="284" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="284" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1a0f18340cf7bac2c42afa33a275c14ef0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
        <definition>mblk_t* copymsg</definition>
        <argsstring>(const mblk_t *mp)</argsstring>
        <name>copymsg</name>
        <param>
          <type>const <ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>mp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="295" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="295" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1a45248e6a1c38b49b0abbe88a1ddd4172" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
        <definition>mblk_t* appendb</definition>
        <argsstring>(mblk_t *mp, const char *data, size_t size, bool_t pad)</argsstring>
        <name>appendb</name>
        <param>
          <type><ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>mp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool_t</type>
          <declname>pad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="308" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="308" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1a60842cf95b521a7fc769ce15232b06ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void msgappend</definition>
        <argsstring>(mblk_t *mp, const char *data, size_t size, bool_t pad)</argsstring>
        <name>msgappend</name>
        <param>
          <type><ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>mp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool_t</type>
          <declname>pad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="329" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="329" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1aa2f66ddce21db82e0f63495f5831b70e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
        <definition>mblk_t* concatb</definition>
        <argsstring>(mblk_t *mp, mblk_t *newm)</argsstring>
        <name>concatb</name>
        <param>
          <type><ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>mp</declname>
        </param>
        <param>
          <type><ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
          <declname>newm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="334" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="334" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1a1abbe4ffd7c7437aee36dafdb6df66f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void msgb_allocator_init</definition>
        <argsstring>(msgb_allocator_t *a)</argsstring>
        <name>msgb_allocator_init</name>
        <param>
          <type><ref refid="struct__msgb__allocator" kindref="compound">msgb_allocator_t</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="341" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="341" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1a45c795a8c07abde2bc606ee1ba893e8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmsgb" kindref="compound">mblk_t</ref> *</type>
        <definition>mblk_t* msgb_allocator_alloc</definition>
        <argsstring>(msgb_allocator_t *a, size_t size)</argsstring>
        <name>msgb_allocator_alloc</name>
        <param>
          <type><ref refid="struct__msgb__allocator" kindref="compound">msgb_allocator_t</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="345" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="345" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1ab95cb1a5f23e5ca281a0ce9506c55e47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void msgb_allocator_uninit</definition>
        <argsstring>(msgb_allocator_t *a)</argsstring>
        <name>msgb_allocator_uninit</name>
        <param>
          <type><ref refid="struct__msgb__allocator" kindref="compound">msgb_allocator_t</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="363" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="363" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="str__utils_8c_1a3c7d499bf91f7aa1dd278e0fe4256a19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ortp_recvaddr_to_sockaddr</definition>
        <argsstring>(ortp_recv_addr_t *recvaddr, struct sockaddr *addr, socklen_t *socklen)</argsstring>
        <name>ortp_recvaddr_to_sockaddr</name>
        <param>
          <type><ref refid="structortp__recv__addr" kindref="compound">ortp_recv_addr_t</ref> *</type>
          <declname>recvaddr</declname>
        </param>
        <param>
          <type>struct sockaddr *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>socklen_t *</type>
          <declname>socklen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" line="367" column="1" bodyfile="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c" bodystart="367" bodyend="381"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>The<sp/>oRTP<sp/>library<sp/>is<sp/>an<sp/>RTP<sp/>(Realtime<sp/>Transport<sp/>Protocol<sp/>-<sp/>rfc3550)<sp/>implementation<sp/>with<sp/>additional<sp/>features.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2017<sp/>Belledonne<sp/>Communications<sp/>SARL</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/>along<sp/>with<sp/>this<sp/>program;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/>Foundation,<sp/>Inc.,<sp/>59<sp/>Temple<sp/>Place<sp/>-<sp/>Suite<sp/>330,<sp/>Boston,<sp/>MA<sp/>02111-1307,<sp/>USA.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_CONFIG_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ortp-config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ortp/str_utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>qinit(<ref refid="struct__queue" kindref="compound">queue_t</ref><sp/>*q){</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mblk_init(&amp;q-&gt;_q_stopper);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q-&gt;_q_stopper.b_next=&amp;q-&gt;_q_stopper;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q-&gt;_q_stopper.b_prev=&amp;q-&gt;_q_stopper;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q-&gt;q_mcount=0;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mblk_init(<ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*mp)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(mp,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structmsgb" kindref="compound">mblk_t</ref>));</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mblk_meta_copy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*source,<sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*dest)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest-&gt;reserved1<sp/>=<sp/>source-&gt;reserved1;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest-&gt;reserved2<sp/>=<sp/>source-&gt;reserved2;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;dest-&gt;net_addr,&amp;source-&gt;net_addr,source-&gt;net_addrlen);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest-&gt;net_addrlen<sp/>=<sp/>source-&gt;net_addrlen;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ORTP_TIMESTAMP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest-&gt;timestamp<sp/>=<sp/>source-&gt;timestamp;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest-&gt;ttl_or_hl<sp/>=<sp/>source-&gt;ttl_or_hl;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><ref refid="structdatab" kindref="compound">dblk_t</ref><sp/>*datab_alloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size){</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdatab" kindref="compound">dblk_t</ref><sp/>*db;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>total_size=</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structdatab" kindref="compound">dblk_t</ref>)+size;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>db=(<ref refid="structdatab" kindref="compound">dblk_t</ref><sp/>*)<sp/>ortp_malloc(total_size);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>db-&gt;db_base=(uint8_t*)db+</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structdatab" kindref="compound">dblk_t</ref>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>db-&gt;db_lim=db-&gt;db_base+size;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>db-&gt;db_ref=1;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>db-&gt;db_freefn=NULL;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>buffer<sp/>pointed<sp/>by<sp/>db_base<sp/>must<sp/>never<sp/>be<sp/>freed<sp/>!*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>db;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dblk_ref(<ref refid="structdatab" kindref="compound">dblk_t</ref><sp/>*d){</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_STDATOMIC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atomic_fetch_add_explicit(&amp;d-&gt;db_ref,<sp/>1,<sp/>memory_order_relaxed);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d-&gt;db_ref++;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dblk_unref(<ref refid="structdatab" kindref="compound">dblk_t</ref><sp/>*d){</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_STDATOMIC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atomic_int<sp/>previous_ref<sp/>=<sp/>atomic_fetch_sub_explicit(&amp;d-&gt;db_ref,<sp/>1,<sp/>memory_order_release);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>previous_ref<sp/>=<sp/>d-&gt;db_ref--;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(previous_ref<sp/>==<sp/>1){</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d-&gt;db_freefn!=NULL)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d-&gt;db_freefn(d-&gt;db_base);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ortp_free(d);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>dblk_base(<ref refid="structdatab" kindref="compound">dblk_t</ref><sp/>*db)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>db-&gt;db_base;</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>dblk_lim(<ref refid="structdatab" kindref="compound">dblk_t</ref><sp/>*db)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>db-&gt;db_lim;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dblk_ref_value(<ref refid="structdatab" kindref="compound">dblk_t</ref><sp/>*db)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)db-&gt;db_ref;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*allocb(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pri)</highlight></codeline>
<codeline lineno="96"><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*mp;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdatab" kindref="compound">dblk_t</ref><sp/>*<ref refid="structdatab" kindref="compound">datab</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mp=(<ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*)<sp/>ortp_malloc0(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structmsgb" kindref="compound">mblk_t</ref>));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>datab=datab_alloc(size);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mp-&gt;b_datap=datab;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mp-&gt;b_rptr=mp-&gt;b_wptr=datab-&gt;db_base;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mp-&gt;b_next=mp-&gt;b_prev=mp-&gt;b_cont=NULL;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mp;</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*esballoc(uint8_t<sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pri,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*freefn)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*mp;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdatab" kindref="compound">dblk_t</ref><sp/>*datab;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mp=(<ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*)<sp/>ortp_malloc0(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structmsgb" kindref="compound">mblk_t</ref>));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>datab=(<ref refid="structdatab" kindref="compound">dblk_t</ref><sp/>*)<sp/>ortp_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structdatab" kindref="compound">dblk_t</ref>));</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>datab-&gt;db_base=buf;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>datab-&gt;db_lim=buf+size;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>datab-&gt;db_ref=1;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>datab-&gt;db_freefn=freefn;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mp-&gt;b_datap=datab;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mp-&gt;b_rptr=mp-&gt;b_wptr=buf;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mp-&gt;b_next=mp-&gt;b_prev=mp-&gt;b_cont=NULL;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mp;</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeb(<ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*mp)</highlight></codeline>
<codeline lineno="130"><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_if_fail(mp-&gt;b_datap!=NULL);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_if_fail(mp-&gt;b_datap-&gt;db_base!=NULL);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dblk_unref(mp-&gt;b_datap);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ortp_free(mp);</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freemsg(<ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*mp)</highlight></codeline>
<codeline lineno="139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*tmp1,*tmp2;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp1=mp;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(tmp1!=NULL)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp2=tmp1-&gt;b_cont;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeb(tmp1);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp1=tmp2;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*dupb(<ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*mp)</highlight></codeline>
<codeline lineno="151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*newm;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_val_if_fail(mp-&gt;b_datap!=NULL,NULL);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_val_if_fail(mp-&gt;b_datap-&gt;db_base!=NULL,NULL);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dblk_ref(mp-&gt;b_datap);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newm=(<ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*)<sp/>ortp_malloc0(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structmsgb" kindref="compound">mblk_t</ref>));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mblk_meta_copy(mp,<sp/>newm);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newm-&gt;b_datap=mp-&gt;b_datap;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newm-&gt;b_rptr=mp-&gt;b_rptr;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newm-&gt;b_wptr=mp-&gt;b_wptr;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newm;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>duplicates<sp/>a<sp/>complex<sp/>mblk_t<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/><sp/>*dupmsg(<ref refid="structmsgb" kindref="compound">mblk_t</ref>*<sp/>m)</highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*newm=NULL,*mp,*prev;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev=newm=dupb(m);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m=m-&gt;b_cont;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(m!=NULL){</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mp=dupb(m);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev-&gt;b_cont=mp;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev=mp;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m=m-&gt;b_cont;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newm;</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>putq(<ref refid="struct__queue" kindref="compound">queue_t</ref><sp/>*q,<ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*mp)</highlight></codeline>
<codeline lineno="181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q-&gt;_q_stopper.b_prev-&gt;b_next=mp;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mp-&gt;b_prev=q-&gt;_q_stopper.b_prev;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mp-&gt;b_next=&amp;q-&gt;_q_stopper;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q-&gt;_q_stopper.b_prev=mp;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q-&gt;q_mcount++;</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*getq(<ref refid="struct__queue" kindref="compound">queue_t</ref><sp/>*q)</highlight></codeline>
<codeline lineno="190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*tmp;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp=q-&gt;_q_stopper.b_next;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp==&amp;q-&gt;_q_stopper)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q-&gt;_q_stopper.b_next=tmp-&gt;b_next;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp-&gt;b_next-&gt;b_prev=&amp;q-&gt;_q_stopper;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp-&gt;b_prev=NULL;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp-&gt;b_next=NULL;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q-&gt;q_mcount--;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*<sp/>peekq(<ref refid="struct__queue" kindref="compound">queue_t</ref><sp/>*q){</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*tmp;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp=q-&gt;_q_stopper.b_next;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp==&amp;q-&gt;_q_stopper)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>insert<sp/>mp<sp/>in<sp/>q<sp/>just<sp/>before<sp/>emp<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insq(<ref refid="struct__queue" kindref="compound">queue_t</ref><sp/>*q,<ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*emp,<sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*mp)</highlight></codeline>
<codeline lineno="211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(emp==NULL){</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>putq(q,mp);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q-&gt;q_mcount++;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emp-&gt;b_prev-&gt;b_next=mp;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mp-&gt;b_prev=emp-&gt;b_prev;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emp-&gt;b_prev=mp;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mp-&gt;b_next=emp;</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>remq(<ref refid="struct__queue" kindref="compound">queue_t</ref><sp/>*q,<sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*mp){</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q-&gt;q_mcount--;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mp-&gt;b_prev-&gt;b_next=mp-&gt;b_next;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mp-&gt;b_next-&gt;b_prev=mp-&gt;b_prev;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mp-&gt;b_next=NULL;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mp-&gt;b_prev=NULL;</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>remove<sp/>and<sp/>free<sp/>all<sp/>messages<sp/>in<sp/>the<sp/>q<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>flushq(<ref refid="struct__queue" kindref="compound">queue_t</ref><sp/>*q,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>how)</highlight></codeline>
<codeline lineno="233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*mp;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((mp=getq(q))!=NULL)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freemsg(mp);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>msgdsize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*mp)</highlight></codeline>
<codeline lineno="243"><highlight class="normal">{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>msgsize=0;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(mp!=NULL){</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgsize+=(size_t)<sp/>(mp-&gt;b_wptr-mp-&gt;b_rptr);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mp=mp-&gt;b_cont;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>msgsize;</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>msgpullup(<ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*mp,</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="253"><highlight class="normal">{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*firstm=mp;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdatab" kindref="compound">dblk_t</ref><sp/>*db;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>wlen=0;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mp-&gt;b_cont==NULL<sp/>&amp;&amp;<sp/>len==(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*nothing<sp/>to<sp/>do,<sp/>message<sp/>is<sp/>not<sp/>fragmented<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len==(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)-1)<sp/>len=msgdsize(mp);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>db=datab_alloc(len);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(wlen&lt;len<sp/>&amp;&amp;<sp/>mp!=NULL){</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remain=(int)(len-wlen);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mlen=(int)(mp-&gt;b_wptr-mp-&gt;b_rptr);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mlen&lt;=remain){</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;db-&gt;db_base[wlen],mp-&gt;b_rptr,mlen);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wlen+=mlen;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mp=mp-&gt;b_cont;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;db-&gt;db_base[wlen],mp-&gt;b_rptr,remain);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wlen+=remain;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*set<sp/>firstm<sp/>to<sp/>point<sp/>to<sp/>the<sp/>new<sp/>datab<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freemsg(firstm-&gt;b_cont);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstm-&gt;b_cont=NULL;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dblk_unref(firstm-&gt;b_datap);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstm-&gt;b_datap=db;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstm-&gt;b_rptr=db-&gt;db_base;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstm-&gt;b_wptr=firstm-&gt;b_rptr+wlen;</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*copyb(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*mp)</highlight></codeline>
<codeline lineno="285"><highlight class="normal">{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*newm;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len=(int)<sp/>(mp-&gt;b_wptr-mp-&gt;b_rptr);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newm=allocb(len,BPRI_MED);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(newm-&gt;b_wptr,mp-&gt;b_rptr,len);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newm-&gt;b_wptr+=len;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;newm-&gt;recv_addr,&amp;mp-&gt;recv_addr,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(newm-&gt;recv_addr));</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newm;</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*copymsg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*mp)</highlight></codeline>
<codeline lineno="296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*newm=0,*m;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m=newm=copyb(mp);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mp=mp-&gt;b_cont;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(mp!=NULL){</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;b_cont=copyb(mp);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m=m-&gt;b_cont;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mp=mp-&gt;b_cont;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newm;</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*<sp/>appendb(<ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*mp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/>bool_t<sp/>pad){</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>padcnt=0;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pad){</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padcnt<sp/>=<sp/>(size_t)(4<sp/>-<sp/>((((intptr_t)mp-&gt;b_wptr)<sp/>+<sp/>size)<sp/>%<sp/>4))<sp/>%<sp/>4;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((mp-&gt;b_wptr<sp/>+<sp/>size<sp/>+padcnt)<sp/>&gt;<sp/>mp-&gt;b_datap-&gt;db_lim){</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>buffer<sp/>is<sp/>not<sp/>large<sp/>enough:<sp/>append<sp/>a<sp/>new<sp/>block<sp/>(with<sp/>the<sp/>same<sp/>size<sp/>?)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>plen=(size_t)((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)mp-&gt;b_datap-&gt;db_lim<sp/>-<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>mp-&gt;b_datap-&gt;db_base);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mp-&gt;b_cont=allocb(MAX(plen,size),0);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mp=mp-&gt;b_cont;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size)<sp/>memcpy(mp-&gt;b_wptr,data,size);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mp-&gt;b_wptr+=size;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;padcnt;i++){</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mp-&gt;b_wptr[0]=0;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mp-&gt;b_wptr++;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mp;</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>msgappend(<ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*mp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/>bool_t<sp/>pad){</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(mp-&gt;b_cont!=NULL)<sp/>mp=mp-&gt;b_cont;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>appendb(mp,data,size,pad);</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*concatb(<ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*mp,<sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*newm){</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(mp-&gt;b_cont!=NULL)<sp/>mp=mp-&gt;b_cont;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mp-&gt;b_cont=newm;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(newm-&gt;b_cont!=NULL)<sp/>newm=newm-&gt;b_cont;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newm;</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>msgb_allocator_init(<ref refid="struct__msgb__allocator" kindref="compound">msgb_allocator_t</ref><sp/>*a){</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qinit(&amp;a-&gt;q);</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*msgb_allocator_alloc(<ref refid="struct__msgb__allocator" kindref="compound">msgb_allocator_t</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size){</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__queue" kindref="compound">queue_t</ref><sp/>*q=&amp;a-&gt;q;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmsgb" kindref="compound">mblk_t</ref><sp/>*m,*found=NULL;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*lookup<sp/>for<sp/>an<sp/>unused<sp/>msgb<sp/>(data<sp/>block<sp/>with<sp/>ref<sp/>count<sp/>==1)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(m=qbegin(q);!qend(q,m);m=qnext(q,m)){</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m-&gt;b_datap-&gt;db_ref<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/>((size_t)(m-&gt;b_datap-&gt;db_lim<sp/>-<sp/>m-&gt;b_datap-&gt;db_base)<sp/>&gt;=<sp/>size)){</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found=m;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found==NULL){</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found=allocb(size,0);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>putq(q,found);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dupb(found);</highlight></codeline>
<codeline lineno="361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>msgb_allocator_uninit(<ref refid="struct__msgb__allocator" kindref="compound">msgb_allocator_t</ref><sp/>*a){</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flushq(&amp;a-&gt;q,-1);</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ortp_recvaddr_to_sockaddr(<ref refid="structortp__recv__addr" kindref="compound">ortp_recv_addr_t</ref><sp/>*recvaddr,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr<sp/>*addr,<sp/>socklen_t<sp/>*socklen)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(recvaddr-&gt;family<sp/>==<sp/>AF_INET)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in<sp/>*addr_in<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in<sp/>*)addr;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr_in-&gt;sin_family<sp/>=<sp/>AF_INET;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr_in-&gt;sin_addr<sp/>=<sp/>recvaddr-&gt;addr.ipi_addr;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr_in-&gt;sin_port<sp/>=<sp/>recvaddr-&gt;port;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*socklen<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(recvaddr-&gt;family<sp/>==<sp/>AF_INET6)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in6<sp/>*addr_in6<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in6<sp/>*)addr;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr_in6-&gt;sin6_family<sp/>=<sp/>AF_INET6;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr_in6-&gt;sin6_addr<sp/>=<sp/>recvaddr-&gt;addr.ipi6_addr;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr_in6-&gt;sin6_port<sp/>=<sp/>recvaddr-&gt;port;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*socklen<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in6);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/S0U1SB4N3/test006/linphone-desktop/submodules/oRTP/src/str_utils.c"/>
  </compounddef>
</doxygen>
