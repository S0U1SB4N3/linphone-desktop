.TH "payloadtype.h" 3 "Thu Dec 14 2017" "Version 1.0.2" "oRTP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
payloadtype.h \- Definition of payload types\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <ortp/port\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fB_PayloadTypeAvpfParams\fP"
.br
.ti -1c
.RI "struct \fB_OrtpPayloadType\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBPAYLOAD_TYPE_ALLOCATED\fP   (1)"
.br
.ti -1c
.RI "#define \fBPAYLOAD_TYPE_IS_VBR\fP   (1<<1)"
.br
.ti -1c
.RI "#define \fBPAYLOAD_TYPE_RTCP_FEEDBACK_ENABLED\fP   (1<<2)"
.br
.ti -1c
.RI "#define \fBPAYLOAD_TYPE_PRIV1\fP   (1<<3)"
.br
.ti -1c
.RI "#define \fBPAYLOAD_TYPE_USER_FLAG_0\fP   (1<<4)"
.br
.ti -1c
.RI "#define \fBPAYLOAD_TYPE_USER_FLAG_1\fP   (1<<5)"
.br
.ti -1c
.RI "#define \fBPAYLOAD_TYPE_USER_FLAG_2\fP   (1<<6)"
.br
.ti -1c
.RI "#define \fBPAYLOAD_TYPE_USER_FLAG_3\fP   (1<<7)"
.br
.ti -1c
.RI "#define \fBPAYLOAD_TYPE_USER_FLAG_4\fP   (1<<8)"
.br
.ti -1c
.RI "#define \fBPAYLOAD_TYPE_FLAG_CAN_RECV\fP   PAYLOAD_TYPE_USER_FLAG_1"
.br
.ti -1c
.RI "#define \fBPAYLOAD_TYPE_FLAG_CAN_SEND\fP   PAYLOAD_TYPE_USER_FLAG_2"
.br
.ti -1c
.RI "#define \fBPAYLOAD_AUDIO_CONTINUOUS\fP   0"
.br
.ti -1c
.RI "#define \fBPAYLOAD_AUDIO_PACKETIZED\fP   1"
.br
.ti -1c
.RI "#define \fBPAYLOAD_VIDEO\fP   2"
.br
.ti -1c
.RI "#define \fBPAYLOAD_TEXT\fP   3"
.br
.ti -1c
.RI "#define \fBPAYLOAD_OTHER\fP   4  /* ?? */"
.br
.ti -1c
.RI "#define \fBPAYLOAD_TYPE_AVPF_NONE\fP   0"
.br
.ti -1c
.RI "#define \fBPAYLOAD_TYPE_AVPF_FIR\fP   (1 << 0)"
.br
.ti -1c
.RI "#define \fBPAYLOAD_TYPE_AVPF_PLI\fP   (1 << 1)"
.br
.ti -1c
.RI "#define \fBPAYLOAD_TYPE_AVPF_SLI\fP   (1 << 2)"
.br
.ti -1c
.RI "#define \fBPAYLOAD_TYPE_AVPF_RPSI\fP   (1 << 3)"
.br
.ti -1c
.RI "#define \fBPayloadType_defined\fP"
.br
.ti -1c
.RI "#define \fBpayload_type_set_flag\fP(pt,  flag)   (pt)\->flags|=((int)flag)"
.br
.ti -1c
.RI "#define \fBpayload_type_unset_flag\fP(pt,  flag)   (pt)\->flags&=(~(int)flag)"
.br
.ti -1c
.RI "#define \fBpayload_type_get_flags\fP(pt)   (pt)\->flags"
.br
.ti -1c
.RI "#define \fBpayload_type_get_avpf_params\fP(pt)   ((pt)\->avpf)"
.br
.ti -1c
.RI "#define \fBpayload_type_get_bitrate\fP(pt)   ((pt)\->normal_bitrate)"
.br
.ti -1c
.RI "#define \fBpayload_type_get_rate\fP(pt)   ((pt)\->clock_rate)"
.br
.ti -1c
.RI "#define \fBpayload_type_get_mime\fP(pt)   ((pt)\->mime_type)"
.br
.ti -1c
.RI "#define \fBpayload_type_set_user_data\fP(pt,  p)   (pt)\->user_data=(p)"
.br
.ti -1c
.RI "#define \fBpayload_type_get_user_data\fP(pt)   ((pt)\->user_data)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fB_OrtpPayloadType\fP \fBOrtpPayloadType\fP"
.br
.ti -1c
.RI "typedef \fBOrtpPayloadType\fP \fBPayloadType\fP"
.br
.ti -1c
.RI "typedef struct \fB_PayloadTypeAvpfParams\fP \fBPayloadTypeAvpfParams\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBPayloadType\fP * \fBpayload_type_new\fP (void)"
.br
.ti -1c
.RI "\fBPayloadType\fP * \fBpayload_type_clone\fP (const \fBPayloadType\fP *payload)"
.br
.ti -1c
.RI "char * \fBpayload_type_get_rtpmap\fP (\fBPayloadType\fP *pt)"
.br
.ti -1c
.RI "void \fBpayload_type_destroy\fP (\fBPayloadType\fP *pt)"
.br
.ti -1c
.RI "void \fBpayload_type_set_recv_fmtp\fP (\fBPayloadType\fP *pt, const char *fmtp)"
.br
.ti -1c
.RI "void \fBpayload_type_set_send_fmtp\fP (\fBPayloadType\fP *pt, const char *fmtp)"
.br
.ti -1c
.RI "void \fBpayload_type_append_recv_fmtp\fP (\fBPayloadType\fP *pt, const char *fmtp)"
.br
.ti -1c
.RI "void \fBpayload_type_append_send_fmtp\fP (\fBPayloadType\fP *pt, const char *fmtp)"
.br
.ti -1c
.RI "void \fBpayload_type_set_avpf_params\fP (\fBPayloadType\fP *pt, \fBPayloadTypeAvpfParams\fP params)"
.br
.ti -1c
.RI "bool_t \fBpayload_type_is_vbr\fP (const \fBPayloadType\fP *pt)"
.br
.ti -1c
.RI "bool_t \fBfmtp_get_value\fP (const char *fmtp, const char *param_name, char *result, size_t result_len)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_pcmu8000\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_pcma8000\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_pcm8000\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_l16_mono\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_l16_stereo\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_lpc1016\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_g729\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_g7231\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_g7221\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_cn\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_g726_40\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_g726_32\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_g726_24\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_g726_16\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_aal2_g726_40\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_aal2_g726_32\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_aal2_g726_24\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_aal2_g726_16\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_gsm\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_lpc\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_lpc1015\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_speex_nb\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_speex_wb\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_speex_uwb\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_ilbc\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_amr\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_amrwb\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_truespeech\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_evrc0\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_evrcb0\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_silk_nb\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_silk_mb\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_silk_wb\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_silk_swb\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_aaceld_16k\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_aaceld_22k\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_aaceld_32k\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_aaceld_44k\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_aaceld_48k\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_opus\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_isac\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_gsm_efr\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_codec2\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_bv16\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_mpv\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_h261\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_h263\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_h263_1998\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_h263_2000\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_mp4v\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_theora\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_h264\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_x_snow\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_jpeg\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_vp8\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_g722\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_t140\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_t140_red\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_x_udpftp\fP"
.br
.ti -1c
.RI "ORTP_VAR_PUBLIC \fBPayloadType\fP \fBpayload_type_telephone_event\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition of payload types\&. 


.SH "Function Documentation"
.PP 
.SS "bool_t fmtp_get_value (const char * fmtp, const char * param_name, char * result, size_t result_len)"
Parses a fmtp string such as 'profile=0;level=10', finds the value matching parameter param_name, and writes it into result\&. If a parameter name is found multiple times, only the value of the last occurence is returned\&. Despite fmtp strings are not used anywhere within oRTP, this function can be useful for people using RTP streams described from SDP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfmtp\fP the fmtp line (format parameters) 
.br
\fIparam_name\fP the parameter to search for 
.br
\fIresult\fP the value given for the parameter (if found) 
.br
\fIresult_len\fP the size allocated to hold the result string 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if the parameter was found, else FALSE\&. 
.RE
.PP

.SS "void payload_type_destroy (\fBPayloadType\fP * pt)"
Frees a PayloadType\&. 
.SS "void payload_type_set_recv_fmtp (\fBPayloadType\fP * pt, const char * fmtp)"
Sets a recv parameters (fmtp) for the PayloadType\&. This method is provided for applications using RTP with SDP, but actually the ftmp information is not used for RTP processing\&. 
.SS "void payload_type_set_send_fmtp (\fBPayloadType\fP * pt, const char * fmtp)"
Sets a send parameters (fmtp) for the PayloadType\&. This method is provided for applications using RTP with SDP, but actually the ftmp information is not used for RTP processing\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for oRTP from the source code\&.
