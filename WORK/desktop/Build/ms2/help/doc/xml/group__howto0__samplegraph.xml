<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__howto0__samplegraph" kind="group">
    <compoundname>howto0_samplegraph</compoundname>
    <title>Howto 1: build a sample audio graph.</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><heading level="1">Initialize mediastreamer2</heading>
</para><para>When using mediastreamer2, your first task is to initialize the library:</para><para><preformatted>
        #include &lt;mediastreamer2/mscommon.h&gt;</preformatted></para><para><preformatted>        int i;</preformatted></para><para><preformatted>        i=ms_init();
        if (i!=0)
          return -1;</preformatted></para><para><preformatted></preformatted></para><para>Mediastreamer2 provides internal components which are called filters. Those filters must be linked together so that OUTPUT from one filter is sent to INPUT of the other filters.</para><para>Usually, filters are used for processing audio or video data. They could capture data, play/draw data, encode/decode data, mix data (conference), transform data (echo canceller). One of the most important filter is the RTP filters that are able to send and receive RTP data.</para><para><heading level="1">Graph sample</heading>
</para><para>If you are using mediastreamer2, you probably want to do Voice Over IP and get a graph providing a 2 way communication. This 2 graphs are very simple:</para><para>This first graph shows the filters needed to capture data from a sound card, encode them and send it through an RTP session.</para><para><preformatted>
             AUDIO    -&gt;    ENCODER   -&gt;   RTP
            CAPTURE   -&gt;              -&gt;  SENDER
</preformatted></para><para>This second graph shows the filters needed to receive data from an RTP session decode it and send it to the playback device.</para><para><preformatted>
        RTP      -&gt;    DECODER   -&gt;   DTMF       -&gt;   AUDIO
       RECEIVER  -&gt;              -&gt;  GENERATION  -&gt;  PLAYBACK
</preformatted></para><para><heading level="1">Code to initiate the filters of the Graph sample</heading>
</para><para>Note that the NULL/error checks are not done for better reading. To build the graph, you&apos;ll need some information: you need to select the sound card and of course have an RTP session created with oRTP.</para><para><preformatted>
        MSSndCard *sndcard;
        sndcard=ms_snd_card_manager_get_default_card(ms_snd_card_manager_get());</preformatted></para><para><preformatted>        /* audio capture filter */
        MSFilter *soundread=ms_snd_card_create_reader(captcard);
        MSFilter *soundwrite=ms_snd_card_create_writer(playcard);</preformatted></para><para><preformatted>        MSFilter *encoder=ms_filter_create_encoder(&quot;PCMU&quot;);
        MSFilter *decoder=ms_filter_create_decoder(&quot;PCMU&quot;);</preformatted></para><para><preformatted>        MSFilter *rtpsend=ms_filter_new(MS_RTP_SEND_ID);
        MSFilter *rtprecv=ms_filter_new(MS_RTP_RECV_ID);</preformatted></para><para><preformatted>        RtpSession *rtp_session = *** your_ortp_session *** ;</preformatted></para><para><preformatted>        ms_filter_call_method(rtpsend,MS_RTP_SEND_SET_SESSION,rtp_session);
        ms_filter_call_method(rtprecv,MS_RTP_RECV_SET_SESSION,rtp_session);</preformatted></para><para><preformatted>        MSFilter *dtmfgen=ms_filter_new(MS_DTMF_GEN_ID);
</preformatted></para><para>In most cases, the above graph is not enough: you&apos;ll need to configure filter&apos;s options. As an example, you need to set sampling rate of sound cards&apos; filters:</para><para><preformatted>
        int sr = 8000;
        int chan=1;
        ms_filter_call_method(soundread,MS_FILTER_SET_SAMPLE_RATE,&amp;sr);
        ms_filter_call_method(soundwrite,MS_FILTER_SET_SAMPLE_RATE,&amp;sr);
        ms_filter_call_method(stream-&gt;encoder,MS_FILTER_SET_SAMPLE_RATE,&amp;sr);
        ms_filter_call_method(stream-&gt;decoder,MS_FILTER_SET_SAMPLE_RATE,&amp;sr);</preformatted></para><para><preformatted>        ms_filter_call_method(soundwrite,MS_FILTER_SET_NCHANNELS, &amp;chan);</preformatted></para><para><preformatted>        /* if you have some fmtp parameters (from SDP for example!) */
        char *fmtp1 = ** get your fmtp line **;
        char *fmtp2 = ** get your fmtp line **;
        ms_filter_call_method(stream-&gt;encoder,MS_FILTER_ADD_FMTP, (void*)fmtp1);
        ms_filter_call_method(stream-&gt;decoder,MS_FILTER_ADD_FMTP,(void*)fmtp2);
</preformatted></para><para><heading level="1">Code to link the filters and run the graph sample</heading>
</para><para><preformatted>
        ms_filter_link(stream-&gt;soundread,0,stream-&gt;encoder,0);
        ms_filter_link(stream-&gt;encoder,0,stream-&gt;rtpsend,0);</preformatted></para><para><preformatted>        ms_filter_link(stream-&gt;rtprecv,0,stream-&gt;decoder,0);
        ms_filter_link(stream-&gt;decoder,0,stream-&gt;dtmfgen,0);
        ms_filter_link(stream-&gt;dtmfgen,0,stream-&gt;soundwrite,0); 
</preformatted></para><para>Then you need to &apos;attach&apos; the filters to a ticker. A ticker is a graph manager responsible for running filters.</para><para>In the above case, there is 2 independant graph within the ticker: you need to attach the first element of each graph (the one that does not contains any INPUT pins)</para><para><preformatted>
        /* create ticker */
        MSTicker *ticker=ms_ticker_new();</preformatted></para><para><preformatted>        ms_ticker_attach(ticker,soundread);
        ms_ticker_attach(ticker,rtprecv);
</preformatted></para><para><heading level="1">Code to unlink the filters and stop the graph sample</heading>
</para><para><preformatted>
        ms_ticker_detach(ticker,soundread);
        ms_ticker_detach(ticker,rtprecv);</preformatted></para><para><preformatted>        ms_filter_unlink(stream-&gt;soundread,0,stream-&gt;encoder,0);
        ms_filter_unlink(stream-&gt;encoder,0,stream-&gt;rtpsend,0);</preformatted></para><para><preformatted>        ms_filter_unlink(stream-&gt;rtprecv,0,stream-&gt;decoder,0);
        ms_filter_unlink(stream-&gt;decoder,0,stream-&gt;dtmfgen,0);
        ms_filter_unlink(stream-&gt;dtmfgen,0,stream-&gt;soundwrite,0);</preformatted></para><para><preformatted>        if (rtp_session!=NULL) rtp_session_destroy(rtp_session);
        if (rtpsend!=NULL) ms_filter_destroy(rtpsend);
        if (rtprecv!=NULL) ms_filter_destroy(rtprecv);
        if (soundread!=NULL) ms_filter_destroy(soundread);
        if (soundwrite!=NULL) ms_filter_destroy(soundwrite);
        if (encoder!=NULL) ms_filter_destroy(encoder);
        if (decoder!=NULL) ms_filter_destroy(decoder);
        if (dtmfgen!=NULL) ms_filter_destroy(dtmfgen);
        if (ticker!=NULL) ms_ticker_destroy(ticker);
</preformatted> </para>    </detaileddescription>
  </compounddef>
</doxygen>
